<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>岁染</title>
  <icon>https://www.gravatar.com/avatar/7228219e90ece9b38ea5921da1fcc500</icon>
  <subtitle>别来无恙，你在心上</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-05T13:09:31.507Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Kagura</name>
    <email>651421775@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/09/04/%E3%80%90LeetCode%E3%80%91309%E5%91%A8%E8%B5%9B&amp;86%E5%8F%8C%E8%B5%9B/"/>
    <id>http://example.com/2022/09/04/%E3%80%90LeetCode%E3%80%91309%E5%91%A8%E8%B5%9B&amp;86%E5%8F%8C%E8%B5%9B/</id>
    <published>2022-09-04T15:43:40.565Z</published>
    <updated>2022-09-05T13:09:31.507Z</updated>
    
    <content type="html"><![CDATA[<h1>309周赛&amp;86双赛</h1><hr><h2 id="前言">前言</h2><p>最近对自己太放纵了，属实是有点不太行。</p><p>接下来要上强度了！</p><hr><h2 id="309-是miHoYo冠名周赛">309 是miHoYo冠名周赛</h2><hr><h2 id="T1">T1</h2><img src="/2022/09/04/%E3%80%90LeetCode%E3%80%91309%E5%91%A8%E8%B5%9B&86%E5%8F%8C%E8%B5%9B/Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20220904210845055.png" alt="image-20220904210845055" style="zoom:50%;"><p><strong>思路</strong></p><p>T1又是很简单的数组题，我们只需要判断两个元素出现位置中间隔的元素是否与给定的距离表相等即可。</p><p>而且哦，这种位置的选择，我们可以通过<code>hash</code>表的方式很容易的完成。尤其是前后位次关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">checkDistances</span>(<span class="params">self, s: <span class="built_in">str</span>, distance</span>):</span><br><span class="line">        hashmap=&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(s):</span><br><span class="line">            <span class="comment"># 记录第一次出现的位置</span></span><br><span class="line">            <span class="keyword">if</span> j <span class="keyword">not</span> <span class="keyword">in</span> hashmap.keys():</span><br><span class="line">                hashmap[j]=i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 判断第二次与第一次的差值是否等于距离表</span></span><br><span class="line">                val=i-hashmap[j]</span><br><span class="line">                <span class="keyword">if</span> val-<span class="number">1</span>!=distance[<span class="built_in">ord</span>(j)-<span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>)]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>这题是不是很像两数之和？<br>那我们干脆一起把<code>86双</code>的<code>T1</code>一起讲了吧</p><img src="/2022/09/04/%E3%80%90LeetCode%E3%80%91309%E5%91%A8%E8%B5%9B&86%E5%8F%8C%E8%B5%9B/Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20220904211556718.png" alt="image-20220904211556718" style="zoom:50%;"><p>呐，这鬼题也是，判断连续的，我们只需要看这个值是否被记录过就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findSubarrays</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="comment"># 要tm连续啊</span></span><br><span class="line">        <span class="comment"># 逆天</span></span><br><span class="line">        hashmap=&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)-<span class="number">1</span>):</span><br><span class="line">            val=nums[i]+nums[i+<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> val <span class="keyword">in</span> hashmap.keys():</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            hashmap[val]=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><hr><h2 id="T2">T2</h2><img src="/2022/09/04/%E3%80%90LeetCode%E3%80%91309%E5%91%A8%E8%B5%9B&86%E5%8F%8C%E8%B5%9B/Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20220904211717593.png" alt="image-20220904211717593" style="zoom:50%;"><p><strong>思路</strong></p><p>关键词：方法数！想到了什么？爬楼梯？斐波那契数列？没错，这种方法数，一般都有递推公式。这题也不例外。考虑两个方向，于是每次dp就能从左和从右。由于负数轴需要映射，为了简化操作，我们可以不用数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numberOfWays</span>(<span class="params">self, startPos: <span class="built_in">int</span>, endPos: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        MOD = <span class="number">10</span> ** <span class="number">9</span> + <span class="number">7</span></span><br><span class="line"><span class="meta">        @cache</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x: <span class="built_in">int</span>, left: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(x - endPos) &gt; left: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> left == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">1</span>  <span class="comment"># 成功到达终点，算一种方案</span></span><br><span class="line">            <span class="keyword">return</span> (f(x - <span class="number">1</span>, left - <span class="number">1</span>) + f(x + <span class="number">1</span>, left - <span class="number">1</span>)) % MOD</span><br><span class="line">        <span class="keyword">return</span> f(startPos, k)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>亦或是采用BFS进行广度搜索，得到所有可能的结果(相当于遍历，核心与DP相同)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MOD = <span class="number">10</span>**<span class="number">9</span> + <span class="number">7</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numberOfWays</span>(<span class="params">self, startPos: <span class="built_in">int</span>, endPos: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># BFS模拟全局搜索</span></span><br><span class="line">        pre = defaultdict()</span><br><span class="line">        pre[startPos] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> k:</span><br><span class="line">            nex = defaultdict()</span><br><span class="line">            <span class="keyword">for</span> pos <span class="keyword">in</span> pre:</span><br><span class="line">                <span class="comment"># 每次都会更新下一次的方向</span></span><br><span class="line">                <span class="comment"># 并且都会进行一个累加，表示重新走过</span></span><br><span class="line">                <span class="comment"># 更新往左与往右的方案数</span></span><br><span class="line">                nex[pos + <span class="number">1</span>] += pre[pos]</span><br><span class="line">                nex[pos - <span class="number">1</span>] += pre[pos]</span><br><span class="line">            <span class="keyword">for</span> pos <span class="keyword">in</span> nex:</span><br><span class="line">                nex[pos] %= MOD</span><br><span class="line">            pre = nex</span><br><span class="line">            k -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> pre[endPos] % MOD</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解法二：数学！</p><p>正着走:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>，负着走<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi><mo>−</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">K-X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>，距离<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span></p><p>我们有:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>X</mi><mo>+</mo><mo stretchy="false">(</mo><mo>−</mo><mo stretchy="false">(</mo><mi>K</mi><mo>−</mo><mi>X</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mi>D</mi><mspace linebreak="newline"></mspace><mi>X</mi><mo>=</mo><mfrac><mrow><mi>D</mi><mo>+</mo><mi>K</mi></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">X+(-(K-X))=D\\X=\frac{D+K}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>于是，转换为求解：从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>中取<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>个正数。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mi>C</mi><mi>K</mi><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">(</mo><mi>D</mi><mo>+</mo><mi>K</mi><mo stretchy="false">)</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">C^{1/2(D+K)}_K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3383em;vertical-align:-0.2935em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4065em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1/2</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2935em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>那，关于Python如何求组合数，其实有一个内置函数<code>comb</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numberOfWays</span>(<span class="params">self, startPos: <span class="built_in">int</span>, endPos: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        MOD=<span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span></span><br><span class="line">        d=<span class="built_in">abs</span>(endPos-startPos)</span><br><span class="line">        <span class="keyword">if</span> (k-<span class="built_in">abs</span>(endPos-startPos))&amp;<span class="number">1</span> <span class="keyword">or</span> k&lt;<span class="built_in">abs</span>(endPos-startPos):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> comb(k,(d+k)//<span class="number">2</span>)%MOD</span><br></pre></td></tr></table></figure><p>不用Comb的话，我们可以这样写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">comb</span>(<span class="params">m,n</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> m&gt;n <span class="keyword">or</span> <span class="built_in">type</span>(m)!=<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">type</span>(n)!=<span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 必须是整数且满足大小关系</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rank(n)//(rank(m)*rank(n-m))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rank</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span> <span class="keyword">or</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    ans=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">        ans*=i</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(ans)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numberOfWays</span>(<span class="params">self, startPos: <span class="built_in">int</span>, endPos: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        MOD=<span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span></span><br><span class="line">        d=<span class="built_in">abs</span>(endPos-startPos)</span><br><span class="line">        <span class="keyword">if</span> (k-<span class="built_in">abs</span>(endPos-startPos))&amp;<span class="number">1</span> <span class="keyword">or</span> k&lt;<span class="built_in">abs</span>(endPos-startPos):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> comb(k,(d+k)//<span class="number">2</span>)%MOD</span><br></pre></td></tr></table></figure><hr><h3 id="T3">T3</h3><img src="/2022/09/04/%E3%80%90LeetCode%E3%80%91309%E5%91%A8%E8%B5%9B&86%E5%8F%8C%E8%B5%9B/Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20220904214837427.png" alt="image-20220904214837427" style="zoom:50%;"><p><strong>思路</strong></p><p>位运算+双指针优化</p><p>其实看到这个连续就应该想到用双指针了。</p><p>当然，我的解法会遍历左右指针所有值，导致复杂度为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nm)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">nm</span><span class="mclose">)</span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestNiceSubarray</span>(<span class="params">self, nums</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 滑动窗口</span></span><br><span class="line">        left=right=<span class="number">0</span></span><br><span class="line">        ans=<span class="number">0</span></span><br><span class="line">        n=<span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">while</span> right&lt;n:</span><br><span class="line">            i=breakPoint=left</span><br><span class="line">            change=<span class="literal">False</span></span><br><span class="line">            <span class="keyword">while</span> i&lt;right:</span><br><span class="line">                <span class="keyword">if</span> nums[right]&amp;nums[i]!=<span class="number">0</span>:</span><br><span class="line">                    <span class="comment"># 只要是有一个够不成了</span></span><br><span class="line">                    <span class="comment"># 我们从构不成的位置重新构建子串</span></span><br><span class="line">                    <span class="comment"># 首先的尝试就是跳过</span></span><br><span class="line">                    breakPoint=i</span><br><span class="line">                    change=<span class="literal">True</span></span><br><span class="line">                    <span class="comment"># 子串肯定比原串小</span></span><br><span class="line">                    <span class="comment"># 所以不需要考虑，下次的截断点就是bp+1</span></span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">                <span class="comment"># 加入</span></span><br><span class="line">            left=breakPoint+<span class="number">1</span> <span class="keyword">if</span> change <span class="keyword">or</span> breakPoint!=left <span class="keyword">else</span> left</span><br><span class="line">            ans=<span class="built_in">max</span>(ans,<span class="built_in">len</span>(nums[left:right+<span class="number">1</span>]))</span><br><span class="line">            right+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用位运算的话，复杂度上其实也差不多啦</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestNiceSubarray</span>(<span class="params">self, nums</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 滑动窗口</span></span><br><span class="line">        left=right=<span class="number">0</span></span><br><span class="line">        ans=<span class="number">0</span></span><br><span class="line">        n=<span class="built_in">len</span>(nums)</span><br><span class="line">        or_=<span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> right&lt;n:</span><br><span class="line">            <span class="keyword">while</span> or_&amp;nums[right]:</span><br><span class="line">                or_^=nums[left]</span><br><span class="line">                left+=<span class="number">1</span></span><br><span class="line">                <span class="comment"># 加入</span></span><br><span class="line">            or_|=nums[right]</span><br><span class="line">            ans=<span class="built_in">max</span>(ans,right-left+<span class="number">1</span>)</span><br><span class="line">            right+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>当然，最后写的漂亮点，就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestNiceSubarray</span>(<span class="params">self, nums</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ans=left=or_=<span class="number">0</span></span><br><span class="line">        <span class="comment"># or_用来存放运算结果</span></span><br><span class="line">        <span class="comment"># 加入：or_| x</span></span><br><span class="line">        <span class="comment"># 剔除: or_^ x</span></span><br><span class="line">        <span class="keyword">for</span> right,x <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">while</span> or_&amp;x:</span><br><span class="line">                <span class="comment"># 此时需要剔除了</span></span><br><span class="line">                or_^=nums[left]</span><br><span class="line">                left+=<span class="number">1</span></span><br><span class="line">            or_|=x</span><br><span class="line">            ans=<span class="built_in">max</span>(ans,right-left+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><hr><h3 id="T4">T4</h3><img src="/2022/09/04/%E3%80%90LeetCode%E3%80%91309%E5%91%A8%E8%B5%9B&86%E5%8F%8C%E8%B5%9B/Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20220904215844294.png" alt="image-20220904215844294" style="zoom: 50%;"><p><strong>思路</strong></p><p>初见这个题的时候，想到的应该是贪心，谁有空就给谁，谁的时间最短谁就空闲。</p><p>于是我写了个不能AC的解:</p><p>超！！！！我这个解随便改改逻辑就AC了！！！！！！</p><p>超！！！！</p><p>我也做出T4了！！！！</p><p>这是离AK最近的一次！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mostBooked</span>(<span class="params">self, n: <span class="built_in">int</span>, meetings</span>):</span><br><span class="line">        st=[[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        val=[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        n=<span class="built_in">len</span>(meetings)</span><br><span class="line">        i=<span class="number">0</span></span><br><span class="line">        now=<span class="number">0</span></span><br><span class="line">        meetings.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>])</span><br><span class="line">        change=[<span class="literal">None</span>,<span class="literal">None</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i&lt;n:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> change[<span class="number">0</span>]!=<span class="literal">None</span>:</span><br><span class="line">                s,e=change</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                s, e = meetings[i]</span><br><span class="line">                <span class="keyword">if</span> now&lt;=s:</span><br><span class="line">                    <span class="comment"># 提前</span></span><br><span class="line">                    now=s</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    e+=now-s</span><br><span class="line">                    s=now</span><br><span class="line">                    </span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">            <span class="comment"># 时间到了</span></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> st:</span><br><span class="line">                <span class="keyword">if</span> _ <span class="keyword">and</span> _[<span class="number">0</span>]&lt;=now:</span><br><span class="line">                    _.pop()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 有无空闲</span></span><br><span class="line">            <span class="keyword">for</span> l,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(st):</span><br><span class="line">                <span class="keyword">if</span> j==[]:</span><br><span class="line">                    val[l]+=<span class="number">1</span></span><br><span class="line">                    j.append(e)</span><br><span class="line">                    now=s</span><br><span class="line">                    i+=<span class="number">1</span></span><br><span class="line">                    change[<span class="number">0</span>]=<span class="literal">None</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                now=<span class="built_in">min</span>([i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> st])</span><br><span class="line">                now=<span class="built_in">max</span>(now,s)</span><br><span class="line">                change=[now,now+(e-s)]</span><br><span class="line"></span><br><span class="line">        check=val[<span class="number">0</span>]</span><br><span class="line">        idx=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(val):</span><br><span class="line">            <span class="keyword">if</span> j&gt;check:</span><br><span class="line">                check=j</span><br><span class="line">                idx=i</span><br><span class="line">        <span class="keyword">return</span> idx</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>两个堆来回倒实现任务队列！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> heapq <span class="keyword">import</span> heappop</span><br><span class="line"><span class="keyword">from</span> heapq <span class="keyword">import</span> heappush</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mostBooked</span>(<span class="params">self, n: <span class="built_in">int</span>, meetings</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当会议室未占用，会有限提供资源给开始时间早的。</span></span><br><span class="line">        <span class="comment"># 两个堆来模拟，一个表示可用的会议室，另一个表示正在开会的会议室</span></span><br><span class="line"></span><br><span class="line">        cnt=[<span class="number">0</span>]*n</span><br><span class="line">        idle=<span class="built_in">list</span>(<span class="built_in">range</span>(n)) <span class="comment"># 可用的会议室</span></span><br><span class="line">        using=[]<span class="comment"># (结束时间，会议室编号)</span></span><br><span class="line">        meetings.sort() <span class="comment"># 必要的排序</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> st,end <span class="keyword">in</span> meetings:</span><br><span class="line">            <span class="comment"># 在st时刻前正在开会的会议室，把结束的弹出来</span></span><br><span class="line">            <span class="keyword">while</span> using <span class="keyword">and</span> using[<span class="number">0</span>][<span class="number">0</span>]&lt;=st:</span><br><span class="line">                <span class="comment"># 首先将使用栈中的内容弹出来</span></span><br><span class="line">                <span class="comment"># 并且将结束时间放入idle中，表示可用任务队列</span></span><br><span class="line">                heappush(idle,heappop(using)[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(idle)==<span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 如果当前没有可用的</span></span><br><span class="line">                <span class="comment"># 需要等到最近一个结束</span></span><br><span class="line">                e,i=heappop(using)</span><br><span class="line">                <span class="comment"># 补上时间</span></span><br><span class="line">                end+=e-st</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 将当前空闲的弹出去(其实也是索引最小值)</span></span><br><span class="line">                <span class="comment"># 将最短时间的出堆</span></span><br><span class="line">                i=heappop(idle)</span><br><span class="line"></span><br><span class="line">            cnt[i]+=<span class="number">1</span></span><br><span class="line">            <span class="comment"># 将当前结束时间和索引加入最小堆中</span></span><br><span class="line">            <span class="comment"># 每次取都是最小(最近一个结束的)</span></span><br><span class="line">            heappush(using,(end,i))</span><br><span class="line"></span><br><span class="line">        ans=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i,c <span class="keyword">in</span> <span class="built_in">enumerate</span>(cnt):</span><br><span class="line">            <span class="keyword">if</span> c&gt;cnt[ans]:</span><br><span class="line">                ans=i</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>O(n+mlogn+mlogn)</p><p>建堆+排+插入堆</p><hr><h1>86 双赛</h1><blockquote><p>T3和T4很有意思</p></blockquote><p>T2</p><p><strong>带余除法</strong></p><p>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>&gt;</mo><mn>4</mn><mo separator="true">,</mo><mn>2</mn><mo>&lt;</mo><mi>n</mi><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">n&gt;4,2&lt;n-2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span>，下面的表达式一定成立</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>=</mo><mi>q</mi><mo>∗</mo><mi>b</mi><mo>+</mo><mi>r</mi><mo separator="true">,</mo><mn>0</mn><mo>&lt;</mo><mo>=</mo><mi>r</mi><mo>&lt;</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">n=q*b+r,0&lt;=r&lt;b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6597em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span></span></p><p>这题完全就是脑筋急转弯<br>告诉你了，这玩意在<code>n-2</code>进制上必定为<code>12</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><hr><h2 id="T3-v2">T3</h2><img src="/2022/09/04/%E3%80%90LeetCode%E3%80%91309%E5%91%A8%E8%B5%9B&86%E5%8F%8C%E8%B5%9B/image-20220905204104988.png" alt="image-20220905204104988" style="zoom:33%;"><p>这题不难看出是位运算，难得是如何进行。</p><p>不是没有想过枚举，但是会不会有一种更加高效的手段拿来实现这个算法？很可惜，似乎是没有的。</p><p>所幸的是，位运算枚举还是挺快的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maximumRows</span>(<span class="params">self, mat: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], cols: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        位运算</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        枚举所有选择情况</span></span><br><span class="line"><span class="string">        实际上，二进制数就能表征所有的选择情况</span></span><br><span class="line"><span class="string">        二进制数还能用来表征更高位的数据</span></span><br><span class="line"><span class="string">        譬如之前的毒药和小鼠</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        ans=<span class="number">0</span></span><br><span class="line">        mask=[<span class="built_in">sum</span>(v&lt;&lt;j <span class="keyword">for</span> j,v <span class="keyword">in</span> <span class="built_in">enumerate</span>(row)) <span class="keyword">for</span> row <span class="keyword">in</span> mat]</span><br><span class="line">        <span class="comment"># 刚好就能够表示0-1覆盖情况</span></span><br><span class="line">        <span class="comment"># 例如：5-&gt; 101</span></span><br><span class="line">        <span class="comment"># 6-&gt;110</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">set</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>&lt;&lt;<span class="built_in">len</span>(mat[<span class="number">0</span>])):</span><br><span class="line">            <span class="comment"># 这样就能表征所有的情况</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">set</span>.bit_count()!=cols:</span><br><span class="line">                <span class="comment"># 剪枝</span></span><br><span class="line">                <span class="comment"># 不满足列的情况就丢弃</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 某一行 and 选择列如果还等于他自己</span></span><br><span class="line">            <span class="comment"># 那就说明可以覆盖</span></span><br><span class="line">            <span class="comment"># 1的时候恰好是1 0的时候不用管他</span></span><br><span class="line">            cnt=<span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> mask:</span><br><span class="line">                <span class="keyword">if</span> row &amp;<span class="built_in">set</span>==row:</span><br><span class="line">                    cnt+=<span class="number">1</span></span><br><span class="line">            ans=<span class="built_in">max</span>(ans,cnt)</span><br><span class="line">        <span class="keyword">return</span> ans </span><br><span class="line"></span><br><span class="line">            </span><br></pre></td></tr></table></figure><h2 id="T4-v2">T4</h2><img src="/2022/09/04/%E3%80%90LeetCode%E3%80%91309%E5%91%A8%E8%B5%9B&86%E5%8F%8C%E8%B5%9B/image-20220905204610760.png" alt="image-20220905204610760" style="zoom:50%;"><p>这题的关键字：<strong>连续consecutive</strong></p><p>所以，双指针搭建滑动窗口不失为一种好的选择。</p><p>当然，这类似背包问题，是存在一个限制条件的。</p><p>我们可以用单调队列来处理这种情况，通过维护单调队列，及时清理无用数据，保证队首是最大元素的同时，考虑是否加入和剔除元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maximumRobots</span>(<span class="params">self, chargeTimes: <span class="type">List</span>[<span class="built_in">int</span>], runningCosts: <span class="type">List</span>[<span class="built_in">int</span>], budget: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        ans=s=left=<span class="number">0</span></span><br><span class="line">        q=deque()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> right,(t,c) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(chargeTimes,runningCosts)):</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 处理右端点</span></span><br><span class="line">            <span class="keyword">while</span> q <span class="keyword">and</span> t&gt;=chargeTimes[q[-<span class="number">1</span>]]:</span><br><span class="line">                <span class="comment"># 只要当前的时间大于队列的时间</span></span><br><span class="line">                <span class="comment"># 就要维护队列的单调性</span></span><br><span class="line">                q.pop()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将这个端点加入</span></span><br><span class="line">            q.append(right)</span><br><span class="line">            s+=c <span class="comment"># 总的cost</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 处理左端点</span></span><br><span class="line">            <span class="keyword">while</span> q <span class="keyword">and</span> chargeTimes[q[<span class="number">0</span>]]+(right-left+<span class="number">1</span>)*s&gt;budget:</span><br><span class="line">                <span class="comment"># 太多了！ 最大的滚出去！</span></span><br><span class="line">                <span class="keyword">if</span> q[<span class="number">0</span>]==left:</span><br><span class="line">                    q.popleft()</span><br><span class="line">                s-=runningCosts[left]</span><br><span class="line">                <span class="comment"># 一直找啊找直到找到最大的那个</span></span><br><span class="line">                left+=<span class="number">1</span></span><br><span class="line">            <span class="comment"># 这样 超出区间的一个就是我们的一个连续的子序列了</span></span><br><span class="line">            <span class="comment"># 这样的方式能保证：</span></span><br><span class="line">            <span class="comment"># 如果后面加进来的值比较大</span></span><br><span class="line">            <span class="comment"># 我们可以直接剔除掉串</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 如果后面加进来的值比较小</span></span><br><span class="line">            <span class="comment"># 我们就无须对其进行维护</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 举个栗子</span></span><br><span class="line">            <span class="comment"># tar: 10</span></span><br><span class="line">            <span class="comment"># List: 4 3 1 2</span></span><br><span class="line">            <span class="comment"># q:4 3 1</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 插入2</span></span><br><span class="line">            <span class="comment"># 此时q: 4 3 2</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 发现超了</span></span><br><span class="line">            <span class="comment"># 我们就去掉最大的</span></span><br><span class="line">            <span class="comment"># 剩下的q: 3 2</span></span><br><span class="line">            <span class="comment"># 重新开始一段</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># tar:10</span></span><br><span class="line">            <span class="comment"># List: 1 3 4 2</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 插入2时:</span></span><br><span class="line">            <span class="comment"># q: 4</span></span><br><span class="line">            <span class="comment"># 插入2一定会炸</span></span><br><span class="line">            <span class="comment"># 那么我们就从4的位置开始新的子串</span></span><br><span class="line">            <span class="comment"># 直接定位到了最大的位置</span></span><br><span class="line">            <span class="comment"># 因为当x上溢</span></span><br><span class="line">            <span class="comment"># x+1一定上溢</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 而且，单调队列维护的是坐标索引</span></span><br><span class="line">            <span class="comment"># 方便我们定位</span></span><br><span class="line">            ans=<span class="built_in">max</span>(ans,right-left+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>我们可以反思一下，什么时候可以用单调队列？</p><ul><li>我们每次不符合条件的弹出都是最值</li><li>维护一个最值，使其满足限制条件</li></ul><p>怎么使用单调队列？</p><ul><li>及时弹出无用元素</li></ul><p>在滑动窗口维护最值问题，可以考虑单调队列：</p><ul><li>判断队列单调性，不满足时，队尾出队</li><li>增大窗口，队尾入队，更新统计值</li><li>判断是否满足条件，不满足则缩小窗口，队首出队</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;309周赛&amp;amp;86双赛&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近对自己太放纵了，属实是有点不太行。&lt;/p&gt;
&lt;p&gt;接下来要上强度了！&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;309-是miHoYo冠名周赛&quot;&gt;309 是miHoYo冠名周赛&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CFOP</title>
    <link href="http://example.com/2022/09/04/%E3%80%90cfop%E3%80%91%E9%AD%94%E6%96%B9/"/>
    <id>http://example.com/2022/09/04/%E3%80%90cfop%E3%80%91%E9%AD%94%E6%96%B9/</id>
    <published>2022-09-04T10:26:46.425Z</published>
    <updated>2022-09-04T10:28:53.578Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CFOP-F2L-F2L1">CFOP-F2L-F2L1</h3><p>(R U’ R’ U) y’ (R’ U2 R U’ U’) (R’ U R)</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">CFOP公式</summary>
    
    
    
    <category term="拾枝杂谈" scheme="http://example.com/categories/%E6%8B%BE%E6%9E%9D%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="魔方" scheme="http://example.com/tags/%E9%AD%94%E6%96%B9/"/>
    
  </entry>
  
  <entry>
    <title>脑科学の一些无用小知识</title>
    <link href="http://example.com/2022/09/04/%E3%80%90%E8%84%91%E7%A7%91%E5%AD%A6%E3%80%91%E8%84%91%E7%A7%91%E5%AD%A6%E3%81%AE%E4%B8%80%E4%BA%9B%E6%97%A0%E7%94%A8%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    <id>http://example.com/2022/09/04/%E3%80%90%E8%84%91%E7%A7%91%E5%AD%A6%E3%80%91%E8%84%91%E7%A7%91%E5%AD%A6%E3%81%AE%E4%B8%80%E4%BA%9B%E6%97%A0%E7%94%A8%E5%B0%8F%E7%9F%A5%E8%AF%86/</id>
    <published>2022-09-04T09:27:51.440Z</published>
    <updated>2022-09-04T10:13:14.612Z</updated>
    
    <content type="html"><![CDATA[<h1>脑科学の一些无用小知识</h1><hr><p>这篇文章的问世来源于<code>9/4</code>日的一些小遐想。</p><p>我感觉最近的大脑越来越不够用了。记忆东西也根本记不下来。于是乎，想去找到那么一点点的慰藉🌮 。</p><hr><h2 id="1️⃣-脑科学提升智力的方法">1️⃣ 脑科学提升智力的方法</h2><p>来自：<a href="https://www.bilibili.com/video/BV1PP4y157d5?spm_id_from=333.880.my_history.page.click&amp;vd_source=b6ddb37b0dc1af8da34b699b1daf8a16">学不会？做题做不出来？脑科学最强提升智力的方法！</a></p><p>视频中，up主根据音乐大佬的脑子和案例(尤其是莫扎特的训练方式)，得到了对于普通人来说，天赋一词并不存在。</p><p>而智商是可以通过<code>后天训练提升</code>的。关键在于<code>记忆</code>!</p><ul><li>单纯的拥有记忆并没有什么用。重要的是经常运用这些信息，来加强神经通路。</li><li>学习任何东西最好可以尽可能的调用更多的感受器。</li><li>尽量带有情绪进行学习。</li><li>尽可能接触不同事物。</li></ul><hr><h2 id="2️⃣-14种超简易的脑力增强法！一星期变聪明！">2️⃣ 14种超简易的脑力增强法！一星期变聪明！</h2><p>来自：<a href="https://www.bilibili.com/video/BV1U4411G7YP/?spm_id_from=333.788.recommend_more_video.-1&amp;vd_source=b6ddb37b0dc1af8da34b699b1daf8a16">14种超简易的脑力增强法！一星期变聪明！</a></p><p>视频直接提出了几种记忆力训练方法</p><ul><li>画一张地图</li><li>远离电子设备，多用纸笔</li><li>心酸</li><li>刺激味蕾</li><li>睡前回忆</li><li>参加新运动</li><li>参加手眼协调的活动</li><li>记电话号码</li><li>提高反应速度<ul><li>预览</li><li>问题</li><li>重读</li><li>研究</li><li>测试</li></ul></li><li>出声读书</li><li>保留脑力</li><li>总结重点</li></ul><hr><h2 id="3️⃣-熬夜的危害">3️⃣ 熬夜的危害</h2><p>来自：</p><p>TED演讲：<a href="https://www.bilibili.com/video/BV1qx411d7XW/?spm_id_from=333.788.recommend_more_video.6&amp;vd_source=b6ddb37b0dc1af8da34b699b1daf8a16">睡眠到底有多重要，看完不敢熬夜了！</a></p><ul><li>影响生殖激素分泌，显老且生殖能力变差</li><li>影响记忆力和学习能力，比睡眠充足的人少<code>40%</code>~</li><li>影响心脑血管系统jis</li><li>影响免疫力和DNA活力，免疫力低<code>70%</code>！</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">一些些从各类平台上收集来的小内容~</summary>
    
    
    
    <category term="拾枝杂谈" scheme="http://example.com/categories/%E6%8B%BE%E6%9E%9D%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="脑科学" scheme="http://example.com/tags/%E8%84%91%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>【海洋遥感】第一节课</title>
    <link href="http://example.com/2022/09/02/%E3%80%90%E6%B5%B7%E6%B4%8B%E9%81%A5%E6%84%9F%E3%80%91Unname/"/>
    <id>http://example.com/2022/09/02/%E3%80%90%E6%B5%B7%E6%B4%8B%E9%81%A5%E6%84%9F%E3%80%91Unname/</id>
    <published>2022-09-02T10:04:37.427Z</published>
    <updated>2022-09-04T04:27:48.438Z</updated>
    
    <content type="html"><![CDATA[<h1>海洋遥感</h1><hr><h2 id="一、海洋遥感的意义">一、海洋遥感的意义</h2><p>1️⃣ 理解海洋及地球</p><p>2️⃣ 利用海洋和地球</p><ul><li>海洋是人类最大的资源宝库，是全球生命支持系统的基本组成部分。</li><li>海洋资源的重要性促使人们采用各类手段对其进行调查研究。</li></ul><p><strong>痛点🤕</strong></p><ul><li>传统海洋调查依赖于调查船沿设定航线设置的稀疏取样，虽然定位测量准确，但在规模、范围和频度上受限制。</li><li>海洋环境的<strong>进入性</strong>和<strong>可通达性</strong>较差</li><li>近海和海岸环境复杂多变，难以进行多变量同步控制观测</li><li>海岸环境变化周期长、信息量大，难以取得理想的可控制数据，在实时处理上也有着较大的困难。</li></ul><hr><p>海洋遥感具有大范围、实时同步、全天时、全天候多波段成像技术的优势可以快速地探测海洋表面各物理量的时空变化归规律。</p><p><strong>重要性</strong></p><ul><li>海洋科学或遥感科学的交叉学科</li><li>为海洋观测和研究提供了一个崭新的数据集，并开辟了新的考虑问题的视角</li><li>多传感器资料可推动海洋科学交叉学科研究的发展</li></ul><h2 id="二、海洋遥感的概念">二、海洋遥感的概念</h2><p><strong>基本概念</strong></p><p><strong>海洋遥感</strong> (Ocean Remote Sensing) 指以海洋及海岸带作为监测、研究对象，利用电磁波与大气和海洋的相互作用原理来观测和研究海洋的遥感技术。</p><p><strong>整体特点</strong></p><ul><li>不受地表、海面、天气和人为条件的性质，可以探测地理位置偏远、环境条件恶劣等不能直接进入的海区。</li><li>宏观特性可进行大面积同步测量，能够进行半球或全球探测。</li><li>可动态、长期的、周期性的对海洋现象进行监测</li><li>具有实时的或准实时的特征</li><li>多个探测器相配套</li><li>很显然，海洋遥感能够在不破坏当地环境下进行大面积的客观测量(没有人为干涉！)</li></ul><p><strong>具体特点</strong></p><blockquote><p>传感器设计方面</p></blockquote><p>光学传感器，带宽较窄，IFOV较大。微波波段应用较多(云层覆盖较多，微波数据比可见光和热红外能够取得的效果更好)。</p><blockquote><p>传感器定标与数据处理应用方面</p></blockquote><p>需要调查船、浮标、潜水器等仪器实测资料的支持。</p><blockquote><p>数据预处理方面</p></blockquote><p>更需要消除大气的干扰</p><blockquote><p>数据应用方面</p></blockquote><p>适用于海洋数值模型的检验与改进</p><p><strong>卫星类别</strong></p><p><strong>按传感方式</strong></p><ul><li>被动遥感</li><li>主动遥感</li></ul><p><strong>按使用目的</strong></p><ul><li>海洋水色卫星<ul><li>主要探测海洋水色要素，如叶绿素浓度、悬浮泥沙含量、有色可溶有机物等，也可以用来获得浅海水下地形、海冰、海水污染及海流等游泳信息价值</li></ul></li><li>海洋地形卫星<ul><li>主要用于探测海表面拓扑，即海平面高度的空间分布，此外，还可以探测海水、有效波高、海面风速和海流等</li></ul></li><li>海洋动力环境卫星<ul><li>用于探测海洋动力环境要素，如海面风场、浪场、海冰等。</li></ul></li></ul><hr><p><strong>雷达高度计</strong></p><ul><li>用于测量海面高度、有效波高及风速等海洋基本要素</li><li>无线电系统射电反射比较时间差</li></ul><p><strong>微波散射计</strong></p><ul><li>用于全球风场观测</li><li>通过测量风引起的粗糙海面对微博的后向散射特征来推算风场</li></ul><p><strong>微波辐射计</strong></p><ul><li>主要用于获取全球海洋温度、海面风场、大气水蒸气含量、云中水含量、海冰和降雨量</li><li>微波辐射计接收辐亮度(亮温)，等同于辐射的黑体的温度。</li><li>辐亮度F=(海表面温度、盐度，海面粗糙度，波浪破碎产生的白冠和气泡)</li></ul><h2 id="三、海洋遥感的发展历程">三、海洋遥感的发展历程</h2><h3 id="🚂-四个主要阶段">🚂 四个主要阶段</h3><p><strong>起步阶段</strong></p><p><strong>探索阶段</strong></p><p>气象卫星和陆地卫星的探测器波段设置不同，还要遥感需要更多的频段和更高的精度。</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1978</mn></mrow><annotation encoding="application/x-tex">1978</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1978</span></span></span></span> NASA发射了三科海洋遥感卫星。<code>SeasatA</code>是第一颗海洋试验卫星，但由于电源故障，仅运行了<code>108</code>天</p><p>我国的海洋卫星</p><ul><li>1988 FY-1A 第一颗海洋卫星</li><li>2002 HY-1A 第一颗海洋水色卫星</li><li>2008 FY-3 极轨卫星</li></ul><h2 id="四、海洋遥感的研究内容">四、海洋遥感的研究内容</h2><ul><li>物理海洋学遥感</li><li>生物海洋学和化学海洋学遥感</li><li>海冰监测</li><li>海洋污染监测</li><li>目标识别</li></ul><p>1️⃣ 海表温度遥感</p><p>主要采用热和红外波段和微波波段的信息进行海表面温度的遥感反演。</p><p>2️⃣ 海水浑浊度</p><p>3️⃣ 海洋污染监测</p><hr><h2 id="五、相关数据、资料获取">五、相关数据、资料获取</h2><hr><h2 id="六、主流的海洋遥感大学和机构">六、主流的海洋遥感大学和机构</h2><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">海洋遥感</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="海洋遥感" scheme="http://example.com/tags/%E6%B5%B7%E6%B4%8B%E9%81%A5%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>研究生英语A</title>
    <link href="http://example.com/2022/09/01/%E3%80%90%E7%A0%94%E7%A9%B6%E7%94%9F%E8%8B%B1%E8%AF%ADA%E3%80%91A64%E7%8F%AD%E8%AF%BE%E7%A8%8B/"/>
    <id>http://example.com/2022/09/01/%E3%80%90%E7%A0%94%E7%A9%B6%E7%94%9F%E8%8B%B1%E8%AF%ADA%E3%80%91A64%E7%8F%AD%E8%AF%BE%E7%A8%8B/</id>
    <published>2022-09-01T05:37:07.620Z</published>
    <updated>2022-09-01T06:16:30.868Z</updated>
    
    <content type="html"><![CDATA[<h1>研究生英语</h1><p>TextA 从宏观到微观</p><ul><li>文章主题-&gt;段落主题-&gt;语法分析</li><li>文章背景介绍</li><li>文本语法现象</li></ul><p>Begin 介绍</p><p>End 测试</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">研究生英语A~</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="英语" scheme="http://example.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>【Data Mining】Chapter 1. Introduction</title>
    <link href="http://example.com/2022/08/31/%E3%80%90Data%20Mining%E3%80%91Chapter%201.%20Introduction/"/>
    <id>http://example.com/2022/08/31/%E3%80%90Data%20Mining%E3%80%91Chapter%201.%20Introduction/</id>
    <published>2022-08-31T01:14:23.432Z</published>
    <updated>2022-08-31T02:55:59.891Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1️⃣-What-is-Data-Mining">1️⃣ What is Data Mining?</h2><ul><li><strong>Data mining:</strong> 🌟 Discover valid, novel, useful, and understandable patterns in massive datasets.</li></ul><p><strong>Cross Disciplines</strong></p><ul><li>Databases</li><li>Machine learning</li><li>Statistics</li><li>Neural network</li><li>Parallel / Distributed computing</li></ul><hr><h2 id="2️⃣-Characteristics-of-Data-Mining">2️⃣ Characteristics of Data Mining</h2><ul><li>Massive dataset</li><li>Automatically searching for interesting patterns from historical data</li><li>Fast</li><li>Scalable</li><li>Update easily</li><li>Practical</li><li>Decision support</li></ul><hr><h2 id="3️⃣-The-main-tasks-of-Data-Mining">3️⃣ The main tasks of Data Mining</h2><ul><li><p>Clustering</p></li><li><p>Classification</p></li><li><p>Anomaly Detection</p></li><li><p>Association Rules</p></li><li><p>Social Analysis</p></li><li><p>Recommender Systems</p></li><li><p>Sequence Mining</p></li></ul><h3 id="🌬️-Association-Rule-Mining">🌬️ Association Rule Mining</h3><p>Detect sets of attributes or items that frequently co-occur in many database records and rules among them.</p><blockquote><p>关联规则挖掘，旨在寻找到经常同时出现在数据库记录和其中的规则中的属性或项集。</p></blockquote><hr><h3 id="🔥-Classification">🔥 Classification</h3><p>Build a model of classes on training dataset, and then, assign a new record to one of several predefined classes.</p><blockquote><p>一个简单的分类模型：决策树。</p><p>分类是在先验基础上(经验、样本)，对未定义的数据赋予新的属性。</p></blockquote><hr><h3 id="🍦-Clustering">🍦 Clustering</h3><p>Partition the dataset into groups such that elements in a group have lower inter-group similarity and higher intra-group similarity.</p><blockquote><p>聚类的核心在于对于无标签数据，通过模型将其划分为具有簇间差异最大、簇内差异最小的簇</p></blockquote><hr><h3 id="🐍-Anomaly-Detection">🐍 Anomaly Detection</h3><p><strong>Anomalies:</strong> 🌟 The set of objects are considerably dissimilar from the remaining of the data.</p><p>Give a set of <code>n</code> objects, and <code>k</code>, the number of expected anomalies, find the top <code>k</code> objects that are considerably dissimilar or inconsistent with the remaining data.</p><hr><h3 id="📘-Sequence-Mining">📘 Sequence Mining</h3><p>Given a set of sequences, find the complete set of frequent subsequences.</p><blockquote><p>给定一组序列，找到他的频繁子序列的完整集合</p></blockquote><hr><h2 id="4️⃣-The-kinds-of-Date">4️⃣ The kinds of Date</h2><ul><li>Relational Databases<ul><li>说人话就是处理结构化数据，以关系表的形式存储</li></ul></li><li>Data Warehouses<ul><li>数据仓库顾名思义，是⼀个很⼤的数据存储集合，出于企业的分析性报告和决策⽀持⽬的⽽创建，对多样的业务数据进⾏筛选与整合。</li></ul></li><li>Transactional Databases</li><li>Spatial Data</li><li>Time Series</li><li>Text Databases</li><li>Multimedia databases</li><li>Data Streams</li><li>Biomedical Data</li><li>World-Wide Web</li><li>Graph</li></ul><hr><h2 id="5️⃣-Knowledge-Discovery-Process">5️⃣ Knowledge Discovery Process</h2><img src="/2022/08/31/%E3%80%90Data%20Mining%E3%80%91Chapter%201.%20Introduction/image-20220831101945274.png" alt="image-20220831101945274" style="zoom:50%;"><p>说人话就是：</p><p>从数据库中进行<code>数据清洗和聚合</code>，接着在数据仓库中进行<code>选择和变换</code>，通过<code>数据挖掘</code>，对得到的<code>模式进行评估</code>，最终得到可用的<code>知识</code>。</p><p><strong>Key Step🔑</strong></p><p>1️⃣ Learning the application domain</p><ul><li>relevant prior knowledge and goals of application</li></ul><p>2️⃣ Creating a target data resource</p><p>3️⃣ Data cleaning and preprocessing. (may take 60% of effort)</p><p>4️⃣ Data reduction and transformation</p><p>5️⃣ Choosing the mining algorithms to search for patterns of interest.</p><p>6️⃣ Pattern evaluation and knowledge presentation.</p><p>7️⃣ Use of discovered knowledge</p><blockquote><p>可以归纳为<strong>三个阶段</strong></p><ul><li>用户画像阶段</li><li>数据处理阶段</li><li>评估应用阶段</li></ul><p>用户画像阶段，需要学习用户相关领域的知识，创建我们的目标数据资源</p><p>数据处理阶段，需要进行数据预处理、数据降维和变换、数据挖掘这几个步骤，找到感兴趣的模式</p><p>评估应用阶段，则是将得到的模式进行评估，利用该模式对知识进行表达和运用</p></blockquote><hr><h2 id="6️⃣-Interesting-Patterns">6️⃣ Interesting Patterns</h2><p><strong>Measures</strong></p><p>🌟 A pattern is interesting if it is <code>easily understood</code> by humans, <code>valid</code> on new or test data with some degree of <code>certainly, potentially useful, novel,</code> or <code>validates some hypothesis</code> that a user seeks to confirm.</p><p>✏️ 如果一种模式“很容易被人类理解”，对新数据或测试数据“有效”，并具有某种程度的“肯定、潜在有用、新颖”或“验证用户试图确认的某些假设”，那么这种模式就是有趣的。</p><blockquote><p>Objective or Subjective</p></blockquote><p><strong>Objective</strong>: based on <code>statistics and structures of pattern</code>s, e.g., support, confidence, etc.</p><p><strong>Subjective</strong>: based on <code>user’s belief in the data</code>, e.g., unexpectedness, novelty, actionability, etc.</p><blockquote><p>all or only interesting patterns</p></blockquote><p><strong>All:</strong> Completeness</p><p><strong>Only:</strong> An optimization problem–challenging</p><ul><li>Can a data mining system find only the interesting patterns</li><li>approaches<ul><li>First generate all the patterns and then filter out the uninteresting ones.</li><li>Guide and constrain the discovery process.</li></ul></li></ul><hr><h2 id="7️⃣-Research-Issues-in-Data-Mining">7️⃣ Research Issues in Data Mining</h2><ul><li>Mining methodology</li><li>User interaction</li><li>Applications and social impacts</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">数据挖掘</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="数据分析" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    <category term="数据挖掘" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Hot100 详细题解</title>
    <link href="http://example.com/2022/08/30/%E3%80%90LeetCode%E3%80%91Hot100%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2022/08/30/%E3%80%90LeetCode%E3%80%91Hot100%E9%A2%98%E8%A7%A3/</id>
    <published>2022-08-30T09:05:04.167Z</published>
    <updated>2022-08-30T14:20:51.135Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hot-100-题解🔥">Hot 100 题解🔥</h2><h3 id="前言-v2">前言</h3><p>最近打算开个新坑，也就是这个Hot 100。</p><p>做完这份题解后，我会对我做过的所有题里有意思的，值得一说的再写一份题解。</p><hr><p>这份题解并不按照顺序进行，而是根据🏷️进行排序。不定期更新，平均一天1~2T，有空的话会加更。</p><hr><h3 id="一、数组">一、数组</h3><p>1.1 <a href="https://leetcode.cn/problems/two-sum/">两数之和</a></p><p><strong>题干：</strong></p><p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return <code>indices of the two numbers such that they add up to target</code>.</p><p>You may assume that each input would have <code>exactly one solution</code>, and you may not use the same element twice.</p><p>You can return the answer in any order.</p><p><strong>示例：</strong></p><blockquote><p>Input: nums = [2,7,11,15], target = 9<br>Output: [0,1]<br>Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].</p></blockquote><blockquote><p>Input: nums = [3,2,4], target = 6<br>Output: [1,2]</p></blockquote><p><strong>思路：</strong></p><p>介个题本身考察的是对数组的理解和对数据结构的应用，我们可以想到一种最简单的方式：暴力。</p><p>借助暴力搜索+集合去重的方式，很快就能得到需要的答案。但这样的时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，远远超出预期。</p><p>亦或是思路二：先排好序，接着通过二分的方式找到另一个。这种方式有个好处，那就是不需要数组去重，遇到重复的跳过就行了。时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(logn)+O(logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>排序+二分。</p><p>但是还是不够快，思路三可以通过<code>hash</code>表的方式进行，为什么能想到<code>hash</code>表呢？首先，这个数组本身是无序的，排序需要花费一定的时间复杂度。而对于某一个数<code>i</code>来说，他的配对为<code>target-i</code>，我们关注的，如何在后一次遇到<code>target-i</code>时及时找到我们的<code>i</code>？<code>hash</code>表可以很快的实现这一点。而且不需要担心重复问题。</p><p><strong>实现：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        hashmap=&#123;&#125;</span><br><span class="line">        res=[]</span><br><span class="line">        <span class="keyword">for</span> i,num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> (j:=target-num) <span class="keyword">in</span> hashmap.keys():</span><br><span class="line">                <span class="keyword">return</span> [hashmap[j],i]</span><br><span class="line">            hashmap[num]=i</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">热题！还是热题！</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>【遥感科学】第一章 遥感科学的发展</title>
    <link href="http://example.com/2022/08/30/%E3%80%90%E9%81%A5%E6%84%9F%E7%A7%91%E5%AD%A6%E3%80%91%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E9%81%A5%E6%84%9F%E7%A7%91%E5%AD%A6%E7%9A%84%E5%8F%91%E5%B1%95/"/>
    <id>http://example.com/2022/08/30/%E3%80%90%E9%81%A5%E6%84%9F%E7%A7%91%E5%AD%A6%E3%80%91%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E9%81%A5%E6%84%9F%E7%A7%91%E5%AD%A6%E7%9A%84%E5%8F%91%E5%B1%95/</id>
    <published>2022-08-30T03:36:45.704Z</published>
    <updated>2022-09-01T06:22:54.452Z</updated>
    
    <content type="html"><![CDATA[<h1>第一章 遥感科学的发展🌐</h1><hr><h2 id="一、遥感的起源与发展✈️">一、遥感的起源与发展✈️</h2><p>1️⃣ 得益于战争，遥感技术得到了大力的发展</p><p>2️⃣ 上世纪<code>60</code>年代，国际上第一次将<code>遥感技术</code>作为一项科学技术门类以来，其理论逐渐发展，不断完善，在军事、资环调查、环境与灾害监测方面展现了巨大的优势。</p><p>3️⃣ 目前，世界各国向空间发射<code>6000</code>多颗卫星，其中<code>1/3</code>是遥感卫星。</p><blockquote><p><strong>1962</strong>年，第一届国际环境遥感大会在美国密歇根大学召开，<strong>遥感Remote sening</strong>一词正式被提出</p><p><strong>1957</strong>年苏联发射第一颗人造卫星</p><p><strong>1958</strong>年美国发射人造卫星</p><p><strong>1959</strong>年美国启动科罗纳卫星侦查计划</p><p><strong>1960</strong>年美国发射第一颗气象卫星</p><p><strong>1970</strong>年中国发射第一颗东方红卫星</p></blockquote><hr><h2 id="二、遥感的基本概念">二、遥感的基本概念</h2><h3 id="遥感的定义">遥感的定义</h3><p>1️⃣ 广义上的遥感</p><p>​泛指一切不接触物体而进行的远距离探测，包括对电磁场、力场、机械波等的探测。</p><p>2️⃣ 狭义上的遥感</p><p>​利用传感器记录目标的电磁波特征，通过对数据的处理、综合分析，揭示物体的特征及其变化规律的综合性探测技术</p><p>他是以电磁波与地面物质相互作用为基础，来探测、分析和研究地球资源与环境，并揭示相关要素的空间分布特征与时空变化规律的一门新兴科学。</p><p><strong>遥</strong>：远距离，非接触</p><p><strong>感</strong>：通过某种仪器进行探测并感知被测量物体的形状、大小、状态、特征等</p><p><strong>遥感的特点</strong></p><ul><li>面状信息获取、覆盖范围大</li><li>时效性强</li><li>连续性</li><li>多维信息</li><li>生动、形象、直观</li><li>经济实惠</li></ul><hr><p><strong>电磁波谱</strong></p><p>将电磁波按波长(或频率)从小到大(从大到小)排列起来，就是电磁波谱。</p><p>自变量是 $\lambda $ （波长），而因变量是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span> , 反射率，或者说信息量。</p><p>值得注意下，所谓的波段一直指的都是一个范围，表示光子能量的范围，例如我们的红光波段、蓝光波段、绿光波段 。</p><p><strong>谱</strong> 一个物理量随另一个物理量的变化情况(反射率在波长下的变化)</p><p><strong>遥感的基本物理基础</strong></p><p>任何物体都具有发射、反射和吸收电磁波的特性，物体与电磁波的相互作用，形成了物体的电磁波特性，这是遥感探测物体的基础、依据。不同类型的地物具有不同的波谱特征，这也是遥感识别地物的基础。</p><p>遥感得到的数据一般是不同波长下的反射波谱曲线。</p><p>而反射率曲线，一般受到<strong>尺度</strong>、<strong>纯度视场大小</strong>、<strong>环境条件</strong>、<strong>方向角度</strong>等因素的影响。</p><p>当电磁波与地物发生作用时，会导致选择性的反射，不同地物呈现出不同的特征。因而可以通过遥感数据反演地物。</p><p>地表接收能量也会导致升温，从而发射热辐射，被传感器接收后，就成了热红外遥感。</p><p>传感器接收后，会将信息量转化为图像上的灰度值。</p><hr><p><strong>波段</strong></p><p>一定的电磁波范围。(如TM波段1的波段范围是0.45 ~ 0.52μm，波段2是0.53~0.61μm等)</p><p><strong>波段与通道🍌</strong></p><p>对传感器而言，波段与通道是等价的。</p><p>对图像处理而言，我们是将波段放到通道中对图像进行渲染。</p><p><strong>全色图像</strong></p><p>全色图像也是黑白的，指的是可见光到近红外波谱范围里头，传感器获取的一个宽波谱图像。</p><p><strong>彩色合成</strong></p><p>将在红绿蓝波段获取的单波段图像分别赋予红色、绿色和蓝色，并将3个图像叠加到一起，称为彩色图像。</p><p><strong>假彩色合成</strong></p><p>合成图像时，所用的波段的光谱段和赋予的相应通道不相一致，合成出来的图像的颜色与实际地物颜色不一致。</p><hr><p><strong>定标</strong></p><p>输入输出模式映射，或者说，就是将输出数据的范围映射到一个统一的区间，以方便多数据操作。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">遥感科学</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="遥感科学" scheme="http://example.com/tags/%E9%81%A5%E6%84%9F%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>遥感科学</title>
    <link href="http://example.com/2022/08/30/%E3%80%90%E9%81%A5%E6%84%9F%E7%A7%91%E5%AD%A6%E3%80%91%E9%81%A5%E6%84%9F%E7%A7%91%E5%AD%A6A/"/>
    <id>http://example.com/2022/08/30/%E3%80%90%E9%81%A5%E6%84%9F%E7%A7%91%E5%AD%A6%E3%80%91%E9%81%A5%E6%84%9F%E7%A7%91%E5%AD%A6A/</id>
    <published>2022-08-30T02:26:41.799Z</published>
    <updated>2022-08-30T03:36:24.277Z</updated>
    
    <content type="html"><![CDATA[<h1>遥感科学</h1><hr><h2 id="Lesson-1">Lesson 1</h2><blockquote><p>date 2022.8.30</p></blockquote><p><strong>姜小光老师</strong></p><ul><li><a href="mailto:xgjiang@ucas.ac.cn">xgjiang@ucas.ac.cn</a></li></ul><p><strong>参考教材</strong></p><p>《遥感应用分析原理与方法》赵英时等。</p><hr><h2 id="第一章-遥感科学的发展🏷️">第一章 遥感科学的发展🏷️</h2><h3 id="一、遥感的起源于发展">一、遥感的起源于发展</h3><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">遥感科学</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="遥感科学" scheme="http://example.com/tags/%E9%81%A5%E6%84%9F%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Data Mining</title>
    <link href="http://example.com/2022/08/29/%E3%80%90Data%20Mining%E3%80%91%E8%AF%BE%E7%A8%8B/"/>
    <id>http://example.com/2022/08/29/%E3%80%90Data%20Mining%E3%80%91%E8%AF%BE%E7%A8%8B/</id>
    <published>2022-08-29T04:12:25.393Z</published>
    <updated>2022-08-30T02:39:24.990Z</updated>
    
    <content type="html"><![CDATA[<h1>Introduction</h1><hr><p>Tutor: LiuYing</p><p>Main Contents:</p><ul><li><p>Who’s LiuYing</p><ul><li>PKU CS</li><li>Northwest University of USA</li></ul></li><li><p>Scores</p><ul><li>30% daily work</li><li>40% group work</li><li>30% Final test</li></ul></li><li><p>How to study this class</p><ul><li>In English</li><li>Do it early</li><li>communicate with teach</li><li>enhance study ability</li></ul></li><li><p>the motivation of Data Mining.</p></li><li><p>Four space of Data Mining.</p><ul><li>Useful</li><li>Understandable</li><li>valid</li><li>novel</li></ul></li><li><p>Kaggle competition</p></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">数据挖掘</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="数据分析" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    <category term="数据挖掘" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>Ucas选课</title>
    <link href="http://example.com/2022/08/25/UCAS%E9%80%89%E8%AF%BE/"/>
    <id>http://example.com/2022/08/25/UCAS%E9%80%89%E8%AF%BE/</id>
    <published>2022-08-25T07:11:03.038Z</published>
    <updated>2022-08-25T13:56:58.270Z</updated>
    
    <content type="html"><![CDATA[<h1>UCAS选课</h1><hr><h2 id="一、选课方式">一、选课方式</h2><p>登录<a href="https://sep.ucas.ac.cn">选课系统</a></p><h2 id="二、选课要求">二、选课要求</h2><h3 id="公共必修课">公共必修课</h3><p>1.《硕士学位英语》与《博士学位英语》由外语系开设，选课要求见附件1。</p><p>2.《新时代中国特色社会主义理论与实践》（以下简称“中特”）以及《自然辩证法概论》（以下简称“自辩”）由马克思主义学院在秋季学期开设。每位同学选择1个“中特”和1个“自辩”班级。</p><p>3.《学术道德与学术写作规范》。研究生须选择通论和分论班级各1个，通论班级由公共政策与管理学院开设，分论班级由本院系开设，可在同一学年的不同学期分别修读通论和分论，学年末所有通论和分论班级均结课且上传成绩后再根据通论和分论的成绩计算总成绩。通论和分论均通过视为课程通过。</p><p>4.《工程伦理》为工程类研究生公共必修课，由工程科学学院开设。每位工程硕士须选择1个通论班级和3个分论班级，不可跨学期修读，若秋季选课但未通过，须在春季学期重新选课。</p><hr><h3 id="公共选修课">公共选修课</h3><p>1.公共政策与管理学院和马克思主义学院的核心课和普及课可以作为公共选修课，选课时学生须自行将课程属性设置为公共选修课，具体课程信息请查看附件2《两用课程信息表》。</p><p>2.体育类公选课由体育部开设，每位学生每学期<strong>限选1门</strong>。</p><p>3.“人文系列讲座”课程（1学分），学生全学年听满<strong>20学时及以</strong>上获得该课程学分。</p><hr><h3 id="专业课程">专业课程</h3><p>包括一级学科核心课、一级学科普及课、一级学科研讨课、专业核心课、专业普及课、专业研讨课和科学前沿讲座。</p><p>1.每位学术型研究生须在导师和培养单位的指导下，修读本专业所属<strong>一级学科核心课</strong>以及<strong>一级学科下各专业核心课</strong>不少于<strong>2</strong>门；只开设1门核心课的学科或专业，学生须修读该核心课；未开设核心课的学科或专业，学生按导师或培养单位的意见进行选课。</p><blockquote><p><strong>专业硕士按所在培养单位的培养方案要求修读包括核心课在内的所有专业课程。</strong></p></blockquote><p>2.研究生须选择本学科的专业类课程以及经导师和培养单位审核的相关学科的专业类课程作为专业学位课。</p><p>3.“科学前沿讲座”课程（1学分），学生全学年听满20学时及以上获得该课程学分。</p><p><strong>（四）选课学分要求</strong></p><p>本学期每人选课总学分<strong>不得低于10学分</strong>，不含人文系列讲座和科学前沿讲座。</p><hr><p><strong>关于我的选课</strong></p><img src="/2022/08/25/UCAS%E9%80%89%E8%AF%BE/image-20220825151103990.png" alt="image-20220825151103990" style="zoom:50%;"><ul><li>中特✅</li><li>自辩✅</li><li>学术❎</li><li>工程❎</li><li>英语❎</li></ul><p><strong>学期时间</strong></p><img src="/2022/08/25/UCAS%E9%80%89%E8%AF%BE/image-20220825154410507.png" alt="image-20220825154410507" style="zoom: 33%;"><p><strong>课程分类</strong></p><img src="/2022/08/25/UCAS%E9%80%89%E8%AF%BE/image-20220825154545951.png" alt="image-20220825154545951" style="zoom: 33%;"><img src="/2022/08/25/UCAS%E9%80%89%E8%AF%BE/image-20220825154636639.png" alt="image-20220825154636639" style="zoom: 50%;"><p><strong>学分分配</strong></p><img src="/2022/08/25/UCAS%E9%80%89%E8%AF%BE/image-20220825154654483.png" alt="image-20220825154654483" style="zoom:50%;"><p><strong>必选课程</strong></p><img src="/2022/08/25/UCAS%E9%80%89%E8%AF%BE/image-20220825154918321.png" alt="image-20220825154918321" style="zoom:50%;"><img src="/2022/08/25/UCAS%E9%80%89%E8%AF%BE/image-20220825154952112.png" alt="image-20220825154952112" style="zoom:50%;"><p><strong>审核流程</strong></p><img src="/2022/08/25/UCAS%E9%80%89%E8%AF%BE/image-20220825155046073.png" alt="image-20220825155046073" style="zoom:50%;"><hr><h2 id="现有课程"><strong>现有课程</strong></h2><p><strong>资环学院🌍</strong></p><p>1️⃣ 现代地图学</p><p>2️⃣ 现代自然地理学</p><p>3️⃣ 当代人文与经济地理学</p><p>4️⃣ 环境地学导论</p><p>5️⃣ <a href="https://jwxk.ucas.ac.cn/course/coursetime/222844">现代水文学与水资源学</a></p><p>6️⃣ <a href="https://jwxk.ucas.ac.cn/course/coursetime/222843">冰冻圈科学概论</a></p><p>7️⃣ <a href="https://jwxk.ucas.ac.cn/course/coursetime/223423">湖泊学概论</a></p><p>8️⃣ <a href="https://jwxk.ucas.ac.cn/course/coursetime/223424">湖泊沉积与环境</a></p><p>9️⃣ <a href="https://jwxk.ucas.ac.cn/course/coursetime/222847">产业与交通地理学</a></p><p>🔟 <a href="https://jwxk.ucas.ac.cn/course/coursetime/223486">旅游资源评价与利用</a></p><hr><p>1️⃣ <a href="https://jwxk.ucas.ac.cn/course/coursetime/222849">人口流动与城镇化讨论班</a></p><p>2️⃣<a href="https://jwxk.ucas.ac.cn/course/coursetime/222574">全球导航卫星系统原理与应用</a></p><p>3️⃣ <a href="https://jwxk.ucas.ac.cn/course/coursetime/222569">遥感物理</a></p><p>4️⃣ <a href="https://jwxk.ucas.ac.cn/course/coursetime/222852">高光谱遥感</a></p><p>5️⃣<a href="https://jwxk.ucas.ac.cn/course/coursetime/223118">资源经济学</a></p><p>6️⃣ 资源科学纲要</p><p>7️⃣ <a href="https://jwxk.ucas.ac.cn/course/coursetime/223120"> 资源生态学</a></p><p>8️⃣<a href="https://jwxk.ucas.ac.cn/course/coursetime/227257">环境与自然资源系统建模</a></p><p>9️⃣ <a href="https://jwxk.ucas.ac.cn/course/coursetime/222851">资源循环利用与生态经济</a></p><p>🔟 <a href="https://jwxk.ucas.ac.cn/course/coursetime/223400">自然与文化遗产</a></p><hr><p>1️⃣ <a href="https://jwxk.ucas.ac.cn/course/coursetime/222853">全球变化生态学</a></p><p>2️⃣<a href="https://jwxk.ucas.ac.cn/course/coursetime/222560">生态系统生态学A</a></p><p>4️⃣<a href="https://jwxk.ucas.ac.cn/course/coursetime/223389">景观与区域生态学</a></p><p>5️⃣ <a href="https://jwxk.ucas.ac.cn/course/coursetime/222854">环境规划与管理</a></p><p>6️⃣ <a href="https://jwxk.ucas.ac.cn/course/coursetime/222561">生态统计学——原理与实践</a></p><p>7️⃣ <a href="https://jwxk.ucas.ac.cn/course/coursetime/223509">植物生理生态学</a></p><p>8️⃣<a href="https://jwxk.ucas.ac.cn/course/coursetime/223125">土壤物理学</a></p><p>9️⃣<a href="https://jwxk.ucas.ac.cn/course/coursetime/223437">生态遥感原理、技术与方法</a></p><p>🔟 <a href="https://jwxk.ucas.ac.cn/course/coursetime/223439"> 环境变化的生态效应</a></p><hr><p>1️⃣ <a href="https://jwxk.ucas.ac.cn/course/coursetime/223644">生态信息学原理、方法和应用</a></p><p>2️⃣<a href="https://jwxk.ucas.ac.cn/course/coursetime/223643">大尺度宏观生态系统科学</a></p><p>4️⃣ <a href="https://jwxk.ucas.ac.cn/course/coursetime/222856">高原生态系统生态学</a></p><p>5️⃣ <a href="https://jwxk.ucas.ac.cn/course/coursetime/222588">恢复生态学前沿</a></p><p>6️⃣ <a href="https://jwxk.ucas.ac.cn/course/coursetime/222858">大气环境化学</a></p><p>7️⃣ <a href="https://jwxk.ucas.ac.cn/course/coursetime/222857">大气污染控制技术</a></p><p>8️⃣<a href="https://jwxk.ucas.ac.cn/course/coursetime/222859">大气污染监测技术</a></p><p>9️⃣ <a href="https://jwxk.ucas.ac.cn/course/coursetime/223126">环境土壤学</a></p><p>🔟 <a href="https://jwxk.ucas.ac.cn/course/coursetime/223127">环境修复与资源工程</a></p><hr><p>1️⃣ <a href="https://jwxk.ucas.ac.cn/course/coursetime/222862">现代环境分析</a></p><p>2️⃣<a href="https://jwxk.ucas.ac.cn/course/coursetime/222861">高等环境化学</a></p><p>4️⃣ 高等环境生物学</p><p>5️⃣ 环境分子毒理学</p><p>6️⃣ 环境毒理学研究方法</p><p>7️⃣ 环境污染控制化学</p><p>8️⃣ 纳米毒理学</p><p>9️⃣ 环境纳米科学与技术</p><p>🔟 环境影响评价</p><hr><p>1️⃣ 新型有机污染物前沿进展</p><p>2️⃣ 水质界面过程原理</p><p>4️⃣ 饮用水安全</p><p>5️⃣ 膜分离原理与技术</p><p>6️⃣ 工业废气控制过程技术与工程设计</p><p>7️⃣ 环境工程数学模型与Matlab应用</p><p>8️⃣ 高级废水生物处理工程</p><p>9️⃣ 水处理药剂与材料</p><hr><p><strong>电子学院⚡</strong></p><blockquote><p>与遥感相关的可选课程</p></blockquote><p>1️⃣ 微波遥感概论</p><p>2️⃣ 合成孔径雷达原理</p><p>4️⃣ 干涉合成孔径雷达技术</p><p>5️⃣ 大气遥感</p><p>6️⃣ 城市环境遥感</p><p>7️⃣ 现代雷达系统</p><hr><p><strong>目前已选课程(占用中🏷️ )</strong></p><table><thead><tr><th style="text-align:center">课程</th><th style="text-align:center">学分</th><th style="text-align:center">学时</th></tr></thead><tbody><tr><td style="text-align:center">遥感科学A</td><td style="text-align:center">4</td><td style="text-align:center">76</td></tr><tr><td style="text-align:center">海洋遥感</td><td style="text-align:center">2</td><td style="text-align:center">42</td></tr><tr><td style="text-align:center">热红外遥感</td><td style="text-align:center">2.5</td><td style="text-align:center">48</td></tr><tr><td style="text-align:center">模式识别</td><td style="text-align:center">2</td><td style="text-align:center">40</td></tr><tr><td style="text-align:center">数据挖掘</td><td style="text-align:center">2</td><td style="text-align:center">40</td></tr><tr><td style="text-align:center">图像处理</td><td style="text-align:center">2</td><td style="text-align:center">40</td></tr><tr><td style="text-align:center">区域可持续发展理论与实践</td><td style="text-align:center">3</td><td style="text-align:center">60</td></tr><tr><td style="text-align:center">高光谱遥感基础与数据处理</td><td style="text-align:center">4</td><td style="text-align:center">60</td></tr></tbody></table><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">秋季学期选课</summary>
    
    
    
    <category term="琐碎日常" scheme="http://example.com/categories/%E7%90%90%E7%A2%8E%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="杂谈" scheme="http://example.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Python位运算</title>
    <link href="http://example.com/2022/08/23/%E3%80%90Python%E3%80%91%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>http://example.com/2022/08/23/%E3%80%90Python%E3%80%91%E4%BD%8D%E8%BF%90%E7%AE%97/</id>
    <published>2022-08-23T14:58:37.510Z</published>
    <updated>2022-08-23T15:29:40.853Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运算符">运算符</h2><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">&amp;</td><td style="text-align:center">与，1&amp;1=1，其他情况为0</td></tr><tr><td style="text-align:center">|</td><td style="text-align:center">或，0|0=0，其他为1</td></tr><tr><td style="text-align:center">~</td><td style="text-align:center">逐位取反</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">异或，同0异1</td></tr><tr><td style="text-align:center">&lt;&lt;</td><td style="text-align:center">左移</td></tr><tr><td style="text-align:center">&gt;&gt;</td><td style="text-align:center">右移</td></tr></tbody></table><p>简单来看一下操作吧：</p><p><strong>倍乘</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">5</span>&lt;&lt;<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 10</span></span><br></pre></td></tr></table></figure><p>5: <code>101=1*4+0*2+1*</code></p><p>5&lt;&lt;1: <code>1010=1*8+0*4+1*2+0*1=2(1*4+0*2+1*1+0*1)=2(101)</code></p><p><strong>倍除</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">5</span>&gt;&gt;<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p><strong>奇数判断</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A&amp;<span class="number">1</span>==<span class="number">1</span>?</span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">coinChange</span>(<span class="params">self, coins, amount: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> amount:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 将减法转换为除法进行运算</span></span><br><span class="line">        <span class="comment"># 一旦最低位为1，则说明找到解，停止运算</span></span><br><span class="line">        dp = <span class="number">1</span> &lt;&lt; amount</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> dp:</span><br><span class="line">            tmp = <span class="number">0</span></span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 每一轮运算计算一遍dp除以2**i得到的所有可能解</span></span><br><span class="line">            <span class="keyword">for</span> coin <span class="keyword">in</span> coins:</span><br><span class="line">                <span class="comment"># tmp用于存储运算的中间结果</span></span><br><span class="line">                <span class="comment"># dp &gt;&gt; coin 实际上是进行除法运算：dp//2**coin</span></span><br><span class="line">                <span class="comment"># 使用位运算“或”来保存全部除法运算结果中的‘1’，实现批量运算</span></span><br><span class="line">                <span class="comment"># ps:这也是二进制移位的一个神奇之处，大家可以手动模拟一下这个过程</span></span><br><span class="line">                tmp |= dp &gt;&gt; coin</span><br><span class="line">            <span class="comment"># 一旦末尾出现1，则返回结果</span></span><br><span class="line">            <span class="keyword">if</span> tmp &amp; <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">            <span class="comment"># 将本轮运算的全部运算结果送入下一轮计算</span></span><br><span class="line">            dp = tmp</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">Python位运算</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>常见词</title>
    <link href="http://example.com/2022/08/23/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91%E5%B8%B8%E8%A7%81%E8%AF%8D/"/>
    <id>http://example.com/2022/08/23/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91%E5%B8%B8%E8%A7%81%E8%AF%8D/</id>
    <published>2022-08-23T01:22:06.565Z</published>
    <updated>2022-08-31T02:54:42.053Z</updated>
    
    <content type="html"><![CDATA[<h2 id="8-23">8/23</h2><p><strong>expense</strong></p><ul><li><p>n. 花销，费用，支出</p></li><li><p>at the expense of … 以…为代价，在牺牲…的情况下</p></li></ul><p><strong>efficiency</strong></p><ul><li>n. 效率，效能</li><li>increase efficiency</li></ul><p><strong>establish</strong></p><ul><li>vt. 简历，创立，证实</li><li>establish a relationship</li><li>establish oneself 使自己立足</li></ul><p><strong>expand</strong></p><ul><li>vt. 扩充，扩大</li><li>vi. 详谈，详诉</li><li>expand the business</li></ul><p><strong>exact</strong></p><ul><li>adj. 精确的，严谨的，精密的</li><li>vt. 勒索，索取</li><li>your exact words 原话</li></ul><p><strong>effect</strong></p><ul><li>n. 影响，结果，特效，效果</li><li>v. 引起，使发生</li><li>a negative effect</li><li>in effect 实际上</li><li>take effect 见效</li><li>put sth into effect 实施，实行</li></ul><p><strong>examine</strong></p><ul><li>vt. 仔细研究，仔细检查，测试</li><li>examine data 剖析数据</li><li>examine sb on sth</li></ul><p><strong>efficient</strong></p><ul><li>adj. 效率高的</li><li>an efficient method</li></ul><p><strong>effective</strong></p><ul><li>adj. 有效的，实际的</li><li>effective power</li><li>an effective method</li></ul><p>He made an effective method, which is so efficient.</p><p><strong>exist</strong></p><ul><li>vi. 存在，生存</li></ul><p><strong>estate</strong></p><ul><li>n. 庄园，遗产</li><li>n. 住宅区，工业区</li><li>inherit the estate 继承遗产</li><li>a housing estate 住宅区</li></ul><p><strong>comprehension</strong></p><ul><li>n. 理解力</li></ul><p><strong>experience</strong></p><ul><li>n. 经历</li></ul><p><strong>experienced</strong></p><ul><li>adj. 经验丰富的</li></ul><p><strong>identify</strong></p><ul><li>vt. 认出，发现，识别</li><li>vt. 显示身份</li></ul><p><strong>intestine</strong></p><ul><li>n. 肠</li><li>adj. 内部的</li></ul><p><strong>thermal</strong></p><ul><li>adj. 热的</li></ul><hr><p><strong>performance</strong></p><ul><li>n. 表演，情况，<strong>执行</strong>，<strong>性能</strong></li><li>adj. 高性能的，性能卓越的 <strong>performance compute</strong></li></ul><p><strong>implement</strong></p><ul><li>v. 执行，贯彻</li><li>n. 工具，手段</li></ul><p><strong>concretely</strong></p><ul><li>adv. 具体地</li></ul><p><strong>creatively</strong></p><ul><li>adv. 创造性地</li></ul><p><strong>plagiarism</strong></p><ul><li>n. 剽窃</li></ul><p><strong>explosive</strong></p><ul><li>adj. 易爆的</li><li>n. 炸药</li></ul><p><strong>transaction</strong></p><ul><li>n. 交易，业务，公报</li></ul><p><strong>competitive pressure</strong></p><ul><li>竞争压力</li></ul><p><strong>starving for knowledge</strong></p><ul><li>渴望知识</li></ul><p><strong>starve</strong></p><ul><li>挨饿，需要，使极其缺乏</li></ul><p><strong>pattern</strong></p><ul><li>n. 模式</li></ul><p><strong>complexity</strong></p><ul><li>n. 复杂性</li><li>complexity of 复杂度</li></ul><p><strong>hypothesis</strong></p><ul><li>n. 假说</li></ul><p><strong>frequently</strong></p><ul><li>adv. 经常地</li></ul><p><strong>occur</strong></p><ul><li>v. 发生，存在，出现</li></ul><p><strong>promotional</strong></p><ul><li>adj. 促销的，推广的</li></ul><p><strong>assign</strong></p><ul><li><p>v. 分配，布置，转让，<strong>赋值</strong></p></li><li><p>assign a new record to one of  several predefined classes 将一条新记录分配给几个预定义类中的一个</p></li></ul><p><strong>bankrupt</strong></p><ul><li>adj. 破产的</li></ul><p><strong>profitability</strong></p><ul><li>n. 盈利能力</li></ul><p><strong>anomaly</strong></p><ul><li>n. 异常现象,离群点</li></ul><p><strong>citation</strong></p><ul><li>n. 引用，引语</li></ul><p><strong>domain</strong></p><ul><li>n. 领域,范围</li><li>domain experts 领域专家</li></ul><p><strong>temporal</strong></p><ul><li>adj. 时间的，世俗的</li><li>n. 世间万物，暂存的事物</li><li>spatio-temporal data 时空数据</li></ul><p><strong>decision makers</strong></p><ul><li>决策者</li></ul><p><strong>simulation</strong></p><ul><li>n. 模拟</li></ul><p><strong>disunderstand</strong></p><ul><li>不明白</li></ul><p><strong>incomprehension</strong></p><ul><li>不理解</li></ul><p><strong>unapprehensive</strong></p><ul><li>不理解的</li></ul><hr><p><strong>cross disciplines</strong></p><ul><li>跨学科</li></ul><p><strong>sophisticated</strong></p><ul><li>先进的，在行的</li></ul><p><strong>Scalable</strong></p><ul><li>可扩展的</li></ul><p><strong>Practical</strong></p><ul><li>切实可行的，真实的</li></ul><p><strong>partition</strong></p><ul><li>n. 隔墙，隔板，分裂，分治</li><li>v. 分割，分裂</li></ul><p><strong>considerably</strong></p><ul><li>adv. 非常，相当多地</li></ul><p><strong>heterogeneous</strong></p><ul><li>adj. 参差的，异质的</li><li>n. 异类</li></ul><p><strong>relevant</strong></p><ul><li>adj. 有关的</li></ul><p><strong>prior</strong></p><ul><li>adj. 先前的，先验的</li></ul><p><strong>invariant</strong></p><ul><li>adj. 不变的</li></ul><p><strong>optimization</strong></p><ul><li>优化</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">None</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="英语" scheme="http://example.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 百题留念</title>
    <link href="http://example.com/2022/08/22/%E3%80%90LeetCode%E3%80%91%E7%99%BE%E9%A2%98%E7%95%99%E5%BF%B5/"/>
    <id>http://example.com/2022/08/22/%E3%80%90LeetCode%E3%80%91%E7%99%BE%E9%A2%98%E7%95%99%E5%BF%B5/</id>
    <published>2022-08-22T14:19:16.191Z</published>
    <updated>2022-08-23T03:56:06.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="后日谈♎">后日谈♎</h2><p>不知不觉已经参加在LeetCode上刷了一百题啦！！！</p><p>该成就于2022/8/22达成！</p><img src="/2022/08/22/%E3%80%90LeetCode%E3%80%91%E7%99%BE%E9%A2%98%E7%95%99%E5%BF%B5/image-20220822222053312.png" alt="image-20220822222053312" style="zoom:50%;"><img src="/2022/08/22/%E3%80%90LeetCode%E3%80%91%E7%99%BE%E9%A2%98%E7%95%99%E5%BF%B5/image-20220822222105104.png" alt="image-20220822222105104" style="zoom:50%;"><p>用时27天！平均每天3.74T!!!</p><img src="/2022/08/22/%E3%80%90LeetCode%E3%80%91%E7%99%BE%E9%A2%98%E7%95%99%E5%BF%B5/image-20220822222204107.png" alt="image-20220822222204107" style="zoom:50%;"><p>中等题继上次60题后与简单分庭抗礼后，这一次实现了反超！！想不到，你这个萌新还是实力派！</p><hr><p>目前的大部分题型已经刷过啦！</p><p>包括热门tag</p><ul><li>bfs</li><li>dfs</li><li>并查集</li><li>二分</li><li>hash</li><li>bst</li><li>无向图</li><li>数学</li><li>dp</li><li>递归</li><li>迭代</li></ul><p>但还是有一些处于知识盲区，包括但不限于：</p><ul><li>有向图</li><li>路径分析</li><li>线段树</li><li>平衡树</li><li>红黑树</li><li>B+树</li><li>优先队列</li><li>堆</li><li>状态转移</li></ul><hr><p>周赛目前也是参加了三场！</p><ul><li>84场双赛 2372/4575 48.2%</li><li>85双赛 1681/4193 60%</li><li>307场周赛 2436/7064 65.5%</li></ul><p>总体而言，还是有所进步的！！</p><hr><p>最近也学了些黑科技：</p><ul><li>倒序并查集</li><li>查分数组</li><li>回溯构造</li><li>拓扑排序</li><li>图问题</li></ul><hr><p>希望两百把的时候，能过T3吧！目前的计划是：</p><ul><li>周赛+双赛</li><li>每日一题</li><li>LeetCode75 II</li></ul><p>满足以上条件，我会对目前做过的所有题进行复盘！(一天大概10道)</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">一伯题啦！</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>数据分析实例--随机抽取微信接龙人员</title>
    <link href="http://example.com/2022/08/22/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91%E5%AE%9E%E4%BE%8B%E9%9A%8F%E6%9C%BA%E9%80%89%E5%8F%96%E5%BE%AE%E4%BF%A1%E6%8E%A5%E9%BE%99%E7%9A%84%E4%BA%BA%E6%95%B0/"/>
    <id>http://example.com/2022/08/22/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91%E5%AE%9E%E4%BE%8B%E9%9A%8F%E6%9C%BA%E9%80%89%E5%8F%96%E5%BE%AE%E4%BF%A1%E6%8E%A5%E9%BE%99%E7%9A%84%E4%BA%BA%E6%95%B0/</id>
    <published>2022-08-22T13:16:59.719Z</published>
    <updated>2022-08-22T13:19:20.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="案例-v2">案例</h2><p>数据分析，要求从微信接龙中随机抽取<code>35</code>名选手参加毕业典礼。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">s:<span class="built_in">str</span>,k:<span class="built_in">int</span>=<span class="number">35</span></span>)-&gt;<span class="literal">None</span>:</span><br><span class="line"></span><br><span class="line">    hashmap=defaultdict(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(s) <span class="keyword">as</span> f:</span><br><span class="line">        nameList=f.readlines()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nameList:</span><br><span class="line">        hashmap[val[<span class="number">0</span>]]=(val:=i.split(<span class="string">&quot;.&quot;</span>))[<span class="number">1</span>].strip(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> random.sample(<span class="built_in">range</span>(<span class="number">1</span>,(l:=<span class="built_in">len</span>(hashmap))+<span class="number">1</span>),l-k <span class="keyword">if</span> l&gt;k <span class="keyword">else</span> <span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(hashmap[<span class="built_in">str</span>(i)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">solve(<span class="string">r&quot;C:\Users\lenovo\Desktop\新建 XLS 工作表.txt&quot;</span>)</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">None</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="数据分析" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Collections.deque()详解</title>
    <link href="http://example.com/2022/08/22/%E3%80%90Python%E3%80%91deque()%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2022/08/22/%E3%80%90Python%E3%80%91deque()%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-08-22T07:27:39.475Z</published>
    <updated>2022-08-22T15:07:01.672Z</updated>
    
    <content type="html"><![CDATA[<h1>deque()</h1><p>deque是栈和队列的一种广义实现，deque是&quot;double-end queue&quot;的简称；deque支持线程安全、有效内存地以近似<code>O(1)</code>的性能在deque的两端插入和删除元素，尽管list也支持相似的操作，但是它主要在固定长度操作上的优化，从而在<code>pop(0)</code>和<code>insert(0,v)</code>（会改变数据的位置和大小）上有<code>O(n</code>)的时间复杂度。</p><p><strong>常用方法：</strong></p><h2 id="append">append()</h2><p>从右端添加元素（<code>与list同</code>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">st = <span class="string">&quot;abcd&quot;</span></span><br><span class="line">list1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">dst = deque(st)</span><br><span class="line">dlist1 = deque(list1)</span><br><span class="line">dst.append(<span class="number">4</span>)</span><br><span class="line">dlist1.append(<span class="string">&quot;k&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(dst)</span><br><span class="line"><span class="built_in">print</span>(dlist1)</span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line"><span class="comment">#deque([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, 4])</span></span><br><span class="line"><span class="comment">#deque([0, 1, 2, 3, &#x27;k&#x27;])</span></span><br></pre></td></tr></table></figure><h2 id="appendleft">appendleft()</h2><p>从左端添加元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">st = <span class="string">&quot;abcd&quot;</span></span><br><span class="line">list1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">dst = deque(st)</span><br><span class="line">dlist1 = deque(list1)</span><br><span class="line">dst.appendleft(<span class="number">4</span>)</span><br><span class="line">dlist1.appendleft(<span class="string">&quot;k&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(dst)</span><br><span class="line"><span class="built_in">print</span>(dlist1)</span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line"><span class="comment">#deque([4, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;])</span></span><br><span class="line"><span class="comment">#deque([&#x27;k&#x27;, 0, 1, 2, 3])</span></span><br></pre></td></tr></table></figure><h2 id="extend">extend()</h2><p>从右端逐个添加可迭代对象（<code>与list同</code>）<br>Python中的可迭代对象有：列表、元组、字典、字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">ex = (<span class="number">1</span>, <span class="string">&quot;h&quot;</span>, <span class="number">3</span>)</span><br><span class="line">st = <span class="string">&quot;abcd&quot;</span></span><br><span class="line">list1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">dst = deque(st)</span><br><span class="line">dlist1 = deque(list1)</span><br><span class="line">dst.extend(ex)</span><br><span class="line">dlist1.extend(ex)</span><br><span class="line"><span class="built_in">print</span>(dst)</span><br><span class="line"><span class="built_in">print</span>(dlist1)</span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line"><span class="comment">#deque([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, 1, &#x27;h&#x27;, 3])</span></span><br><span class="line"><span class="comment">#deque([0, 1, 2, 3, 1, &#x27;h&#x27;, 3])</span></span><br></pre></td></tr></table></figure><h2 id="extendleft">extendleft()</h2><p>从左端逐个添加可迭代对象</p><h2 id="pop">pop()</h2><p>移除列表中的一个元素（默认最右端的一个元素），并且返回该元素的值（<code>与list同</code>），如果没有元素，将会报出IndexError</p><h2 id="popleft">popleft()</h2><p>移除列表中的一个元素（默认最左端的一个元素），并且返回该元素的值，如果没有元素，将会报出IndexError</p><h2 id="count">count()</h2><p>统计队列中的元素个数（<code>与list同</code>）</p><h2 id="insert-index-obj">insert(index,obj)</h2><p>在指定位置插入元素（<code>与list同</code>）</p><h2 id="rotate-n">rotate(n)</h2><p>rotate(n)， 从右侧反转n步，如果n为负数，则从左侧反转。<br>d.rotate(1) 等于 d.appendleft(d.pop())</p><h2 id="clear">clear()</h2><p>将deque中的元素全部删除，最后长度为0</p><h2 id="remove">remove()</h2><p>移除第一次出现的元素，如果没有找到，报出ValueError</p><h2 id="maxlen">maxlen</h2><p>只读的属性，deque限定的最大长度，如果无，就返回None。<br>当限制长度的deque增加超过限制数的项时, 另一边的项会<code>自动删除</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">st = <span class="string">&quot;abbcd&quot;</span></span><br><span class="line">dq = deque（）</span><br><span class="line">dq.append(st)</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">Collections.deque()详解</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python map函数(类)详解</title>
    <link href="http://example.com/2022/08/20/%E3%80%90Python%E3%80%91map%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2022/08/20/%E3%80%90Python%E3%80%91map%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-08-20T13:33:21.859Z</published>
    <updated>2022-08-21T01:43:50.879Z</updated>
    
    <content type="html"><![CDATA[<h2 id="理论">理论</h2><p><code>map()</code>函数是<code>Python</code>的内置函数，会根据提供的函数参数，对传入的序列数据进行映射。</p><p>所以，<code>map()</code>函数也称<code>映射函数</code>。</p><p>在<code>Python</code>中，<code>map</code>是一个类，有着迭代方法，能够返回对应值。平时也能充当着函数使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x[<span class="number">0</span>],[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])))</span><br><span class="line"></span><br><span class="line"><span class="comment"># [1, 3]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data=[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">A=<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x[<span class="number">0</span>],data)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    <span class="built_in">print</span>(A.__next__())</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h3 id="格式">格式</h3><p>最常见的格式为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>(function,iterables,...)-&gt;<span class="built_in">map</span></span><br></pre></td></tr></table></figure><p><strong>Input</strong></p><ul><li>function: 映射函数</li><li>iterables: 可迭代序列</li></ul><p><strong>Output</strong></p><ul><li>一个可迭代对象</li></ul><hr><h2 id="实践">实践</h2><p>我们来进行一个简单的尝试！</p><p><strong>实例一</strong></p><p>设计一个函数，将两个数组<code>A</code>和<code>B</code>中的元素加起来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Add</span>(<span class="params">x,y</span>):</span><br><span class="line">    n,m=<span class="built_in">len</span>(x),<span class="built_in">len</span>(y)</span><br><span class="line">    <span class="keyword">if</span> n&gt;m:</span><br><span class="line">        n,m=m,n</span><br><span class="line">        x,y=y,x</span><br><span class="line">    new=[i <span class="keyword">for</span> i <span class="keyword">in</span> y]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        new[i]+=x[i]</span><br><span class="line">    <span class="keyword">return</span> new</span><br><span class="line"></span><br><span class="line">A=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">B=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(Add(A,B))</span><br><span class="line"></span><br><span class="line"><span class="comment"># [2, 4, 6, 8, 10, 12, 7, 8]</span></span><br></pre></td></tr></table></figure><p>那如果对格式输入不那么严格，又想比较简便地实现操作，我们可以通过<code>map</code>+<code>lambda</code>表达式的方式，对输入的元素进行一一映射。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x,y:x+y,A,B)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># [2, 4, 6, 8, 10, 12]</span></span><br></pre></td></tr></table></figure><p>此时，第一个参数是一个映射(函数),第二，第三个参数则是输入的可迭代对象。<code>map</code>会自动的<code>依次取出</code>可迭代对象中的每个元素，通过映射输出。我们可以通过<code>map.__next__()</code>控制获取每一个元素，或是直接将返回的迭代对象转化为<code>list</code>获取全部元素。</p><p><code>map</code>能够确保数据的最小截断，也就是满足两个或多个可迭代对象进行的最小长度。比如上文提到的，<code>A</code>数组的长度是高于<code>B</code>数组的，但由于<code>map</code>对象的特性，返回值只保留到<code>B</code>的长度。</p><hr><p>是不是学会了！那我们再来看一题。</p><p>将一个元组对象转化为一个列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A=((<span class="number">7</span>),(<span class="number">7</span>),(<span class="number">7</span>),(<span class="number">7</span>),(<span class="number">7</span>),(<span class="number">7</span>),(<span class="number">7</span>),(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>([[i] <span class="keyword">for</span> i <span class="keyword">in</span> A])</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">list</span>,A)))</span><br></pre></td></tr></table></figure><hr><p><strong>实例二</strong></p><blockquote><p>出自LC417太平洋大西洋水流问题</p></blockquote><p>有一个 m × n 的矩形岛屿，与 太平洋 和 大西洋 相邻。 “太平洋” 处于大陆的左边界和上边界，而 “大西洋” 处于大陆的右边界和下边界。</p><p>这个岛被分割成一个由若干方形单元格组成的网格。给定一个 m x n 的整数矩阵 heights ， heights<code>[r][c]</code>表示坐标 (r, c) 上单元格 高于海平面的高度 。</p><p>岛上雨水较多，如果相邻单元格的高度 小于或等于 当前单元格的高度，雨水可以直接向北、南、东、西流向相邻单元格。水可以从海洋附近的任何单元格流入海洋。</p><p>返回网格坐标 result 的 2D 列表 ，其中 result[i] = [ri, ci] 表示雨水从单元格 (ri, ci) 流动 既可流向太平洋也可流向大西洋 。</p><img src="https://assets.leetcode.com/uploads/2021/06/08/waterflow-grid.jpg" style="zoom:50%;"><blockquote><p>输入: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]<br>输出: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pacificAtlantic</span>(<span class="params">self, heights: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        m,n=<span class="built_in">len</span>(heights),<span class="built_in">len</span>(heights[<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">start</span>):</span><br><span class="line">            visitSet=<span class="built_in">set</span>()</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x,y</span>):</span><br><span class="line">                <span class="keyword">if</span> (x,y) <span class="keyword">in</span> visitSet:</span><br><span class="line">                    <span class="keyword">return</span> </span><br><span class="line">                val=heights[x][y]</span><br><span class="line">                visitSet.add((x,y))</span><br><span class="line">                <span class="keyword">for</span> i,j <span class="keyword">in</span> [[x+<span class="number">1</span>,y],[x-<span class="number">1</span>,y],[x,y-<span class="number">1</span>],[x,y+<span class="number">1</span>]]:</span><br><span class="line">                    <span class="keyword">if</span> <span class="number">0</span>&lt;=i&lt;m <span class="keyword">and</span> <span class="number">0</span>&lt;=j&lt;n <span class="keyword">and</span> heights[i][j]&gt;=val:</span><br><span class="line">                        dfs(i,j)</span><br><span class="line">                        </span><br><span class="line">            <span class="keyword">for</span> i,j <span class="keyword">in</span> start:</span><br><span class="line">                dfs(i,j)</span><br><span class="line">            <span class="keyword">return</span> visitSet </span><br><span class="line">        </span><br><span class="line">        pacificSet=[(<span class="number">0</span>,i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]+[(i,<span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">        altanticSet=[(m-<span class="number">1</span>,i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]+[(i,n-<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">list</span>,search(pacificSet)&amp;search(altanticSet)))</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">Python map函数详解</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>一些改善记忆力的小tips</title>
    <link href="http://example.com/2022/08/18/%E3%80%90%E6%9D%82%E8%B0%88%E3%80%91%E4%B8%80%E4%BA%9B%E6%94%B9%E5%96%84%E8%AE%B0%E5%BF%86%E5%8A%9B%E7%9A%84%E5%B0%8Ftips/"/>
    <id>http://example.com/2022/08/18/%E3%80%90%E6%9D%82%E8%B0%88%E3%80%91%E4%B8%80%E4%BA%9B%E6%94%B9%E5%96%84%E8%AE%B0%E5%BF%86%E5%8A%9B%E7%9A%84%E5%B0%8Ftips/</id>
    <published>2022-08-18T15:34:26.575Z</published>
    <updated>2022-08-18T15:43:02.844Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>从保障神经系统的健康的角度出发</strong></p></blockquote><h2 id="饮食">饮食</h2><p><a href="https://www.zhihu.com/search?q=%E9%A5%B1%E5%92%8C%E8%84%82%E8%82%AA&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A81809350%7D">饱和脂肪</a>不利于脑子的保养!类似的食物有：</p><ul><li>奶油</li><li>肥猪肉</li><li>动物皮</li><li>火腿</li><li>培根</li><li>油炸食品</li><li>高点</li><li>西点</li></ul><p>好吃的食物可能都会让你变笨！！！</p><p>而不饱和脂肪酸的食物有：</p><ul><li>坚果</li><li>鱼</li><li>植物种子</li><li>蔬菜</li><li>水果<ul><li>🍊</li><li>🍎</li></ul></li></ul><p>吃夜宵会影响记忆力。养成深夜吃零食的习惯可能会导致大脑学习和记忆能力的缺失</p><hr><blockquote><p><strong>从让神经元之间联系的活性突触数量增加的角度出发</strong></p></blockquote><h2 id="睡眠">睡眠</h2><p>当我们进入深度睡眠时，大脑神经元会长出新的突触，并加强神经元之间的联系，从而巩固和加强记忆</p><p>午休以10-15min为好，不要超过90min</p><p>不管你什么时候开始睡觉，一定要在每天的同一时间起床。这样才能在一定程度上保证生物钟正常运作。</p><h2 id="运动">运动</h2><p>有氧运动！！！</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">仅仅是小tips！</summary>
    
    
    
    <category term="琐碎日常" scheme="http://example.com/categories/%E7%90%90%E7%A2%8E%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>人生的一些小建议~</title>
    <link href="http://example.com/2022/08/15/%E3%80%90%E6%9D%82%E8%B0%88%E3%80%91%E4%BA%BA%E7%94%9F%E7%9A%84%E5%B0%8F%E5%BB%BA%E8%AE%AE/"/>
    <id>http://example.com/2022/08/15/%E3%80%90%E6%9D%82%E8%B0%88%E3%80%91%E4%BA%BA%E7%94%9F%E7%9A%84%E5%B0%8F%E5%BB%BA%E8%AE%AE/</id>
    <published>2022-08-15T15:50:48.602Z</published>
    <updated>2022-08-17T16:01:47.759Z</updated>
    
    <content type="html"><![CDATA[<p>🌈</p><p>永远不要把时间放在没必要的争论上，尤其是两个不同层次的人，完全没有争论的必要，不如花些时间提升自我。</p><p>🖲️</p><p>把每天当做最后一天来过！</p><p>😲</p><p>顺，不妄喜；逆，不惶馁；安，不奢逸；危，不惊惧；胸有惊雷而面如平湖者，可拜上将军。</p><p>😦</p><p>不要害怕交涉，不要害怕表达，把每一次表达都当做一次魂游戏来打！这次不行了，就算死掉了，下次重开一条命再来</p><p>🇶🇦</p><p>一定要提前做好规划,提前进行复盘！</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">Some tips of life.</summary>
    
    
    
    <category term="琐碎日常" scheme="http://example.com/categories/%E7%90%90%E7%A2%8E%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="碎碎念" scheme="http://example.com/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>常用英语积累</title>
    <link href="http://example.com/2022/08/15/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91%E8%AE%BA%E6%96%87%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AF%8D%E8%AF%AD/"/>
    <id>http://example.com/2022/08/15/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91%E8%AE%BA%E6%96%87%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AF%8D%E8%AF%AD/</id>
    <published>2022-08-15T11:31:59.603Z</published>
    <updated>2022-08-15T17:15:55.670Z</updated>
    
    <content type="html"><![CDATA[<p>Contrasting suitability and ambition in regional carbon mitigation.</p><p>区域碳减排适宜性和雄心的对比。</p><hr><p>spend … (in) doing</p><p>🌟 I spend time studying.</p><p>🌟 I spend a lot energy playing.</p><p>spend … on sth.</p><p>🌟 I spend time on this book.</p><hr><p>be doom to failure.</p><p>失败</p><hr><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">英语知识积累</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="英语" scheme="http://example.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
</feed>
