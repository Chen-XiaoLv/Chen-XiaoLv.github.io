<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>岁染</title>
  <icon>https://www.gravatar.com/avatar/7228219e90ece9b38ea5921da1fcc500</icon>
  <subtitle>别来无恙，你在心上</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-08-23T15:29:40.853Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Kagura</name>
    <email>651421775@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python位运算</title>
    <link href="http://example.com/2022/08/23/%E3%80%90Python%E3%80%91%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>http://example.com/2022/08/23/%E3%80%90Python%E3%80%91%E4%BD%8D%E8%BF%90%E7%AE%97/</id>
    <published>2022-08-23T14:58:37.510Z</published>
    <updated>2022-08-23T15:29:40.853Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运算符">运算符</h2><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">&amp;</td><td style="text-align:center">与，1&amp;1=1，其他情况为0</td></tr><tr><td style="text-align:center">|</td><td style="text-align:center">或，0|0=0，其他为1</td></tr><tr><td style="text-align:center">~</td><td style="text-align:center">逐位取反</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">异或，同0异1</td></tr><tr><td style="text-align:center">&lt;&lt;</td><td style="text-align:center">左移</td></tr><tr><td style="text-align:center">&gt;&gt;</td><td style="text-align:center">右移</td></tr></tbody></table><p>简单来看一下操作吧：</p><p><strong>倍乘</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">5</span>&lt;&lt;<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 10</span></span><br></pre></td></tr></table></figure><p>5: <code>101=1*4+0*2+1*</code></p><p>5&lt;&lt;1: <code>1010=1*8+0*4+1*2+0*1=2(1*4+0*2+1*1+0*1)=2(101)</code></p><p><strong>倍除</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">5</span>&gt;&gt;<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p><strong>奇数判断</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A&amp;<span class="number">1</span>==<span class="number">1</span>?</span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">coinChange</span>(<span class="params">self, coins, amount: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> amount:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 将减法转换为除法进行运算</span></span><br><span class="line">        <span class="comment"># 一旦最低位为1，则说明找到解，停止运算</span></span><br><span class="line">        dp = <span class="number">1</span> &lt;&lt; amount</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> dp:</span><br><span class="line">            tmp = <span class="number">0</span></span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 每一轮运算计算一遍dp除以2**i得到的所有可能解</span></span><br><span class="line">            <span class="keyword">for</span> coin <span class="keyword">in</span> coins:</span><br><span class="line">                <span class="comment"># tmp用于存储运算的中间结果</span></span><br><span class="line">                <span class="comment"># dp &gt;&gt; coin 实际上是进行除法运算：dp//2**coin</span></span><br><span class="line">                <span class="comment"># 使用位运算“或”来保存全部除法运算结果中的‘1’，实现批量运算</span></span><br><span class="line">                <span class="comment"># ps:这也是二进制移位的一个神奇之处，大家可以手动模拟一下这个过程</span></span><br><span class="line">                tmp |= dp &gt;&gt; coin</span><br><span class="line">            <span class="comment"># 一旦末尾出现1，则返回结果</span></span><br><span class="line">            <span class="keyword">if</span> tmp &amp; <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">            <span class="comment"># 将本轮运算的全部运算结果送入下一轮计算</span></span><br><span class="line">            dp = tmp</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">Python位运算</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>常见词</title>
    <link href="http://example.com/2022/08/23/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91%E5%B8%B8%E8%A7%81%E8%AF%8D/"/>
    <id>http://example.com/2022/08/23/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91%E5%B8%B8%E8%A7%81%E8%AF%8D/</id>
    <published>2022-08-23T01:22:06.565Z</published>
    <updated>2022-08-23T01:58:27.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="8-23">8/23</h2><p><strong>expense</strong></p><ul><li><p>n. 花销，费用，支出</p></li><li><p>at the expense of … 以…为代价，在牺牲…的情况下</p></li></ul><p><strong>efficiency</strong></p><ul><li>n. 效率，效能</li><li>increase efficiency</li></ul><p><strong>establish</strong></p><ul><li>vt. 简历，创立，证实</li><li>establish a relationship</li><li>establish oneself 使自己立足</li></ul><p><strong>expand</strong></p><ul><li>vt. 扩充，扩大</li><li>vi. 详谈，详诉</li><li>expand the business</li></ul><p><strong>exact</strong></p><ul><li>adj. 精确的，严谨的，精密的</li><li>vt. 勒索，索取</li><li>your exact words 原话</li></ul><p><strong>effect</strong></p><ul><li>n. 影响，结果，特效，效果</li><li>v. 引起，使发生</li><li>a negative effect</li><li>in effect 实际上</li><li>take effect 见效</li><li>put sth into effect 实施，实行</li></ul><p><strong>examine</strong></p><ul><li>vt. 仔细研究，仔细检查，测试</li><li>examine data 剖析数据</li><li>examine sb on sth</li></ul><p><strong>efficient</strong></p><ul><li>adj. 效率高的</li><li>an efficient method</li></ul><p><strong>effective</strong></p><ul><li>adj. 有效的，实际的</li><li>effective power</li><li>an effective method</li></ul><p>He made an effective method, which is so efficient.</p><p><strong>exist</strong></p><ul><li>vi. 存在，生存</li></ul><p><strong>estate</strong></p><ul><li>n. 庄园，遗产</li><li>n. 住宅区，工业区</li><li>inherit the estate 继承遗产</li><li>a housing estate 住宅区</li></ul><p><strong>comprehension</strong></p><ul><li>n. 理解力</li></ul><p><strong>experience</strong></p><ul><li>n. 经历</li></ul><p><strong>experienced</strong></p><ul><li>adj. 经验丰富的</li></ul><p><strong>identify</strong></p><ul><li>vt. 认出，发现，识别</li><li>vt. 显示身份</li></ul><p><strong>intestine</strong></p><ul><li>n. 肠</li><li>adj. 内部的</li></ul><p><strong>thermal</strong></p><ul><li>adj. 热的</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">None</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="英语" scheme="http://example.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 百题留念</title>
    <link href="http://example.com/2022/08/22/%E3%80%90LeetCode%E3%80%91%E7%99%BE%E9%A2%98%E7%95%99%E5%BF%B5/"/>
    <id>http://example.com/2022/08/22/%E3%80%90LeetCode%E3%80%91%E7%99%BE%E9%A2%98%E7%95%99%E5%BF%B5/</id>
    <published>2022-08-22T14:19:16.191Z</published>
    <updated>2022-08-23T03:56:06.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="后日谈♎">后日谈♎</h2><p>不知不觉已经参加在LeetCode上刷了一百题啦！！！</p><p>该成就于2022/8/22达成！</p><img src="/2022/08/22/%E3%80%90LeetCode%E3%80%91%E7%99%BE%E9%A2%98%E7%95%99%E5%BF%B5/image-20220822222053312.png" alt="image-20220822222053312" style="zoom:50%;"><img src="/2022/08/22/%E3%80%90LeetCode%E3%80%91%E7%99%BE%E9%A2%98%E7%95%99%E5%BF%B5/image-20220822222105104.png" alt="image-20220822222105104" style="zoom:50%;"><p>用时27天！平均每天3.74T!!!</p><img src="/2022/08/22/%E3%80%90LeetCode%E3%80%91%E7%99%BE%E9%A2%98%E7%95%99%E5%BF%B5/image-20220822222204107.png" alt="image-20220822222204107" style="zoom:50%;"><p>中等题继上次60题后与简单分庭抗礼后，这一次实现了反超！！想不到，你这个萌新还是实力派！</p><hr><p>目前的大部分题型已经刷过啦！</p><p>包括热门tag</p><ul><li>bfs</li><li>dfs</li><li>并查集</li><li>二分</li><li>hash</li><li>bst</li><li>无向图</li><li>数学</li><li>dp</li><li>递归</li><li>迭代</li></ul><p>但还是有一些处于知识盲区，包括但不限于：</p><ul><li>有向图</li><li>路径分析</li><li>线段树</li><li>平衡树</li><li>红黑树</li><li>B+树</li><li>优先队列</li><li>堆</li><li>状态转移</li></ul><hr><p>周赛目前也是参加了三场！</p><ul><li>84场双赛 2372/4575 48.2%</li><li>85双赛 1681/4193 60%</li><li>307场周赛 2436/7064 65.5%</li></ul><p>总体而言，还是有所进步的！！</p><hr><p>最近也学了些黑科技：</p><ul><li>倒序并查集</li><li>查分数组</li><li>回溯构造</li><li>拓扑排序</li><li>图问题</li></ul><hr><p>希望两百把的时候，能过T3吧！目前的计划是：</p><ul><li>周赛+双赛</li><li>每日一题</li><li>LeetCode75 II</li></ul><p>满足以上条件，我会对目前做过的所有题进行复盘！(一天大概10道)</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">一伯题啦！</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>数据分析实例--随机抽取微信接龙人员</title>
    <link href="http://example.com/2022/08/22/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91%E5%AE%9E%E4%BE%8B%E9%9A%8F%E6%9C%BA%E9%80%89%E5%8F%96%E5%BE%AE%E4%BF%A1%E6%8E%A5%E9%BE%99%E7%9A%84%E4%BA%BA%E6%95%B0/"/>
    <id>http://example.com/2022/08/22/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91%E5%AE%9E%E4%BE%8B%E9%9A%8F%E6%9C%BA%E9%80%89%E5%8F%96%E5%BE%AE%E4%BF%A1%E6%8E%A5%E9%BE%99%E7%9A%84%E4%BA%BA%E6%95%B0/</id>
    <published>2022-08-22T13:16:59.719Z</published>
    <updated>2022-08-22T13:19:20.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="案例-v2">案例</h2><p>数据分析，要求从微信接龙中随机抽取<code>35</code>名选手参加毕业典礼。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">s:<span class="built_in">str</span>,k:<span class="built_in">int</span>=<span class="number">35</span></span>)-&gt;<span class="literal">None</span>:</span><br><span class="line"></span><br><span class="line">    hashmap=defaultdict(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(s) <span class="keyword">as</span> f:</span><br><span class="line">        nameList=f.readlines()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nameList:</span><br><span class="line">        hashmap[val[<span class="number">0</span>]]=(val:=i.split(<span class="string">&quot;.&quot;</span>))[<span class="number">1</span>].strip(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> random.sample(<span class="built_in">range</span>(<span class="number">1</span>,(l:=<span class="built_in">len</span>(hashmap))+<span class="number">1</span>),l-k <span class="keyword">if</span> l&gt;k <span class="keyword">else</span> <span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(hashmap[<span class="built_in">str</span>(i)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">solve(<span class="string">r&quot;C:\Users\lenovo\Desktop\新建 XLS 工作表.txt&quot;</span>)</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">None</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="数据分析" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Collections.deque()详解</title>
    <link href="http://example.com/2022/08/22/%E3%80%90Python%E3%80%91deque()%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2022/08/22/%E3%80%90Python%E3%80%91deque()%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-08-22T07:27:39.475Z</published>
    <updated>2022-08-22T15:07:01.672Z</updated>
    
    <content type="html"><![CDATA[<h1>deque()</h1><p>deque是栈和队列的一种广义实现，deque是&quot;double-end queue&quot;的简称；deque支持线程安全、有效内存地以近似<code>O(1)</code>的性能在deque的两端插入和删除元素，尽管list也支持相似的操作，但是它主要在固定长度操作上的优化，从而在<code>pop(0)</code>和<code>insert(0,v)</code>（会改变数据的位置和大小）上有<code>O(n</code>)的时间复杂度。</p><p><strong>常用方法：</strong></p><h2 id="append">append()</h2><p>从右端添加元素（<code>与list同</code>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">st = <span class="string">&quot;abcd&quot;</span></span><br><span class="line">list1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">dst = deque(st)</span><br><span class="line">dlist1 = deque(list1)</span><br><span class="line">dst.append(<span class="number">4</span>)</span><br><span class="line">dlist1.append(<span class="string">&quot;k&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(dst)</span><br><span class="line"><span class="built_in">print</span>(dlist1)</span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line"><span class="comment">#deque([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, 4])</span></span><br><span class="line"><span class="comment">#deque([0, 1, 2, 3, &#x27;k&#x27;])</span></span><br></pre></td></tr></table></figure><h2 id="appendleft">appendleft()</h2><p>从左端添加元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">st = <span class="string">&quot;abcd&quot;</span></span><br><span class="line">list1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">dst = deque(st)</span><br><span class="line">dlist1 = deque(list1)</span><br><span class="line">dst.appendleft(<span class="number">4</span>)</span><br><span class="line">dlist1.appendleft(<span class="string">&quot;k&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(dst)</span><br><span class="line"><span class="built_in">print</span>(dlist1)</span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line"><span class="comment">#deque([4, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;])</span></span><br><span class="line"><span class="comment">#deque([&#x27;k&#x27;, 0, 1, 2, 3])</span></span><br></pre></td></tr></table></figure><h2 id="extend">extend()</h2><p>从右端逐个添加可迭代对象（<code>与list同</code>）<br>Python中的可迭代对象有：列表、元组、字典、字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">ex = (<span class="number">1</span>, <span class="string">&quot;h&quot;</span>, <span class="number">3</span>)</span><br><span class="line">st = <span class="string">&quot;abcd&quot;</span></span><br><span class="line">list1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">dst = deque(st)</span><br><span class="line">dlist1 = deque(list1)</span><br><span class="line">dst.extend(ex)</span><br><span class="line">dlist1.extend(ex)</span><br><span class="line"><span class="built_in">print</span>(dst)</span><br><span class="line"><span class="built_in">print</span>(dlist1)</span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line"><span class="comment">#deque([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, 1, &#x27;h&#x27;, 3])</span></span><br><span class="line"><span class="comment">#deque([0, 1, 2, 3, 1, &#x27;h&#x27;, 3])</span></span><br></pre></td></tr></table></figure><h2 id="extendleft">extendleft()</h2><p>从左端逐个添加可迭代对象</p><h2 id="pop">pop()</h2><p>移除列表中的一个元素（默认最右端的一个元素），并且返回该元素的值（<code>与list同</code>），如果没有元素，将会报出IndexError</p><h2 id="popleft">popleft()</h2><p>移除列表中的一个元素（默认最左端的一个元素），并且返回该元素的值，如果没有元素，将会报出IndexError</p><h2 id="count">count()</h2><p>统计队列中的元素个数（<code>与list同</code>）</p><h2 id="insert-index-obj">insert(index,obj)</h2><p>在指定位置插入元素（<code>与list同</code>）</p><h2 id="rotate-n">rotate(n)</h2><p>rotate(n)， 从右侧反转n步，如果n为负数，则从左侧反转。<br>d.rotate(1) 等于 d.appendleft(d.pop())</p><h2 id="clear">clear()</h2><p>将deque中的元素全部删除，最后长度为0</p><h2 id="remove">remove()</h2><p>移除第一次出现的元素，如果没有找到，报出ValueError</p><h2 id="maxlen">maxlen</h2><p>只读的属性，deque限定的最大长度，如果无，就返回None。<br>当限制长度的deque增加超过限制数的项时, 另一边的项会<code>自动删除</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">st = <span class="string">&quot;abbcd&quot;</span></span><br><span class="line">dq = deque（）</span><br><span class="line">dq.append(st)</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">Collections.deque()详解</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python map函数(类)详解</title>
    <link href="http://example.com/2022/08/20/%E3%80%90Python%E3%80%91map%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2022/08/20/%E3%80%90Python%E3%80%91map%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-08-20T13:33:21.859Z</published>
    <updated>2022-08-21T01:43:50.879Z</updated>
    
    <content type="html"><![CDATA[<h2 id="理论">理论</h2><p><code>map()</code>函数是<code>Python</code>的内置函数，会根据提供的函数参数，对传入的序列数据进行映射。</p><p>所以，<code>map()</code>函数也称<code>映射函数</code>。</p><p>在<code>Python</code>中，<code>map</code>是一个类，有着迭代方法，能够返回对应值。平时也能充当着函数使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x[<span class="number">0</span>],[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])))</span><br><span class="line"></span><br><span class="line"><span class="comment"># [1, 3]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data=[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">A=<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x[<span class="number">0</span>],data)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    <span class="built_in">print</span>(A.__next__())</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h3 id="格式">格式</h3><p>最常见的格式为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>(function,iterables,...)-&gt;<span class="built_in">map</span></span><br></pre></td></tr></table></figure><p><strong>Input</strong></p><ul><li>function: 映射函数</li><li>iterables: 可迭代序列</li></ul><p><strong>Output</strong></p><ul><li>一个可迭代对象</li></ul><hr><h2 id="实践">实践</h2><p>我们来进行一个简单的尝试！</p><p><strong>实例一</strong></p><p>设计一个函数，将两个数组<code>A</code>和<code>B</code>中的元素加起来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Add</span>(<span class="params">x,y</span>):</span><br><span class="line">    n,m=<span class="built_in">len</span>(x),<span class="built_in">len</span>(y)</span><br><span class="line">    <span class="keyword">if</span> n&gt;m:</span><br><span class="line">        n,m=m,n</span><br><span class="line">        x,y=y,x</span><br><span class="line">    new=[i <span class="keyword">for</span> i <span class="keyword">in</span> y]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        new[i]+=x[i]</span><br><span class="line">    <span class="keyword">return</span> new</span><br><span class="line"></span><br><span class="line">A=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">B=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(Add(A,B))</span><br><span class="line"></span><br><span class="line"><span class="comment"># [2, 4, 6, 8, 10, 12, 7, 8]</span></span><br></pre></td></tr></table></figure><p>那如果对格式输入不那么严格，又想比较简便地实现操作，我们可以通过<code>map</code>+<code>lambda</code>表达式的方式，对输入的元素进行一一映射。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x,y:x+y,A,B)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># [2, 4, 6, 8, 10, 12]</span></span><br></pre></td></tr></table></figure><p>此时，第一个参数是一个映射(函数),第二，第三个参数则是输入的可迭代对象。<code>map</code>会自动的<code>依次取出</code>可迭代对象中的每个元素，通过映射输出。我们可以通过<code>map.__next__()</code>控制获取每一个元素，或是直接将返回的迭代对象转化为<code>list</code>获取全部元素。</p><p><code>map</code>能够确保数据的最小截断，也就是满足两个或多个可迭代对象进行的最小长度。比如上文提到的，<code>A</code>数组的长度是高于<code>B</code>数组的，但由于<code>map</code>对象的特性，返回值只保留到<code>B</code>的长度。</p><hr><p>是不是学会了！那我们再来看一题。</p><p>将一个元组对象转化为一个列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A=((<span class="number">7</span>),(<span class="number">7</span>),(<span class="number">7</span>),(<span class="number">7</span>),(<span class="number">7</span>),(<span class="number">7</span>),(<span class="number">7</span>),(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>([[i] <span class="keyword">for</span> i <span class="keyword">in</span> A])</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">list</span>,A)))</span><br></pre></td></tr></table></figure><hr><p><strong>实例二</strong></p><blockquote><p>出自LC417太平洋大西洋水流问题</p></blockquote><p>有一个 m × n 的矩形岛屿，与 太平洋 和 大西洋 相邻。 “太平洋” 处于大陆的左边界和上边界，而 “大西洋” 处于大陆的右边界和下边界。</p><p>这个岛被分割成一个由若干方形单元格组成的网格。给定一个 m x n 的整数矩阵 heights ， heights<code>[r][c]</code>表示坐标 (r, c) 上单元格 高于海平面的高度 。</p><p>岛上雨水较多，如果相邻单元格的高度 小于或等于 当前单元格的高度，雨水可以直接向北、南、东、西流向相邻单元格。水可以从海洋附近的任何单元格流入海洋。</p><p>返回网格坐标 result 的 2D 列表 ，其中 result[i] = [ri, ci] 表示雨水从单元格 (ri, ci) 流动 既可流向太平洋也可流向大西洋 。</p><img src="https://assets.leetcode.com/uploads/2021/06/08/waterflow-grid.jpg" style="zoom:50%;"><blockquote><p>输入: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]<br>输出: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pacificAtlantic</span>(<span class="params">self, heights: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        m,n=<span class="built_in">len</span>(heights),<span class="built_in">len</span>(heights[<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">start</span>):</span><br><span class="line">            visitSet=<span class="built_in">set</span>()</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x,y</span>):</span><br><span class="line">                <span class="keyword">if</span> (x,y) <span class="keyword">in</span> visitSet:</span><br><span class="line">                    <span class="keyword">return</span> </span><br><span class="line">                val=heights[x][y]</span><br><span class="line">                visitSet.add((x,y))</span><br><span class="line">                <span class="keyword">for</span> i,j <span class="keyword">in</span> [[x+<span class="number">1</span>,y],[x-<span class="number">1</span>,y],[x,y-<span class="number">1</span>],[x,y+<span class="number">1</span>]]:</span><br><span class="line">                    <span class="keyword">if</span> <span class="number">0</span>&lt;=i&lt;m <span class="keyword">and</span> <span class="number">0</span>&lt;=j&lt;n <span class="keyword">and</span> heights[i][j]&gt;=val:</span><br><span class="line">                        dfs(i,j)</span><br><span class="line">                        </span><br><span class="line">            <span class="keyword">for</span> i,j <span class="keyword">in</span> start:</span><br><span class="line">                dfs(i,j)</span><br><span class="line">            <span class="keyword">return</span> visitSet </span><br><span class="line">        </span><br><span class="line">        pacificSet=[(<span class="number">0</span>,i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]+[(i,<span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">        altanticSet=[(m-<span class="number">1</span>,i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]+[(i,n-<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">list</span>,search(pacificSet)&amp;search(altanticSet)))</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">Python map函数详解</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>一些改善记忆力的小tips</title>
    <link href="http://example.com/2022/08/18/%E3%80%90%E6%9D%82%E8%B0%88%E3%80%91%E4%B8%80%E4%BA%9B%E6%94%B9%E5%96%84%E8%AE%B0%E5%BF%86%E5%8A%9B%E7%9A%84%E5%B0%8Ftips/"/>
    <id>http://example.com/2022/08/18/%E3%80%90%E6%9D%82%E8%B0%88%E3%80%91%E4%B8%80%E4%BA%9B%E6%94%B9%E5%96%84%E8%AE%B0%E5%BF%86%E5%8A%9B%E7%9A%84%E5%B0%8Ftips/</id>
    <published>2022-08-18T15:34:26.575Z</published>
    <updated>2022-08-18T15:43:02.844Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>从保障神经系统的健康的角度出发</strong></p></blockquote><h2 id="饮食">饮食</h2><p><a href="https://www.zhihu.com/search?q=%E9%A5%B1%E5%92%8C%E8%84%82%E8%82%AA&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A81809350%7D">饱和脂肪</a>不利于脑子的保养!类似的食物有：</p><ul><li>奶油</li><li>肥猪肉</li><li>动物皮</li><li>火腿</li><li>培根</li><li>油炸食品</li><li>高点</li><li>西点</li></ul><p>好吃的食物可能都会让你变笨！！！</p><p>而不饱和脂肪酸的食物有：</p><ul><li>坚果</li><li>鱼</li><li>植物种子</li><li>蔬菜</li><li>水果<ul><li>🍊</li><li>🍎</li></ul></li></ul><p>吃夜宵会影响记忆力。养成深夜吃零食的习惯可能会导致大脑学习和记忆能力的缺失</p><hr><blockquote><p><strong>从让神经元之间联系的活性突触数量增加的角度出发</strong></p></blockquote><h2 id="睡眠">睡眠</h2><p>当我们进入深度睡眠时，大脑神经元会长出新的突触，并加强神经元之间的联系，从而巩固和加强记忆</p><p>午休以10-15min为好，不要超过90min</p><p>不管你什么时候开始睡觉，一定要在每天的同一时间起床。这样才能在一定程度上保证生物钟正常运作。</p><h2 id="运动">运动</h2><p>有氧运动！！！</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">仅仅是小tips！</summary>
    
    
    
    <category term="琐碎日常" scheme="http://example.com/categories/%E7%90%90%E7%A2%8E%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>人生的一些小建议~</title>
    <link href="http://example.com/2022/08/15/%E3%80%90%E6%9D%82%E8%B0%88%E3%80%91%E4%BA%BA%E7%94%9F%E7%9A%84%E5%B0%8F%E5%BB%BA%E8%AE%AE/"/>
    <id>http://example.com/2022/08/15/%E3%80%90%E6%9D%82%E8%B0%88%E3%80%91%E4%BA%BA%E7%94%9F%E7%9A%84%E5%B0%8F%E5%BB%BA%E8%AE%AE/</id>
    <published>2022-08-15T15:50:48.602Z</published>
    <updated>2022-08-17T16:01:47.759Z</updated>
    
    <content type="html"><![CDATA[<p>🌈</p><p>永远不要把时间放在没必要的争论上，尤其是两个不同层次的人，完全没有争论的必要，不如花些时间提升自我。</p><p>🖲️</p><p>把每天当做最后一天来过！</p><p>😲</p><p>顺，不妄喜；逆，不惶馁；安，不奢逸；危，不惊惧；胸有惊雷而面如平湖者，可拜上将军。</p><p>😦</p><p>不要害怕交涉，不要害怕表达，把每一次表达都当做一次魂游戏来打！这次不行了，就算死掉了，下次重开一条命再来</p><p>🇶🇦</p><p>一定要提前做好规划,提前进行复盘！</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">Some tips of life.</summary>
    
    
    
    <category term="琐碎日常" scheme="http://example.com/categories/%E7%90%90%E7%A2%8E%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="碎碎念" scheme="http://example.com/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>常用英语积累</title>
    <link href="http://example.com/2022/08/15/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91%E8%AE%BA%E6%96%87%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AF%8D%E8%AF%AD/"/>
    <id>http://example.com/2022/08/15/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91%E8%AE%BA%E6%96%87%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AF%8D%E8%AF%AD/</id>
    <published>2022-08-15T11:31:59.603Z</published>
    <updated>2022-08-15T17:15:55.670Z</updated>
    
    <content type="html"><![CDATA[<p>Contrasting suitability and ambition in regional carbon mitigation.</p><p>区域碳减排适宜性和雄心的对比。</p><hr><p>spend … (in) doing</p><p>🌟 I spend time studying.</p><p>🌟 I spend a lot energy playing.</p><p>spend … on sth.</p><p>🌟 I spend time on this book.</p><hr><p>be doom to failure.</p><p>失败</p><hr><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">英语知识积累</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="英语" scheme="http://example.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>Unit6 情态动词与虚拟语气</title>
    <link href="http://example.com/2022/08/15/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91Unit6%20%E6%83%85%E6%80%81%E5%8A%A8%E8%AF%8D%E5%92%8C%E8%99%9A%E6%8B%9F%E8%AF%AD%E6%B0%94/"/>
    <id>http://example.com/2022/08/15/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91Unit6%20%E6%83%85%E6%80%81%E5%8A%A8%E8%AF%8D%E5%92%8C%E8%99%9A%E6%8B%9F%E8%AF%AD%E6%B0%94/</id>
    <published>2022-08-15T10:54:25.232Z</published>
    <updated>2022-08-15T17:05:51.495Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章-情态动词">第一章  情态动词</h2><p>📖 情态动词就是表示情绪和态度的动词，虽然也叫做动词啦，但必须作为<code>实义动词</code>的小跟班而存在。</p><p>🍓 情态动词没有人称的变化，不需要考虑三单</p><p>📏 结构: 情态动词+动词原形</p><h3 id="常见的情态动词">常见的情态动词</h3><table><thead><tr><th style="text-align:center">Can</th><th style="text-align:center">Could</th></tr></thead><tbody><tr><td style="text-align:center">may</td><td style="text-align:center">might</td></tr><tr><td style="text-align:center">should</td><td style="text-align:center">would</td></tr><tr><td style="text-align:center">ought to</td><td style="text-align:center">must</td></tr><tr><td style="text-align:center">have to</td><td style="text-align:center">need</td></tr><tr><td style="text-align:center">dare</td><td style="text-align:center"></td></tr></tbody></table><hr><h4 id="🍎-Can-Could">🍎 <strong>Can Could</strong></h4><p>1️⃣ 表能力</p><p>🌟 I believe I can fly.</p><p>🌟 She could skate before she broke her leg.</p><hr><p>2️⃣ 表请求、允许</p><p>🌟 Can you give me 10 bucks?</p><p>表示请求时，<code>could</code>比<code>can</code>更加礼貌和委婉</p><hr><p>3️⃣ 表猜测</p><p>🌟 Can it be true?</p><p>🌟 It can’t be true.</p><p>啊值得注意的是，can’t表示不太可能，而不是不可能</p><hr><p>4️⃣ 虚拟语气</p><p>在虚拟语气中，我们用<code>could</code>而不用<code>can</code> !</p><p><code>could have done</code>表示和过去的事情相反，也就是<code>本可以做到，却没做</code>，有惋惜、遗憾之情</p><p>🌟 You could have told her the truth.</p><p>🌟 You couldn’t have told her the truth.</p><hr><p>5️⃣ <strong>Can</strong>与<strong>be able to</strong></p><p><code>be able to</code>适用于各个时态，而且<code>在一定的条件(金钱、资源、机会下)做成某事</code>，用的是<code>be able to</code></p><p>🌟 He didn’t agree with me at first but I was able to persuade him.</p><hr><h4 id="🍎-may-might">🍎 <strong>may</strong> <strong>might</strong></h4><p>1️⃣ 表请求、允许</p><p>🌟 You may not take my stuffed animal.</p><p>⭐ May I take the book?</p><p>🌟 Yes, you may. / Yes, you can. / No, you can’t. / I’m afraid not. / You’d better not.</p><p>在委婉程度上，<code>might</code>会更高一些</p><hr><p>2️⃣ 表示猜测可能性</p><p>🌟 He may be at home. ( 50 percent )</p><p>🌟 He might be at home. ( 30 percent )</p><p>包括对过去的推测：</p><p>🌟 He <code>might have given</code> you more help, even though he was very busy.</p><hr><p>3️⃣ 虚拟语气</p><p>用<code>might</code>不用<code>may</code></p><p><strong>might have done</strong> 表示 <strong>本可以做，却没有做</strong> 有责怪的意思。</p><p>🌟 She <strong>might have had</strong> her hair cut by an experienced hairdresser.</p><hr><h4 id="🍎-should-ought-to"><strong>🍎 should  ought to</strong></h4><p>1️⃣ 表义务，应该</p><p><code>should</code> 常用于一般情况；<code>ought to</code> 则更多用于特殊情况。</p><p>🌟 We should respect the old.</p><p>🌟 We ought to take good care of the old man. He has no family.</p><hr><p>2️⃣ 表推测</p><p>强度排序！</p><p>🏷️ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>u</mi><mi>s</mi><mi>t</mi><mo>&gt;</mo><mi>o</mi><mi>u</mi><mi>g</mi><mi>h</mi><mi>t</mi><mtext> </mtext><mi>t</mi><mi>o</mi><mo>&gt;</mo><mi>s</mi><mi>h</mi><mi>o</mi><mi>u</mi><mi>l</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">must&gt;ought\ to&gt;should</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6542em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">u</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">ug</span><span class="mord mathnormal">h</span><span class="mord mathnormal">t</span><span class="mspace"> </span><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">h</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span></span></span></span></p><hr><p>3️⃣ 虚拟语气</p><p>本不该做某事，却做了。</p><p>⭐ <strong>shouldn’t have done</strong></p><p>⭐ <strong>oughtn’t to have done</strong></p><p>🌟 Australia <strong>shouldn’t have bamboozled</strong> British into traveling there when the whole country has been “on fire” for months.</p><p>🖊️ 澳大利亚本不应该忽悠英国人去那儿旅游；整个澳洲“火烧”了几个月。</p><p>⭐ <strong>should have done</strong></p><p>⭐ <strong>ought to have done</strong></p><p>🌟 Australia should have spent the advertising expenses in controlling the wildfires.</p><p>🖊️ 澳大利亚本应该把广告费用在控制山火上。</p><hr><h4 id="🍎-must">🍎 <strong>must</strong></h4><p>1️⃣ 表示必须</p><p>🔈 Must I cheer up?</p><p>✏️ Yes, you must.</p><p>✏️ No, you needn’t. / No, you don’t have to.</p><hr><p>2️⃣ 表推测</p><p>🌟 The Gods must be crazy.</p><p>🔈 <strong>must have done</strong> 表示过去肯定做过</p><p>🌟 I must have done something good.</p><hr><h4 id="🍎-need">🍎 <strong>need</strong></h4><p>1️⃣ 情态动词</p><p>必须，需要。</p><p>🌟 If you want anything, you need only ask.</p><hr><p>2️⃣ 实义动词</p><p>此时一般跟<code>to</code>连在一起！<code>need to do sth.</code>表示有义务或责任做某事。</p><p>🌟 You need to eat more.</p><p>🌟 I need to take my dog out for a walk every day.</p><hr><p>3️⃣ 虚拟语气</p><p>needn’t have done 本不必要做，却做了</p><p>🌟 You needn’t have said that.</p><hr><h4 id="🍎-dare">🍎 <strong>dare</strong></h4><p>1️⃣ 情态动词</p><p>多用于否定句、疑问句。意思是：<code>敢吗</code></p><p>🌟 I dare not  move!</p><p>🌟 Dare you answer me when I call your name?</p><p>🌟 I wonder whether he dare tell the truth.</p><hr><p>2️⃣ 实义动词</p><p>此时，需要考虑人称与时态，跟<code>need</code>一样，常常跟<code>to</code>连用。</p><p>🌟 She <strong>dares to</strong> use the F-word in front of the kids!</p><p>在否定句和疑问句中，可以不带<code>to</code></p><p>🌟 He <strong>didn’t dare (to)</strong> tell her his feelings.</p><hr><h2 id="第二章-虚拟语气">第二章  虚拟语气</h2><p>🏷️ 跟事实相反的语法现象，就叫做虚拟语气。</p><h3 id="一、if引导的虚拟语气">一、if引导的虚拟语气</h3><table><thead><tr><th style="text-align:center">If从句</th><th style="text-align:center">主句</th></tr></thead><tbody><tr><td style="text-align:center">一般过去时 did</td><td style="text-align:center">would / should do</td></tr></tbody></table><p>🌟 If I had 1 million dollars, I would build a school.</p><p>🌟 If I were you, I should ask him out.</p><p>✏️ 如果我是你，我就约他出去了</p><p>🌟 If I were 17, I would not make my school life miserable.</p><p>🐽 值得注意的是，<code>should</code>在这里并没有情态动词中<code>应该</code>的意思，而是<code>shall</code>的过去时。一般用于第一人称做主语。</p><p>🐷 如果<code>if</code>从句带有<code>be</code>动词，不需要考虑人称和单复数啦，直接<code>were</code>!</p><blockquote><p>我们可以发现，虚拟语气在表达与现在的事实相反时，用的全是过去时。可以理解为两个平行时空的交错点在现在之前~</p></blockquote><hr><h4 id="🍎-与过去事实相反">🍎 与过去事实相反</h4><table><thead><tr><th style="text-align:center">If 从句</th><th style="text-align:center">主句</th></tr></thead><tbody><tr><td style="text-align:center">过去完成时 had done</td><td style="text-align:center">would / should have done</td></tr></tbody></table><p>🌟 If his father hadn’t interfered, we would have been married.</p><p>🌟 If Dad had kept a healthy lifestyle, he would not have had a heart disease.</p><blockquote><p>诶嘿，这个时间点还在过去之前，所以要用过去完成时~</p></blockquote><hr><h4 id="🍎-与将来事实相反">🍎 与将来事实相反</h4><table><thead><tr><th style="text-align:center">If 从句</th><th style="text-align:center">主句</th></tr></thead><tbody><tr><td style="text-align:center">一般过去时 did</td><td style="text-align:center">would / should do</td></tr><tr><td style="text-align:center">were to do</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">should do</td><td style="text-align:center"></td></tr></tbody></table><p>🌟 If you <strong>were to see</strong> someone in the office, you career would be ruined.</p><p>🌟 If it <strong>should rain</strong> tomorrow, my road test would be doomed to failure.</p><p>🌟 If my neighbor <strong>walked</strong> his dog this evening, I should ask him to mop my porch.</p><p>如何理解将来相反呢？你说它还没发生呀，咋相反捏？别急，这是带有较强的<strong>主观判断</strong>的✔️ ！</p><p>也就是说，用上了带有将来虚拟语气的<code>if从句</code>，那么主句的事情很可能不会发生！而如果觉得主句很有可能发生，那么就用普通的<code>if</code>引导的条件状语从句好啦！区别在于主将从现！</p><p>🔈 If I were to get up early, I would spend my time studying.</p><p>✏️ If I get up early, I will spend my time on English.</p><blockquote><p>注意将来的时间点还是在过去哦(强行解释ing)</p></blockquote><h3 id="二、if从句倒装">二、if从句倒装</h3><p>有个十分抽象的栗子：</p><img src="/2022/08/15/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91Unit6%20%E6%83%85%E6%80%81%E5%8A%A8%E8%AF%8D%E5%92%8C%E8%99%9A%E6%8B%9F%E8%AF%AD%E6%B0%94/image-20220816005222979.png" alt="image-20220816005222979" style="zoom:50%;"><p>把三种情况提前，也就是把<code>我梳头</code>提前</p><hr><h4 id="🌏-现在相反">🌏 现在相反</h4><p>🔈 If  I were you, I should ask him out.</p><p>➡️ Were I you, I should ask him out.</p><p><strong>结构</strong></p><ul><li>去掉<code>if</code></li><li><code>were</code>提前</li><li>其他照搬</li></ul><hr><h4 id="🌍-过去相反">🌍 过去相反</h4><p>🔈 If they hadn’t argued, the woman wouldn’t have died.</p><p>➡️ Had they not argued, the woman wouldn’t have died.</p><p><strong>结构</strong></p><ul><li>去掉<code>if</code></li><li><code>had</code>提前</li><li>其他照搬， <code>not</code>不缩写</li></ul><hr><h4 id="🌎-将来相反">🌎 将来相反</h4><p>🔈 If it should rain tomorrow, my road test would be doomed to failure.<br>➡️ Should it rain tomorrow, my road test would be doomed to failure.</p><p><strong>结构</strong></p><ul><li>去掉<code>if</code></li><li><code>should</code>提前</li><li>其他照搬， <code>not</code>不缩写</li></ul><blockquote><p>呐呐呐，啥时候要倒装呀！</p><p>当然是把<code>if</code>省略的情况啦！</p></blockquote><p>倒装是将信息重点后移，一般强调主语。</p><hr><h3 id="三、虚拟语气动词">三、虚拟语气动词</h3><p>要是遇上以下这几个大佬做谓语，后面的宾语从句必须小心翼翼地用上虚拟语气！</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">动词</th></tr></thead><tbody><tr><td style="text-align:center">表建议</td><td style="text-align:center">advise, suggest, propose, recommend</td></tr><tr><td style="text-align:center">表要求/请求</td><td style="text-align:center">insist, demand, request, urge</td></tr><tr><td style="text-align:center">表愿望</td><td style="text-align:center">wish, desire, prefer</td></tr><tr><td style="text-align:center">表命令</td><td style="text-align:center">order, command, direct</td></tr><tr><td style="text-align:center">表决定</td><td style="text-align:center">decide, determine, resolve</td></tr></tbody></table><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一章-情态动词&quot;&gt;第一章  情态动词&lt;/h2&gt;
&lt;p&gt;📖 情态动词就是表示情绪和态度的动词，虽然也叫做动词啦，但必须作为&lt;code&gt;实义动词&lt;/code&gt;的小跟班而存在。&lt;/p&gt;
&lt;p&gt;🍓 情态动词没有人称的变化，不需要考虑三单&lt;/p&gt;
&lt;p&gt;📏 结构: </summary>
      
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="英语" scheme="http://example.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>Java入门</title>
    <link href="http://example.com/2022/08/15/%E3%80%90Java%E3%80%91Java%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2022/08/15/%E3%80%90Java%E3%80%91Java%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-08-14T17:31:41.086Z</published>
    <updated>2022-08-14T17:43:42.637Z</updated>
    
    <content type="html"><![CDATA[<h1>第一章  Java简介</h1><hr><h2 id="一、概述">一、概述</h2><h3 id="1-1-Java简介">1.1 Java简介</h3><p>Java语言是美国<strong>Sun(Stanford University Netword)<strong>在</strong>1995</strong>推出的计算机语言。</p><p>Java之父：詹姆斯·高斯林（James Gosling)。</p><img src="/2022/08/15/%E3%80%90Java%E3%80%91Java%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/image-20220524231710965.png" alt="image-20220524231710965" style="zoom:50%;"><p>2009年Oracle收购Sun公司，Java隶属于甲骨文公司。</p><h3 id="二、Java语言跨平台原理">二、Java语言跨平台原理</h3><p>此处的平台指的是<strong>操作系统</strong>，Java程序能够在任意操作系统上执行。</p><p>Java通过**JVM(Java Virtual Machine)**实现跨平台间的操作。JVM是一种抽象化的计算机，通过在实际的计算机上仿真模拟各类计算机功能来实现。</p><img src="/2022/08/15/%E3%80%90Java%E3%80%91Java%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/image-20220524232447360.png" alt="image-20220524232447360" style="zoom:50%;"><h3 id="三、JRE与JDK">三、JRE与JDK</h3><p>JRE(Java Runtime Environment)是Java运行时环境，包含JVM和运行时所需要的核心类库。</p><p>JDK(Java Development Kit)是Java程序开发工具包，包含JRE和开发人员使用的工具。包括编译工具(javac.exe)和运行工具(java.exe)。</p><img src="/2022/08/15/%E3%80%90Java%E3%80%91Java%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/image-20220524232926702.png" alt="image-20220524232926702" style="zoom:50%;"><h3 id="四、Java开发流程">四、Java开发流程</h3><p>开发一个Java程序，需要以下三个步骤：</p><ul><li>编写程序</li><li>编译程序</li><li>运行程序</li></ul><p>我们新建一个<strong>HelloWorld.java</strong>文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在运行前，我们需要先编译下，在CMD中输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac HelloWorld.java</span><br></pre></td></tr></table></figure><p>此时我们发现，出现了编译文件<code>HelloWorld.class</code></p><p>再执行运行任务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java HelloWorld</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">out:</span><br><span class="line">HelloWorld</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>此时可能出现以下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hellow.java:1: 错误: 类 HelloWorld 是公共的, 应在名为 HelloWorld.java 的文件中声明</span><br></pre></td></tr></table></figure><p>这是由于系统声明的class名称与文件名称不相同所导致的。</p><p>Java程序中最基本的组成单位是类，代码的执行是从main方法开始的。</p><hr><h1>第二章  基础语法</h1><hr><h2 id="一、注释">一、注释</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 多行注释 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 文档注释 **/</span></span><br></pre></td></tr></table></figure><hr><h2 id="二、关键字">二、关键字</h2><p>具有<strong>特定含义</strong>的单词。关键字全部小写。目前Java中一共有53个关键字(2个保留字)。</p><h3 id="2-1-保留关键字：">2.1 保留关键字：</h3><ul><li>const:常量</li><li>goto:转到</li></ul><h3 id="2-2-访问修饰符">2.2 访问修饰符</h3><ul><li>public:公用，可跨包</li><li>protected:受保护的，当前包内可用</li><li>private:私有的，当前类可用</li></ul><h3 id="2-3-OOP关键字">2.3 OOP关键字</h3><ul><li>class:类，类名需要与文件名相同</li><li>interface:接口，接口一般提供方法但不实现</li><li>abstract:抽象，介于类与接口中，可以有也可以没有实现的方法体</li><li>implemenst:实现，用于类或接口，实现接口</li><li>extends:继承，用于类继承类</li><li>new:新建一个类</li></ul><h3 id="2-4-包的关键字">2.4 包的关键字</h3><ul><li>import:引入包</li><li>package:定义包</li></ul><h3 id="2-5-数据类型">2.5 数据类型</h3><ul><li>byte:字节型，8bit</li><li>char:字节型，16bit</li><li>boolean:布尔型</li><li>short:短整型，16bit</li><li>int:整型，32bit</li><li>float:浮点型，32bit</li><li>long:长整型，64bit</li><li>double:双精度，64bit</li><li>void:无返回值</li><li>null:空值</li><li>true:真</li><li>false:假</li></ul><h3 id="2-6-条件循环-流程控制">2.6 条件循环(流程控制)</h3><ul><li>if</li><li>else</li><li>while</li><li>for</li><li>switch</li><li>case</li><li>do</li><li>break</li><li>continue</li><li>return</li><li>instanceof:实例检测,判断左边对象是否是右边的实例</li></ul><h3 id="2-7-修饰方法">2.7 修饰方法</h3><ul><li>static:静态</li><li>super:调用父类的方法</li><li>this:当前类父类的对象</li><li>native:本地</li><li>strictfp:严格</li><li>synchronized:线程，同步</li><li>transient:短暂</li><li>volatile:易失</li></ul><h3 id="2-8-错误处理">2.8 错误处理</h3><ul><li>catch</li><li>try</li><li>finally</li><li>throw</li></ul><h3 id="2-9-其他">2.9 其他</h3><ul><li>enum:枚举</li><li>assert:断言</li></ul><hr><h2 id="三、常量">三、常量</h2><p>在程序中保持不变的量，称为常量。</p><p>在Java中，常量可分为六类：</p><ul><li>字符串常量</li><li>整数常量</li><li>小数常量</li><li>字符常量</li><li>布尔常量</li><li>空常量</li></ul><hr><h2 id="四、变量">四、变量</h2><p>与常量相对，能够在程序中发生改变的量，称为变量。</p><blockquote><p>Java提供的显示的访问权限修饰符有3种,分别是:私有(private)、保护(protected)和公 共(public)。除此之外,还有一种默认的访问权限:friendly,它并不是Java的关键字,只有当变量前面没有写明任何访问权限修饰符时,就 默认以friendly作为访问权限。</p></blockquote><h3 id="4-1-变量定义">4.1 变量定义</h3><p>格式：<code>数据类型 变量名=变量值；</code></p><p>面对<code>long</code>变量数据越界，可以在数据后添加一个<code>L</code>。</p><p>而Java默认小数类型为<code>double</code>，使用<code>float</code>关键字时，为防止不兼容，需要添加<code>F</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> l=<span class="number">100000000L</span>;</span><br><span class="line"><span class="type">float</span> f=<span class="number">13.14F</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="五、数据类型">五、数据类型</h2><h3 id="5-1-计算机存储单元">5.1 计算机存储单元</h3><p>计算机存储设备的最小信息单元叫&quot;位(bit)“，我们又称之为“比特位”，通常用小写的字母“b”表示，而计算机中最小的存储单元叫“字节(byte)”，通常用大写字母&quot;B&quot;表示，字节是由连续的8个位组成。</p><h3 id="5-2-数据类型">5.2 数据类型</h3><p>Java是强类型语言，每一种数据都必须有明确的数据类型，不同的数据类型也分配了不同的内存空间。所以其表示的数据大小是不一致的。</p><img src="/2022/08/15/%E3%80%90Java%E3%80%91Java%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/image-20220525123222411.png" alt="image-20220525123222411" style="zoom:50%;"><hr><h2 id="六、标识符">六、标识符</h2><p>所谓标识符，就是给类、方法、变量等起名字的符号。</p><p><strong>规则</strong></p><ul><li>由数字、字母、下划线_和美元符$组成</li><li>不能以数字开头</li><li>不能是关键字</li><li>区分大小写</li></ul><p><strong>约定</strong></p><p><strong>小驼峰</strong>：方法、变量</p><ul><li>标识符是一个单词时，首字母小写</li><li>标识符由多个单词组成，第一个单词字母小写，其他首字母大写</li></ul><p><strong>大驼峰</strong>：类</p><ul><li>标识符是一个单词时，首字母大写</li><li>标识符由多个单词组成，首字母全部大写</li></ul><hr><h2 id="七、类型转换">七、类型转换</h2><h3 id="7-1-类型转换分类">7.1 类型转换分类</h3><ul><li>自动类型转换</li><li>强制类型转换</li></ul><h3 id="7-2-自动类型转换">7.2 自动类型转换</h3><p>把一个表示数据范围小的数值或变量赋值给一个表示数据范围大的变量时，可以实现自动范围转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> d=<span class="number">10</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/15/%E3%80%90Java%E3%80%91Java%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/image-20220525130806831.png" alt="image-20220525130806831"></p><h3 id="7-3-强制类型转换">7.3 强制类型转换</h3><p>将数据范围大的转换为范围小的</p><ul><li>格式：<code>目标数据类型 变量名=(目标数据类型)值或变量</code></li><li>范例：<code>int k=(int)88.88</code></li></ul><hr><h1>第三章  运算符</h1><hr><h2 id="一、算数运算符">一、算数运算符</h2><h3 id="1-1-运算符与表达式">1.1 运算符与表达式</h3><ul><li>运算符：对常量或变量进行操作的符号</li><li>表达式：用运算符把常量或变量连接起来符合java语法规范的句子</li></ul><h3 id="1-2-算数运算符">1.2 算数运算符</h3><ul><li><code>+</code></li><li><code>-</code></li><li><code>*</code></li><li><code>/</code></li><li><code>%</code></li></ul><p>除法得到的是商，取余得到的是余数。整数相除只能得到整数，要得到小数必须有浮点数的参与。</p><p>当字符型与数字类型做加法时，会将字符转为ASCII码进行运算。</p><ul><li>byte类型、short类型和char类型都将被提升到int类型</li></ul><p>字符串型做加操作时，做的是字符拼接。(只要是字符串在前，那就是字符拼接)。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;a&quot;</span>+<span class="number">1</span>+<span class="number">2</span></span><br><span class="line">--&gt;<span class="string">&quot;a12&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>+<span class="number">2</span>+<span class="string">&quot;a&quot;</span>:</span><br><span class="line">--&gt;<span class="string">&quot;3a&quot;</span></span><br></pre></td></tr></table></figure><hr><h2 id="二、赋值运算符">二、赋值运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">i+=<span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，+=操作带有一个强制类型转换</span></span><br><span class="line"><span class="type">short</span> a=<span class="number">10</span>;</span><br><span class="line">a=a+<span class="number">20</span>；<span class="comment">// 此时右边是int类型,会报错</span></span><br><span class="line">a=(<span class="type">short</span>)(a+<span class="number">20</span>); <span class="comment">// 不会报错</span></span><br><span class="line">a+=<span class="number">20</span>; <span class="comment">// 不会报错</span></span><br></pre></td></tr></table></figure><ul><li><code>+=</code></li><li><code>-=</code></li><li><code>*=</code></li><li><code>/=</code></li><li><code>%=</code></li></ul><hr><h2 id="三、自增自减运算符">三、自增自减运算符</h2><ul><li><code>++</code></li><li><code>--</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单独使用时二者相等</span></span><br><span class="line">++i;</span><br><span class="line">i++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参与操作时，先参与操作后自加：</span></span><br><span class="line"><span class="type">int</span> i=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> j=i++;</span><br><span class="line">---&gt; j: <span class="number">10</span> ; i: <span class="number">11</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// ++放前时，先进行自增:</span></span><br><span class="line"><span class="type">int</span> j=++i;</span><br><span class="line">---&gt; j: <span class="number">11</span> ; i: <span class="number">11</span></span><br></pre></td></tr></table></figure><hr><h2 id="四、关系运算符">四、关系运算符</h2><ul><li><code>==</code></li><li><code>!=</code></li><li><code>&gt;</code></li><li><code>&gt;=</code></li><li><code>&lt;</code></li><li><code>&lt;=</code></li></ul><hr><h2 id="五、逻辑运算符">五、逻辑运算符</h2><p>逻辑运算符是用来连接关系表达式的运算符。</p><ul><li><code>&amp;</code>逻辑与 有false则false</li><li><code>|</code>逻辑或 有true则true</li><li><code>^</code>逻辑异或 相同false不同true</li><li><code>!</code>逻辑非</li></ul><p><strong>短路逻辑运算符</strong></p><ul><li><code>&amp;&amp;</code>短路与</li><li><code>||</code>短路或</li></ul><p>逻辑与<code>&amp;</code>，无论左边真假，右边都要执行</p><p>短路与<code>&amp;&amp;</code>，若左边为假，则右边不执行</p><p>逻辑或<code>|</code>，无论真假，都要执行</p><p>短路或<code>||</code>，左边为真，则右边不执行</p><hr><h2 id="六、三元运算符">六、三元运算符</h2><p><strong>格式</strong>：<code>关系表达式?表达式1:表达式2;</code></p><p><strong>范例</strong>：<code>a&gt;b?a:b;</code></p><p>先计算关系表达式的值，若为<code>true</code>,表达式1的值就是运算结果；</p><p>若为<code>false</code>，表达式2的值就是运算结果。</p><p>数据输入(Scanner包):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">Scanner sc=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> i=sc.nextInt();</span><br></pre></td></tr></table></figure><hr><h1>第四章  控制语句</h1><hr><p>流程控制语句可分为三大类：</p><ul><li>顺序结构</li><li>分支结构</li><li>循环结构</li></ul><h2 id="一、顺序结构">一、顺序结构</h2><p>作为基本的流程控制结构，顺序结构从上往下依次执行语序。</p><hr><h2 id="二、分支结构">二、分支结构</h2><h3 id="2-1-if-结构">2.1 if 结构</h3><p><strong>格式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (关系表达式)&#123;</span><br><span class="line">语句体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-if…else-结构">2.2 if…else 结构</h3><p><strong>格式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(关系表达式)&#123;</span><br><span class="line">语句体<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">语句体<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-if…else…if-结构">2.3 if…else…if 结构</h3><p><strong>格式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(关系表达式<span class="number">1</span>)&#123;</span><br><span class="line">语句体<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(关系表达式<span class="number">2</span>)&#123;</span><br><span class="line">语句体<span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">语句体n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-Switch结构">2.4 Switch结构</h3><p><strong>格式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">语句体<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">语句体<span class="number">2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">语句体n;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得注意的是，当<code>case</code>语句块中没有<code>break</code>时，将继续执行下一次的<code>case</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(a)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;HELLO&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="三、循环结构">三、循环结构</h2><p>循环结构由四个部分构成：</p><ul><li>初始化语句</li><li>条件判断语句</li><li>循环体语句</li><li>条件控制语句</li></ul><h3 id="3-1-for循环">3.1 for循环</h3><p><strong>格式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化语句;条件判断语句;条件控制语句)&#123;</span><br><span class="line">循环体语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-while循环">3.2 while循环</h3><p><strong>格式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件判断语句)&#123;</span><br><span class="line">循环体语句;</span><br><span class="line">条件控制语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-do-…-while-循环">3.3 do … while 循环</h3><p><strong>格式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">循环体语句;</span><br><span class="line">条件控制语句;</span><br><span class="line">&#125;<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(条件判断语句)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="四、跳转语句">四、跳转语句</h2><ul><li>continue</li><li>break</li></ul><hr><h2 id="随机数Random">随机数Random</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line">Random r=<span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="type">int</span> num=r.nextInt(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0-9</span></span><br></pre></td></tr></table></figure><hr><h2 id="IDEA">IDEA</h2><p><strong>快速生成语句</strong></p><ul><li>快速生成main方法：<code>psvm</code></li><li>快速生成输出语句：<code>sout</code></li></ul><p><strong>内容辅助键</strong></p><ul><li><code>Ctrl+Alt+space</code>(内容提示，代码补全)</li></ul><p><strong>快捷键</strong></p><ul><li><p>注释</p><ul><li>单行：<code>ctrl+/</code> 再来一次是取消</li><li>多行：<code>ctrl+shift+/</code> 再来一次是取消</li></ul></li><li><p>格式化</p><ul><li><code>ctrl+alt+L</code></li></ul></li></ul><hr><h1>第五章  数组</h1><hr><h2 id="一、数组定义格式">一、数组定义格式</h2><p><strong>格式一</strong>：</p><ul><li><code>数据类型[] 变量名</code></li><li>范例: <code>int[] arr</code></li><li>定义了一个int类型的数组，数组名是arr</li></ul><p><strong>格式二</strong>:</p><ul><li><code>数据类型 变量名[]</code></li><li>范例:<code>int arr[]</code></li><li>定义了一个int类型的变量，变量名是arr数组</li></ul><hr><h2 id="二、数组初始化">二、数组初始化</h2><p>Java中的数组必须先初始化，然后才能使用。</p><p>所谓初始化，就是为数组中的数组元素分配内存空间，并为每个数组元素赋值。</p><h3 id="2-1-动态初始化">2.1  动态初始化</h3><p>在初始化时，指定数组长度，由系统为数组动态分配初始值</p><p>例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><h3 id="2-2-静态初始化">2.2  静态初始化</h3><p>指定数组的初始值，由系统决定长度。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="三、数组元素访问">三、数组元素访问</h2><h3 id="3-1-数组元素访问">3.1  数组元素访问</h3><p>格式：<code>数组名[索引]</code></p><p>索引用于访问数组中的数据使用，<code>数组名[索引]</code>等同于变量名，是一种特殊的变量名。</p><ul><li>索引从0开始</li><li>索引是连续的</li><li>索引每次递增1</li></ul><hr><h2 id="四、内存分配">四、内存分配</h2><h3 id="4-1-Java中内存分配">4.1 Java中内存分配</h3><p>Java为了提高效率，给每种类型的数据都分配了空间。数组在初始化时，会为存储空间添加默认值：</p><ul><li>整数：0</li><li>浮点：0.0</li><li>布尔：false</li><li>字符：空字符</li><li>引用：null</li></ul><p>Java中的内存可分为两种，栈内存和堆内存。</p><p>栈内存：存储局部变量，定义在方法中的变量，使用完毕，立即消失。</p><p>堆内存：存储new出来的内容(实体、对象)，数组在初始化时会为期添加默认值。当使用完毕时，会在垃圾回收期空闲时被回收。</p><img src="/2022/08/15/%E3%80%90Java%E3%80%91Java%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/image-20220527233055693.png" alt="image-20220527233055693" style="zoom:50%;"><h3 id="4-2-数组内存图">4.2  数组内存图</h3><img src="/2022/08/15/%E3%80%90Java%E3%80%91Java%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/image-20220527233316829.png" alt="image-20220527233316829" style="zoom:50%;"><p>当两个数组指向相同的栈内存时，牵一而动全身。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr1=arr;</span><br></pre></td></tr></table></figure><hr><h2 id="五、常见问题">五、常见问题</h2><ul><li>索引越界</li><li>空指针异常</li></ul><hr><h2 id="六、数组常见操作">六、数组常见操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line"><span class="type">int</span>[] arr =&#123;<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组元素数量</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取最值</span></span><br><span class="line"><span class="type">int</span> max=arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(max&lt;arr[i])&#123;</span><br><span class="line">        max=arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 翻转</span></span><br><span class="line"><span class="type">int</span>[] arr=&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> start=<span class="number">0</span>,end=arr.length-<span class="number">1</span>;start&lt;=end;start++,end--)&#123;</span><br><span class="line">    <span class="type">int</span> temp=arr[start];</span><br><span class="line">    arr[start]=arr[end];</span><br><span class="line">    arr[end]=temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>第六章  方法</h1><hr><h2 id="一、方法概述">一、方法概述</h2><p>方法是将具有独立功能的代码块组织成一个整体，使之能够完成特定任务的代码集。</p><ul><li>方法必须先创建才可使用，该过程称为方法定义</li><li>方法创建后不是直接运行的，需要手动使用后才执行，该过程称为方法调用</li></ul><p><strong>定义方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名()&#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line">方法名();</span><br></pre></td></tr></table></figure><hr><h2 id="二、带参数的方法">二、带参数的方法</h2><p><strong>定义方法与调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名(参数)&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 范例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">isNumber</span><span class="params">(<span class="type">int</span> number)</span>&#123;...&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span> number1,<span class="type">int</span> number2)</span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">isNumber(<span class="number">5</span>);</span><br><span class="line">getMax(<span class="number">6</span>,<span class="number">7</span>);</span><br></pre></td></tr></table></figure><h3 id="形参与实参">形参与实参</h3><p><strong>形参</strong></p><ul><li>方法定义中的参数</li><li>等同于变量定义格式</li></ul><p><strong>实参</strong></p><ul><li>方法调用中的参数</li><li>等同于使用变量或常量</li></ul><hr><h2 id="三、带返回值的方法">三、带返回值的方法</h2><p><strong>定义方法与调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 数据类型 方法名(参数)&#123;</span><br><span class="line"><span class="keyword">return</span> 数据;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 范例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span> n1,<span class="type">int</span> n2)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n1&gt;n2?n1:n2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a=getMax(<span class="number">5</span>,<span class="number">6</span>);</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ul><li>方法不能嵌套定义</li><li><code>void</code>表示无返回值，可以省略<code>return</code>，也可以不省略，但后面不能加数据。</li></ul><hr><h2 id="四、方法重载">四、方法重载</h2><p>方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法互相构成重载。</p><ul><li>多个方法在同一个类中</li><li>多个方法具有相同的方法名</li><li>多个方法的参数不同，类型不同或数量不同</li></ul><p>重载仅针对参数进行识别，与返回值无关。</p><p><strong>示例</strong></p><p>设计一个兼容整数类型的比较方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a==b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">short</span> a,<span class="type">short</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a==b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">byte</span> a,<span class="type">byte</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a==b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">long</span> a,<span class="type">long</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a==b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">compare(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">compare(<span class="type">short</span>(<span class="number">1</span>),<span class="type">short</span>(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><hr><h2 id="五、方法参数传递">五、方法参数传递</h2><p>基本类型的参数，各个方法是隔开进行的(作用域)，所以形参并不会影响实参的值。</p><img src="/2022/08/15/%E3%80%90Java%E3%80%91Java%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/image-20220528132130223.png" alt="image-20220528132130223" style="zoom:50%;"><p>对于引用参数，由于传进去了堆内存，所以修改时会在堆内存里修改，形参传递的是堆地址。</p><p><img src="/2022/08/15/%E3%80%90Java%E3%80%91Java%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/image-20220528132800842.png" alt="image-20220528132800842"></p><hr><p><strong>Debug</strong>：是供程序员使用的程序调试工具，它可用于查看程序的执行流程，也可以用于追踪程序执行过程来调试程序。</p><p>Debug调试又称断点调试，断点本质上是一个标记，告诉我们从哪里开始查看。</p><hr><h1>第七章  类和对象</h1><hr><h2 id="一、类和对象">一、类和对象</h2><p><strong>对象</strong>：客观存在的实体。</p><p><strong>类</strong>：类是对显示生活中一类具有共同属性和行为的事物的抽象。</p><p><strong>特点</strong>：</p><ul><li>类是对象的数据类型</li><li>类是具有相同属性和行为的一组对象的集合</li></ul><p>在Java程序中，类是基本组成单位，它将确定对象会拥有的属性和行为。</p><p><strong>类的组成</strong>：属性和行为</p><ul><li>属性：通过成员变量来体现</li><li>行为：通过行为方法来体现</li></ul><p><strong>类的定义</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名&#123;</span><br><span class="line"><span class="comment">// 成员变量</span></span><br><span class="line">变量<span class="number">1</span>的数据类型 变量<span class="number">1</span>;</span><br><span class="line">变量<span class="number">2</span>的数据类型 变量<span class="number">2</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成员方法</span></span><br><span class="line">方法<span class="number">1</span>;</span><br><span class="line">方法<span class="number">2</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    String brand;</span><br><span class="line">    <span class="type">int</span> price;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Calling&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建并使用对象</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line">Phone p=<span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用成员变量</span></span><br><span class="line">p.brand; <span class="comment">// 会得到默认值哦</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用成员方法</span></span><br><span class="line">p.call();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line">p.brand=<span class="string">&quot;OPPO&quot;</span>;</span><br><span class="line">p.price=<span class="number">3000</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="二、对象内存图">二、对象内存图</h2><img src="/2022/08/15/%E3%80%90Java%E3%80%91Java%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/image-20220529005813465.png" alt="image-20220529005813465" style="zoom:50%;"><p>在申请对象时，会在栈内存中创建一个地址，作为引用类型，对象地址会指向堆内存中存储的方法和成员变量。</p><img src="/2022/08/15/%E3%80%90Java%E3%80%91Java%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/image-20220529010535860.png" alt="image-20220529010535860" style="zoom:50%;"><img src="/2022/08/15/%E3%80%90Java%E3%80%91Java%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/image-20220529010803689.png" alt="image-20220529010803689" style="zoom:50%;"><hr><h2 id="三、成员变量和局部变量">三、成员变量和局部变量</h2><p><strong>成员变量</strong>：在类中方法外的变量</p><p><strong>局部变量</strong>：在类中方法中的变量</p><table><thead><tr><th style="text-align:center">区别</th><th style="text-align:center">成员变量</th><th style="text-align:center">局部变量</th></tr></thead><tbody><tr><td style="text-align:center">类中位置不同</td><td style="text-align:center">类中方法外</td><td style="text-align:center">方法内或方法声明上</td></tr><tr><td style="text-align:center">内存中位置不同</td><td style="text-align:center">堆内存</td><td style="text-align:center">栈内存</td></tr><tr><td style="text-align:center">生命周期不同</td><td style="text-align:center">随对象存在而存在，随对象的消失而消失</td><td style="text-align:center">随方法的调用而存在</td></tr><tr><td style="text-align:center">初始化值不同</td><td style="text-align:center">有默认初始值</td><td style="text-align:center">无默认初始值，必须先定义</td></tr></tbody></table><hr><h2 id="四、封装">四、封装</h2><h3 id="4-1-private关键字">4.1  private关键字</h3><ul><li>是一个权限修饰符</li><li>可以修饰成员(成员变量和成员方法)</li><li>作用是保护成员不被别的类使用，被<code>private</code>修饰的成员只在本类中才能访问。</li></ul><p>针对被<code>private</code>修饰的成员变量，如果需要被别的类使用，则需要提供相应的操作</p><ul><li><code>get 变量名()</code>方法，用于获取成员变量的名称，方法用<code>public</code>修饰</li><li><code>set 变量名(参数)</code>方法，用于设置成员变量的值，方法用<code>public</code>修饰</li></ul><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">private</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">age=a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-this关键字">4.2  this关键字</h3><p><code>this</code>修饰的变量用于指代成员变量。</p><ul><li>方法的形参如果与成员变量同名，不带this修饰的变量指的是形参，而不是成员变量</li><li>方法的形参没有与成员变量同名，不带this修饰的变量指的是成员变量</li></ul><p><code>this</code>就是栈内存地址本身哦。</p><h3 id="4-3-封装">4.3  封装</h3><p><strong>概述</strong></p><ul><li>封装是面向对象三大特征之一</li><li>是面向对象编程语言对客观世界的模拟，客观世界成员变量都是隐藏在对象内部的，外界是无法直接操作的</li></ul><p><strong>原则</strong></p><ul><li>将类的某些信息隐藏在类内部，不允许外部程序直接访问。而是提供对应的接口。</li></ul><p><strong>好处</strong></p><ul><li>控制了成员变量的操作，提高了代码的安全性</li><li>提供了代码的复用性</li></ul><hr><h3 id="五、构造方法">五、构造方法</h3><p>构造方法是一种特殊的方法，用于创建对象。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>()&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当一个类没有构造方法时，系统会自动给一个无参的构造方法。</p><p><strong>标准类</strong></p><ul><li>成员变量<ul><li>使用<code>private</code>修饰</li></ul></li><li>构造方法<ul><li>提供一个无参构造方法</li><li>提供一个或多个带参构造方法</li></ul></li><li>成员方法<ul><li>提供每个成员变量的set、get方法</li><li>提供显示对象信息的show方法</li></ul></li><li>创建对象并为其成员变量赋值的两种方法</li></ul><hr><h1>第八章  字符串</h1><hr><h2 id="一、API">一、API</h2><p>API(Application Programming Interface)应用程序编程接口</p><p>Java API：在JDK中提供各种功能的Java类，这些类将底层的实现封装起来了，我们不需要关心这些类是如何实现的，只需要学习这些类是如何使用即可。</p><hr><h2 id="二、String">二、String</h2><p>String类在<code>java.lang</code>包下，使用时不需要额外导入。</p><p>String类代表字符串，Java程序中所有字符串文字都被实现为此类的实例。</p><p><strong>特点</strong></p><ul><li>字符串不可变</li><li>字符串可被共享</li><li>字符串底层是字节数组</li></ul><p>通过<code>new</code>创建的字符串对象，每次<code>new</code>都会申请一个内存空间，虽然内容相同，但结果不同。</p><p>通过<code>&quot;&quot;</code>方式创建的字符串对象，只要字典序相同，无论程序中代码出现几次，JVM都只会建立一个String对象，并在字符串池中维护。</p><p><strong>字符串的比较</strong></p><p>使用<code>==</code>做比较：</p><ul><li>基本类型：比较数据值是否相同</li><li>引用类型：比较地址值是否相同</li></ul><p>字符串是对象，如果用<code>==</code>则是比较地址。为了比较内容，需要一个新的方法来实现：<code>equals()</code></p><p><code>public boolean equals(Object anObject)</code>:将此字符串与指定对象比较</p><p><code>s1.equals(s2)</code></p><p><strong>案例一  登录系统</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String username=<span class="string">&quot;UCAS&quot;</span>;</span><br><span class="line">        String password=<span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        Scanner sc=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入用户名&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">pass</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (name.equals(username) &amp;&amp; pass.equals(password)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">2</span>-i==<span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;您的账号已被锁定&quot;</span>);    </span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>案例二  遍历字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">      System.out.println(<span class="string">&quot;请输入一个字符串&quot;</span>);</span><br><span class="line">      String line=sc.nextLine();</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;line.length();i++)&#123;</span><br><span class="line">      <span class="comment">// 通过charAt(idx)获取索引位置的字符</span></span><br><span class="line">          System.out.println(line.charAt(i));</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="三、StringBuilderimage-20220529095929563">三、StringBuilder<img src="/2022/08/15/%E3%80%90Java%E3%80%91Java%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/image-20220529095929563.png" alt="image-20220529095929563"></h2><p>若对字符串进行拼接，每次拼接都会构建一个新的String对象，即耗时又浪费内存。</p><p>StringBuilder是一个可变的字符串类，可以有效处理上述问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建空白可变</span></span><br><span class="line">StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建内容可变</span></span><br><span class="line">StringBuilder sb1=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加数据 返回数据本身</span></span><br><span class="line">sb.append(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换</span></span><br><span class="line">sb.toString();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反转</span></span><br><span class="line">sb.reverse();</span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">arrayToString</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">StringBuilder sb= <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">sb.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i== arr.length-<span class="number">1</span>)&#123;</span><br><span class="line">sb.append(arr[i]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">sb.append(arr[i]).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sb.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">String s=sb.toString();</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>第九章  集合</h1><hr><h2 id="一、集合基础">一、集合基础</h2><p>集合是一种提供可变存储空间的存储模型类，存储的数据容量可以发生改变。</p><p><strong>ArrayList&lt;E&gt;</strong></p><table><thead><tr><th style="text-align:center">方法名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">public ArrayList()</td><td style="text-align:center">创建一个新的集合对象</td></tr><tr><td style="text-align:center">public boolean add(E e)</td><td style="text-align:center">追加到末尾</td></tr><tr><td style="text-align:center">public void add(int index,E element)</td><td style="text-align:center">在指定位置插入元素</td></tr><tr><td style="text-align:center">public boolean remove(Object o)</td><td style="text-align:center">删除指定元素</td></tr><tr><td style="text-align:center">public E remove(int index)</td><td style="text-align:center">删除指定位置元素，返回被删除元素</td></tr><tr><td style="text-align:center">public E set(int index,E element)</td><td style="text-align:center">修改指定元素，返回被修改元素</td></tr><tr><td style="text-align:center">public E get(int index)</td><td style="text-align:center">返回指定索引处元素</td></tr><tr><td style="text-align:center">public int size()</td><td style="text-align:center">返回集合中的元素个数</td></tr></tbody></table><p><strong>案例一</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储字符串并遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建集合对象</span></span><br><span class="line">    ArrayList&lt;String&gt; array = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加字符串对象</span></span><br><span class="line">    array.add(<span class="string">&quot;Y&quot;</span>);</span><br><span class="line">    array.add(<span class="string">&quot;ou&quot;</span>);</span><br><span class="line">    array.add(<span class="string">&quot;Bui&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历集合</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;array.size();i++)&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> array.get(i);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例二</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Student类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] arg)</span>&#123;</span><br><span class="line">        <span class="comment">// 创建集合对象</span></span><br><span class="line">        ArrayList&lt;Student&gt; array= <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加到集合</span></span><br><span class="line">        addStudent(array);</span><br><span class="line">        addStudent(array);</span><br><span class="line">        addStudent(array);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;array.size();i++)&#123;</span><br><span class="line">            Student s= array.get(i);</span><br><span class="line">            System.out.println(s.getName()+<span class="string">&quot;,&quot;</span>+s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span>&#123;</span><br><span class="line">        Scanner sc=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;Student&#x27;s name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String name=sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;Student&#x27;s age&quot;</span>);</span><br><span class="line">        <span class="type">int</span> age=sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s.setName(name);</span><br><span class="line">        s.setAge(age);</span><br><span class="line">        array.add(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>第十章  面向对象</h1><hr><h2 id="一、继承">一、继承</h2><h3 id="1-1-继承概述">1.1 继承概述</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line"><span class="keyword">public</span> class 子类名 extends 父类名&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 范例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">children</span> <span class="keyword">extends</span> <span class="title class_">parents</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>父类也称基类、超类，子类也称派生类。</p><p>子类可以有父类的内容和自己独特的内容。</p><h3 id="1-2-继承的好处和弊端">1.2  继承的好处和弊端</h3><p><strong>好处</strong></p><ul><li>提高了代码的复用性</li><li>提高了代码的可维护性</li></ul><p><strong>弊端</strong></p><ul><li>增加了类的耦合性，削弱了子类的独立性</li></ul><h3 id="1-3-继承中变量的访问特点">1.3  继承中变量的访问特点</h3><p>在子类方法中访问一个变量</p><ul><li>子类局部范围找</li><li>子类成员范围找</li><li>父类成员范围找</li><li>报错</li></ul><h3 id="1-4-Super">1.4  Super</h3><p>与<code>this</code>关键字差不多，<code>super</code>关键字用于在子类中调用父类的成员和方法。</p><table><thead><tr><th style="text-align:center">关键字</th><th style="text-align:center">访问成员变量</th><th style="text-align:center">访问构造方法</th><th style="text-align:center">访问成员方法</th></tr></thead><tbody><tr><td style="text-align:center">this</td><td style="text-align:center">this.成员</td><td style="text-align:center">this(…)</td><td style="text-align:center">this.方法</td></tr><tr><td style="text-align:center">super</td><td style="text-align:center">super.成员</td><td style="text-align:center">super(…)</td><td style="text-align:center">super.方法</td></tr></tbody></table><h3 id="1-5-构造方法">1.5  构造方法</h3><p>子类中所有的构造方法都会默认访问父类中无参的构造方法。因而，在子类进行初始化之前，一定要先完成父类数据的初始化。</p><p>在每个子类构造方法的第一条语句默认都是<code>super()</code></p><p>面对带参的父类，要么用<code>super()</code>显示调用，要么在父类中构建个无参方法。当调用构造方法时，父类将会被置入堆内存。</p><h3 id="1-6-方法重写">1.6  方法重写</h3><p>方法重写概述</p><ul><li>子类中出现了和父类中一模一样的方法声明</li><li>注意区分重载和重写</li></ul><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(String name)</span>&#123;</span><br><span class="line">System.out.println(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaoMi</span> <span class="keyword">extends</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out,println(<span class="string">&quot;H&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Override</p><ul><li>是一个注解</li><li>可以帮我们检查重写方法声明的正确性</li></ul><p><strong>注意事项</strong></p><ul><li>方法重写不能重写私有方法</li><li>重写方法访问权限不能低于父类</li><li>Java中不能多类继承，但可以多层继承</li></ul><hr><h2 id="二、包与修饰符">二、包与修饰符</h2><h3 id="2-1-包">2.1  包</h3><p>在Java中，包就是文件夹，用于对类进行分级管理。</p><p><strong>格式</strong></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>a</mi><mi>c</mi><mi>k</mi><mi>a</mi><mi>g</mi><mi>e</mi><mtext> 包名</mtext><mn>1.</mn><mtext>包名</mtext><mn>2</mn></mrow><annotation encoding="application/x-tex">package\ 包名1.包名2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">ka</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mspace"> </span><span class="mord cjk_fallback">包名</span><span class="mord">1.</span><span class="mord cjk_fallback">包名</span><span class="mord">2</span></span></span></span></p><p>在程序中使用<code>package</code>文件夹，会将<code>class</code>放到对应的文件夹下。</p><p><strong>导入</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 包<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="2-2-修饰符">2.2  修饰符</h3><p><strong>权限修饰符</strong></p><table><thead><tr><th style="text-align:center">修饰符</th><th style="text-align:center">同一类</th><th style="text-align:center">同一包子类无关类</th><th style="text-align:center">不同包子类</th><th style="text-align:center">不同包无关类</th></tr></thead><tbody><tr><td style="text-align:center">private</td><td style="text-align:center">1</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">默认</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">protected</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">public</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr></tbody></table><p><strong>状态修饰符</strong></p><p><code>final</code>关键字可用于修饰成员方法、成员变量、类。</p><p><strong>特点</strong></p><ul><li>修饰方法：表示该方法为最终方法，不能被重写</li><li>修饰变量：表示该变量时常量，不能被再次赋值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">find</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> pig;</span><br></pre></td></tr></table></figure><p>当修饰变量时基本类型，则数据值不能发生改变。</p><p>当修饰变量为引用类型，则数据地址值不能改变，但内容可变。</p><p><code>static</code>关键字可以修饰成员方法和变量。</p><p><strong>特点</strong></p><ul><li>被类所有对象共享<ul><li>也是判断是否能能够使用静态关键字的条件</li></ul></li><li>可通过类名调用，也可以通过对象名调用</li></ul><p>非静态成员方法：</p><ul><li>能够访问静态和非静态的变量和方法</li></ul><p>静态成员方法：</p><ul><li>只能访问静态成员方法和变量</li></ul><hr><h2 id="三、-多态">三、 多态</h2><h3 id="3-1-概述">3.1  概述</h3><p>同一个对象，在不同时刻表现出来的不同形态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cat类可以生成cat对象或是animal对象</span></span><br><span class="line"><span class="type">cat</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">cat</span>();</span><br><span class="line"><span class="comment">// 父类引用指向子类对象</span></span><br><span class="line"><span class="type">animal</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">cat</span>();</span><br></pre></td></tr></table></figure><p>多态的前提和体现：</p><ul><li>有继承/实现关系</li><li>有方法重写</li><li>有父类引用指向子类对象</li></ul><h3 id="3-2-成员访问特点">3.2  成员访问特点</h3><p>成员变量：编译和执行看左边，即最终接收到多态对象的类型。</p><p>成员方法：编译看左边，执行看右边，即生成对象的类型。</p><p>究其原因是成员方法有重写，而成员变量没有。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"><span class="type">int</span> age=<span class="number">40</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cat</span> extend Animal&#123;</span><br><span class="line"><span class="type">int</span> age=<span class="number">20</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;猫&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Animal a= <span class="keyword">new</span> <span class="title class_">cat</span>();</span><br><span class="line">System.out.println(a.age); <span class="comment">// 40</span></span><br><span class="line">a.eat(); <span class="comment">// 猫</span></span><br></pre></td></tr></table></figure><h3 id="3-3-多态的好处和弊端">3.3  多态的好处和弊端</h3><p>好处：在声明方法时，在父类型里声明，但是在子类型里定义具体实现，参与操作。提高了程序的扩展性</p><p>弊端：不能使用子类特有的方法</p><h3 id="3-4-多态中的转型">3.4  多态中的转型</h3><p>目的：访问子类中的特有方法</p><p>操作：强转(向下转型)</p><hr><h2 id="四、-抽象类">四、 抽象类</h2><h3 id="4-1-概述">4.1  概述</h3><p>一个没有方法体的方法应定义为抽象方法，而含有抽象方法的类必须定义为抽象类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>()&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象类并不能创建一个实例对象。</p><h3 id="4-2-抽象类的特点">4.2  抽象类的特点</h3><ul><li>抽象类和抽象方法必须使用<code>abstract</code>关键词修饰</li><li>抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类</li><li>抽象类不能实例化</li><li>抽象类的子类要么重写抽象类中的所有抽象方法，要么是抽象类</li></ul><h3 id="4-3-抽象类的成员特点">4.3  抽象类的成员特点</h3><ul><li>成员变量<ul><li>可以是变量</li><li>也可以是常量</li></ul></li><li>构造方法<ul><li>有构造方法，但不能实例化，用于子类访问父类数据的初始化</li></ul></li><li>成员方法<ul><li>可以有抽象方法：限制成员必须完成某些动作</li><li>也可以有非抽象方法：提高代码复用性</li></ul></li></ul><hr><h2 id="5、-接口">5、 接口</h2><h3 id="5-1-概述">5.1  概述</h3><p>接口是一种公共的规范标准，只要符合规范，那么大家都可以通用。Java中的接口更多的体现在对行为的抽象。</p><h3 id="5-2-接口的特点">5.2  接口的特点</h3><ul><li><p>接口用关键字<code>interface</code>修饰</p><ul><li><pre><code class="language-java">public interface 接口名&#123;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ 类实现接口用`implements`表示</span><br><span class="line"></span><br><span class="line">  + ```java</span><br><span class="line">    public class 类名 implements 接口名&#123;&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>接口不能实例化</p></li><li><p>接口的实现类</p><ul><li>要么重写接口中的所有抽象方法</li><li>要么是抽象类</li></ul></li></ul><h3 id="5-3-接口的成员特点">5.3  接口的成员特点</h3><ul><li>成员变量<ul><li>只能是常量</li><li>默认修饰符：<code>public static final</code></li></ul></li><li>构造方法<ul><li>接口没有构造方法，因为接口主要是对行为进行抽象的，是有具体存在</li><li>一个类如果没有父类，默认继承自<code>Object</code>类</li></ul></li><li>成员方法<ul><li>只能是抽象方法</li></ul></li></ul><h3 id="5-4-类和接口的关系">5.4  类和接口的关系</h3><ul><li><p>类和类</p><ul><li>继承关系，只能单继承但可以多层继承</li></ul></li><li><p>类和接口</p><ul><li>实现关系，可以单实现或是多实现，或是继承实现</li></ul></li><li><p>接口和接口</p><ul><li>继承关系，可以单继承也可以多继承</li></ul></li></ul><h3 id="5-5-抽象类和接口的区别">5.5  抽象类和接口的区别</h3><ul><li>成员区别</li></ul><table><thead><tr><th style="text-align:center">抽象类</th><th style="text-align:center">接口</th></tr></thead><tbody><tr><td style="text-align:center">变量，常量</td><td style="text-align:center">常量</td></tr><tr><td style="text-align:center">有构造方法</td><td style="text-align:center">无构造方法</td></tr><tr><td style="text-align:center">有抽象或非抽象方法</td><td style="text-align:center">只有抽象方法</td></tr></tbody></table><ul><li>关系区别<ul><li>见3.4</li></ul></li></ul><p><strong>案例</strong></p><ul><li>定义一个门对象，有<code>open</code>和<code>close</code>两个动作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Door</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Door</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">Java入门教程</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="编程语言" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Unit5 三大从句</title>
    <link href="http://example.com/2022/08/10/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91Unit5%20%E4%B8%89%E5%A4%A7%E4%BB%8E%E5%8F%A5/"/>
    <id>http://example.com/2022/08/10/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91Unit5%20%E4%B8%89%E5%A4%A7%E4%BB%8E%E5%8F%A5/</id>
    <published>2022-08-10T14:50:10.168Z</published>
    <updated>2022-08-15T10:54:12.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三大从句">三大从句</h2><p>根据性质与类型，从句可分为以下三大类：</p><ul><li>名词性从句</li><li>定语从句</li><li>状语从句</li></ul><hr><p><strong>名词性从句</strong></p><p>在句子中充当名词，是较为常见的从句。如主语、表语、宾语、同位语从句等。</p><p><strong>定语从句</strong></p><p>在复合句中起到定语的作用，用于修饰名词词性结构，其最显眼的特征就是<code>先行词</code>和<code>关系词</code>。先行词(中心词)即为被修饰的对象，关系词则是起到引导定语从句的作用。</p><p><strong>状语从句</strong></p><p>状语从句在复合句中起到状语作用，格外需要注意九大状语从句的引导词。</p><hr><h2 id="一、名词性从句">一、名词性从句</h2><p>顾名思义啦，名词性从句指在句子中起到相当于名词的从句，按照类型可细化为四大类型：</p><ul><li>主语从句</li><li>宾语从句</li><li>表语从句</li><li>同位语从句</li></ul><blockquote><p>举个栗子~</p></blockquote><p>🌟 What she said is wrong.  主</p><p>🌟 I said that she was wrong.  宾</p><p>🌟 I am who I am.  表</p><p>🌟 The news that he will come back is true. 同</p><h3 id="纵览全局">纵览全局</h3><img src="https://pic2.zhimg.com/80/v2-a2c2a851cd3cc67d38953cc1660146fd_1440w.jpg" style="zoom:50%;"><h3 id="一、名词性从句的连接词">一、名词性从句的连接词</h3><p>引导名词性从句的连接词有三种，<code>单纯连词</code>，<code>连接代词</code>，<code>连接副词</code></p><p><strong>单纯连词</strong></p><p><code>that/whether/if</code>在句中不充当任何成分，只起到连接从句的功能。<code>that</code>没有实际含义，<code>whether/if</code>有是否的意义。</p><p>🌟 That housing price will go up is certain.</p><p>🌟 Whether you win or not doesn’t matter.</p><p><strong>连接代词</strong></p><p>除却引导从句外，连接代词还具有指代的特性。主要有<code>who/whom/whose/what</code>等，具有具体的含义。</p><p>🌟 What doesn’t kill you only makes you stronger.</p><p>🌟 I am who I am.</p><p>🌟 What worries us is who let out the secret,</p><p><strong>连接副词</strong></p><p>具有副词的特点，可以做状语，有具体的含义，不能被省略。例如:<code>when/where/how/why</code>等</p><p>🌟 When the meeting will begin is unknown.</p><p>🌟 I don’t know how I can please him.</p><p>🌟 This is where the accident happened.</p><hr><h3 id="二、主语从句">二、主语从句</h3><p>主语从句（subject clause）,顾名思义就是利用一个从句来代替主语。</p><p>例如：That he finished writing the composition in such a short time surprised us .</p><p>这句话的结构就是最基础的：主＋谓＋宾</p><ul><li><p>主语：That he finished writing the composition in such a short time</p></li><li><p>谓语：Surprised</p></li><li><p>宾语：us</p></li></ul><p><strong>连接词</strong></p><table><thead><tr><th style="text-align:center">从属连词</th><th style="text-align:center">连接代词</th><th style="text-align:center">连接副词</th></tr></thead><tbody><tr><td style="text-align:center">that</td><td style="text-align:center">who</td><td style="text-align:center">when</td></tr><tr><td style="text-align:center">whether</td><td style="text-align:center">whoever</td><td style="text-align:center">where</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">whom</td><td style="text-align:center">how</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">whose</td><td style="text-align:center">why</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">what</td><td style="text-align:center">whenever</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">whatever</td><td style="text-align:center">wherever</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">which</td><td style="text-align:center">however</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">whichever</td><td style="text-align:center"></td></tr></tbody></table><p>主语从句中的<code>that</code>虽然没有实际意义，但不可以进行省略。</p><p><strong>注意点</strong></p><blockquote><p>从句的语态不受到主句时态影响</p></blockquote><p>⭐ Who will be our monitor hasn’t been decided yet.</p><blockquote><p>主句大部分情况是三单，但what引导的主语从句视情况而定</p></blockquote><p>⭐ What caused the accident remains unknown.</p><p>⭐ What we need are good doctors.</p><blockquote><p>主语从句放在句首表示&quot;是否&quot;的时候，不能用<code>if</code>，只能用<code>whether</code></p></blockquote><p>⭐ Whether Mary really heard him is really doubtful.</p><blockquote><p>为了防止句子<code>头重脚轻</code>，往往将形式主语<code>it</code>放在句首，而真正的主语放在句末</p></blockquote><p>⭐ That he will win the match is certain. --&gt;  It is certain that he will win the match.</p><p>⭐ What caused the accident is still a mystery. --&gt; It is still a mystery what caused the accident.</p><hr><p>📌<strong>主语从句不可位于句首的五种情况</strong></p><ol><li><code>if</code>引导的主语从句</li></ol><p>✅ It is uncertain if he will leave for Beijing tomorrow.</p><p>❌ If he will leave for Beijing tomorrow is uncertain.</p><hr><ol start="2"><li><code>It is said, (reported)...</code>结构</li></ol><p>✅ It is said that President Jingo will visit our school next week.</p><p>❌ That President jin will visit our school next week is said.</p><hr><ol start="3"><li><code>It happens, ... , It occurs ... </code>结构</li></ol><p>✅ It occurred to him that he failed in the examination.</p><hr><ol start="4"><li><code>It doesn't matter how/whether</code>结构</li></ol><p>✅ It doesn’t matter whether he is wrong or not.</p><hr><ol start="5"><li>含主语从句的复合句是疑问句时，主语从句不可以提前</li></ol><p>✅ Is it likely that it will rain in the evening?</p><p>❌ It that will rain in the evening likely?</p><img src="/2022/08/10/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91Unit5%20%E4%B8%89%E5%A4%A7%E4%BB%8E%E5%8F%A5/image-20220812225919955.png" alt="image-20220812225919955" style="zoom:50%;"><hr><h3 id="三、宾语从句">三、宾语从句</h3><p><strong>定义</strong></p><p>名词性从句均是异曲同工。即宾语从句就是利用一个从句来代替宾语。</p><p>例如：I think (that) you should tell the truth.</p><ul><li><p>主语：I</p></li><li><p>谓语：think</p></li><li><p>宾语：（that）you should tell the truth</p></li></ul><p><strong>连接词</strong></p><p>同上文</p><p><strong>时态</strong></p><p>🏓主句为现在时，将来时，完成时，从句可以使用任何时态</p><p>🌟 I know he lives here.</p><p>🌟 I know he lived here ten years ago.</p><hr><p>🍍主句为过去时，从句需要对应某种过去时态</p><p>🌟 I knew he lived here.</p><p>🌟 I saw he talking with her mother.</p><hr><p>🍎遇到客观真理时，用现在时</p><p>🌟 The teacher said that earth travels around the sun.</p><hr><p><strong>注意点</strong></p><p>🍏 宾语从句中<code>That</code>不可以省略的情况</p><p>1️⃣ 宾语从句的主语是非谓语动词</p><p>🌟 He think that learning English is very hard.</p><p>2️⃣ 从句的主语是<code>this</code>或<code>that</code>的时候</p><p>🌟 She said that would lead her win.</p><p>3️⃣ 有两个或以上的宾语从句，第二个<code>that</code>不能省略</p><p>🌟 I believe (that) you have done your best and that things will get better.</p><p>4️⃣ <code>it</code>做形式宾语，此时<code>that</code>引导的宾语从句<code>that</code>不可以省略</p><p>🌟 I thought it strange that Amy didn’t came up yesterday.</p><p>5️⃣ 双宾语时，<code>that</code>引导的从句做直接宾语，<code>that</code>不可以省略。</p><p>🌟 My foreign friend tell me that Chinese is one of the most difficult language to learn.</p><hr><p>🔱 四种只能用<code>whether</code>的情况</p><p>1️⃣ <code>or...not</code></p><p>2️⃣ 有介词</p><p>3️⃣ 后接<code>to do</code></p><p>4️⃣ 做主语，只用<code>whether</code></p><img src="/2022/08/10/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91Unit5%20%E4%B8%89%E5%A4%A7%E4%BB%8E%E5%8F%A5/image-20220812234810736.png" alt="image-20220812234810736" style="zoom:50%;"><hr><h3 id="四、表语从句">四、表语从句</h3><p><strong>定义</strong></p><p>名词性从句均是异曲同工。即表语从句就是利用一个从句来代替表语。</p><p>众所周知，表语谓语系动词（be 动词及感官动词）之后，所以一般结构为主语+系动词+表语从句</p><p>例如：The trouble is that he has lost a lot of money.</p><ul><li><p>主语：the trouble</p></li><li><p>谓语: is</p></li><li><p>表语: that he has lost a lot of money.</p></li></ul><p><strong>连接词</strong></p><p>在从属连词上，多了<code>as though</code>和<code>as if</code></p><p><strong>时态</strong></p><p>同主语从句，时态不受主句影响</p><p><strong>注意点</strong></p><p>只能用<code>whether</code>代替<code>if</code>引导</p><hr><h3 id="五、同位语从句">五、同位语从句</h3><p><strong>定义</strong></p><p>同位语，按字面意思理解，就是与同位语前面的那个名词具有相同地位的成分. 即同位语通常紧跟在名词、代词后面,进一步说明、解释它的情况</p><p>例如 :</p><p>🌟 He my brother is a superstar.</p><p>他，即我的哥哥，是个明星(my brother是he的同位语)</p><p>🌟 We both can do it.</p><p>我们，两个人，都可以做(both就是we的同位语)</p><p>🌟 Where is you classmate tom.</p><p>你的同学汤姆在哪里（tom 是classmate的同位语）</p><p>同位语从句，就是用一个句子来做同位语成分，通常跟在一些特定的名词之后。这些名词有：</p><ul><li>hope</li><li>wish</li><li>fact</li><li>answer</li><li>problem</li><li>new</li><li>belief</li><li>idea</li><li>promise</li><li>suggestion</li><li>order</li><li>conclusion</li><li>information</li><li>though</li></ul><p>这些名词的名义都很抽象，指代不明确，所以往往跟一个同位语从句来解释这些名词的具体内涵。比如：</p><p>🌟 The fact that she didn’t like me really hurts me.</p><p>主语：The fact</p><p>谓语： really hurts</p><p>同位语：that she didn’t like me</p><p>宾语：me</p><p>不知道大家发现没有，不管是同位语还是同位语从句，他们都是起到解释说明的功能，不是关键的句子成分。所以即使他们被去除，也不会影响句子的完整性。</p><hr><p><strong>连接词</strong></p><p>同上</p><p><strong>时态</strong></p><p>同主语从句</p><p><strong>注意点</strong></p><p>1️⃣ 定语（从句）是对其先行词的修饰，属于形容词范畴。而同位语（从句）是对其前面的抽象名词进行解释说明，属于名词范畴。</p><p>2️⃣ 引导词that在同位语从句中只起连接作用，不做任何成分。That在定语从句中属于关系代词，充当句子成分。</p><p>3️⃣ 当when,where,why,how 等连接副词连接时，虽然在句中充当成分，但前面没有与其意义相当的先行词！</p><p>🌟 He will never forget the days when he lived with his grandparents.</p><p>🌙 He has no idea when the meeting will be held.</p><hr><h2 id="二、定语从句">二、定语从句</h2><h3 id="一、定义">一、定义</h3><p>一个句子跟在一个名词或代词后，对这个名词（代词）进行修饰限定的句子就叫定语从句，被修饰的名词或代词叫先行词，引导定语从句的词叫关系词。定语从句也可以叫做形容词词性从句。</p><p>📏 定语从句结构=<code>先行词</code>+<code>关系词</code>+<code>从句</code></p><p>🏛️ <strong>分类</strong>:</p><p>​1️⃣限制性定语从句</p><p>​2️⃣非限制性定语从句</p><p>💫 <strong>区别</strong></p><ul><li>限制性定语从句是先行词不可缺少的部分，去掉从句后，主句意思不明显，所以称为限制性啦 <s>(限制你删除)</s></li></ul><p>🌟 A man who doesn’t learn from others can’t achieve much.</p><p>此时，主语<code>A man</code>指的是一类人，定语从句不能去掉，要不然区间就变成了怪怪的一个人了！</p><ul><li>非限制性定语从句仅仅是对修饰的词做进一步的说明，而没有深入的解释或是补充，去掉并不影响意思，且非限一般以逗号形式与主句分割。</li></ul><p>🌟 Finally we visited the Three Gorges Dam, which is the greatest key water control project in the world at present.</p><ul><li>此外，非限还能对整个主句进行修饰嘞✌️,此时一般用三单</li></ul><p>🌟 The traffic of this city is quite bad, which is know to every.</p><h3 id="二、关系词">二、关系词</h3><p>关系词就是引导词的官方说法啦，用来开启一个从句(火车头🚆）</p><p><strong>关系代词</strong></p><table><thead><tr><th style="text-align:center">引导词</th><th style="text-align:center">代替</th><th style="text-align:center">用于</th><th style="text-align:center">成分</th></tr></thead><tbody><tr><td style="text-align:center">that</td><td style="text-align:center">人/物</td><td style="text-align:center">限制</td><td style="text-align:center">主、宾、表</td></tr><tr><td style="text-align:center">which</td><td style="text-align:center">物</td><td style="text-align:center">Both</td><td style="text-align:center">主、宾、表</td></tr><tr><td style="text-align:center">who</td><td style="text-align:center">人</td><td style="text-align:center">Both</td><td style="text-align:center">主、宾、表</td></tr><tr><td style="text-align:center">whom</td><td style="text-align:center">人</td><td style="text-align:center">Both</td><td style="text-align:center">宾、表</td></tr><tr><td style="text-align:center">whose</td><td style="text-align:center">人</td><td style="text-align:center">Both</td><td style="text-align:center">定语</td></tr><tr><td style="text-align:center">as</td><td style="text-align:center">人/物</td><td style="text-align:center">Both</td><td style="text-align:center">主、宾、表</td></tr></tbody></table><hr><blockquote><p>By the way, 我的，你的，这类的词，是做定语哦</p></blockquote><p><strong>关系副词</strong></p><table><thead><tr><th style="text-align:center">引导词</th><th style="text-align:center">代替</th><th style="text-align:center">用于</th><th style="text-align:center">成分</th></tr></thead><tbody><tr><td style="text-align:center">when</td><td style="text-align:center">时间</td><td style="text-align:center">Both</td><td style="text-align:center">时间状语</td></tr><tr><td style="text-align:center">where</td><td style="text-align:center">地点</td><td style="text-align:center">Both</td><td style="text-align:center">地点状语</td></tr><tr><td style="text-align:center">why</td><td style="text-align:center">原因</td><td style="text-align:center">限制</td><td style="text-align:center">原因状语</td></tr></tbody></table><hr><blockquote><p>下面我们来看看关系代词引导的定语从句</p></blockquote><p>🍎 关系代词<code>who/whom</code></p><p>指代人，分别做主语和宾语~</p><p>🌟 The man who lives in that house is my uncle.</p><p>🌟 The girl whom the teacher often praises is our monitor.</p><hr><p>🍇 关系代词<code>which</code></p><p>关系代词<code>which</code>指物，在定语从句做主语或宾语~</p><p>🌟 The book which cost me a lot of money is very interesting.</p><hr><p>🍏 关系代词<code>that</code></p><p><code>that</code>只能用于限制性从句，可以指物指人，用于进一步的解释说明。</p><p>🌟 The bag that lies on the ground is hers.</p><p>🌟 The old man that I visited yesterday is my teacher.</p><hr><p>📘 关系代词<code>whose</code></p><p>这个关系词捏，一般可以用<code>of whom/ of which</code>的结构进行替代</p><p>🌟 Do you know the doctor, whose son is a doctor too?</p><p>➡️ Do you konw the doctor, the son of whom is a doctor too?</p><p>➡️ Do you konw the doctor, of whom the son is a doctor too?</p><hr><p>🚙 <code>as</code>引导的定语从句</p><p>1️⃣ <code>as</code>引导的限制性定语从句</p><p>通常要跟<code>such, the same, as</code>进行搭配，构成固定搭配。</p><p>🌟 He is not such a fool as he looks.</p><p>🌟 He rides as expensive a bike as he can afford.</p><p>2️⃣ <code>as</code>引导的非限制定语从句</p><p>一般这时候，代替整个主句~</p><p>我们常见的就有<code>as we all know, aas it is known, as it is , as it said above, as is usual</code>等等啦。</p><p>🌟 As is known to the United States, Mark Twain is a great writer.</p><p>🌟 As we all know, the earth is round.</p><p>🌟 He is absorbed in work, as he often was.</p><hr><blockquote><p>我们再来看看关系副词引导的定语从句</p></blockquote><p>🏷️ 关系副词<code>when/where</code></p><p>当先行词是时间或地点名词，在从句中充当时间状语或地点状语，相当于&quot;介词+which&quot;</p><p>🌟 October 1, 1949 was the day when (=on which) the People’s Republic of China was founded.</p><p>🌟 This is the school where (=in which) I studied a few years ago.</p><p>那啥，<code>where</code>有时还可以于抽象名词后引导定语从句，常见的抽象名词有：</p><ul><li>point</li><li>degree</li><li>stage</li><li>position</li><li>case</li><li>condition</li></ul><p>🌟 We have reached a point where a change is needed.</p><p>🌟 He got into a situation where it is hard to decide what is right and wrong.</p><hr><p>🚗 关系副词<code>why</code></p><p>只能用于引导限制性定语从句哦，先行词只有<code>reason</code>，充当原因状语，相当于<code>for which</code></p><p>🌟 Do you know the reason why (=for which) he is not here now?</p><hr><p>✈️ 关系代词<code>which</code>和<code>that</code>的区别</p><p>🌵 只能用<code>that</code>的情况</p><ul><li><p>先行词是不定代词，或者被<code>every, any, all, some, no, little, few, much</code>等修饰</p></li><li><p>先行词被序数词、形容词最高级、the only, the very, the last等修饰</p></li><li><p>先行词有人有物</p></li><li><p>疑问词是<code>who</code>或者<code>which</code></p></li></ul><p>🍰 只用<code>which</code></p><ul><li>在非限制性定语从句中只能使用关系代词<code>which</code></li><li>&quot;介词+关系代词&quot;引导的定语从句中，只能使用关系词<code>which</code>不能使用<code>that</code></li></ul><hr><h3 id="注意点-v2">注意点</h3><p>1️⃣ 定语从句的谓语动词需要跟先行词的人称和数保持一致！</p><p>🌟 Tom is one of the boys who are from the USA.</p><p>🌟 Tom is the only boy that is from the USA.</p><p>⭐ I, who am in Australia, feel proud of being a Chinese.</p><p>2️⃣ that和why只能引导限制，而what不能在定语从句中充当引导词</p><p>3️⃣ 限制性从句中，关系代词做动词宾语或介词宾语放在句末的时候，是可以进行省略的。而非限制性则不能进行省略。</p><p>🌟 Is there anything [ ( that ) you wanted ]?</p><p>🌟 Who is the man, whom you were talking to?</p><p>4️⃣ 用关系代词还是关系副词，取决于关系词在定语从句中充当的作用。</p><p>5️⃣ 以<code>the way</code>为先行词的限制性定语从句通常由<code>in which</code>和<code>that</code>引导，而且通常可以省略</p><hr><h2 id="三、状语从句">三、状语从句</h2><p>今天我们来talk about状语从句~</p><p><strong>啥是状语从句</strong></p><p>⚓ 当然是在复合句中充当状语的从句啦！</p><p><strong>有虾米用</strong></p><p>⚓ 用来修饰谓语、非谓语动词、定语、状语或者整个句子！换句话说，就是<code>增加信息量</code>!</p><p>⚓ 当然啦，脱离了状语从句的主句也能成活，且意思不受影响~</p><p><strong>结构捏</strong></p><p>⚓ 状语从句一般由<strong>连词</strong>引导，也可以由<strong>词组</strong>引导，可以放在任何位置~</p><p>⚓ 不失一般性，放在句首或句中时，通常用逗号隔开，而句末一般不用。</p><p>🌟 连词+状语从句 , 主句</p><p>🌟 主句 , 连词+状语从句</p><p><strong>分类捏</strong></p><p>根据状语从句所蕴含的信息，可以分为九大类！</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">连词 or 词组</th></tr></thead><tbody><tr><td style="text-align:center">时间状语从句</td><td style="text-align:center">when, while, as, before, after, since, until, as soon as. etc.</td></tr><tr><td style="text-align:center">地点状语从句</td><td style="text-align:center">where, wherever</td></tr><tr><td style="text-align:center">原因状语从句</td><td style="text-align:center">because, since, as</td></tr><tr><td style="text-align:center">结果状语从句</td><td style="text-align:center">so…that, such…that</td></tr><tr><td style="text-align:center">❤️</td><td style="text-align:center">🥀</td></tr><tr><td style="text-align:center">目的状语从句</td><td style="text-align:center">so that, in order that</td></tr><tr><td style="text-align:center">条件状语从句</td><td style="text-align:center">if, unless, as long as</td></tr><tr><td style="text-align:center">方式状语从句</td><td style="text-align:center">as, as if/though, the way</td></tr><tr><td style="text-align:center">💙</td><td style="text-align:center">📘</td></tr><tr><td style="text-align:center">让步状语从句</td><td style="text-align:center">though, although, even if/ though.</td></tr><tr><td style="text-align:center">比较状语从句</td><td style="text-align:center">as…as, 比较级+than</td></tr></tbody></table><hr><blockquote><p>时间状语从句</p></blockquote><p>用来告诉你主句<code>发生的时间</code>！引导词包括：</p><p>🏷️ 当…的时候: <code>when, while, as</code></p><p>🏷️ …发生前/后: <code>before, after</code></p><p>🏷️ 一…就…(类似触发器~): <code>as soon as, no sooner...than..., hardly...when...</code></p><p>🏷️ 自从: <code>since</code></p><p>🏷️ 直到: <code>until</code></p><hr><p>🍎 <strong>when, while, as</strong></p><p><strong>when</strong>：像你身边人畜无害的朋友，既可以跟<code>瞬间性动词</code>（词组）<em>go to bed</em> 玩在一起，也可以和<code>延续性动词</code> <em>drink</em> 做朋友。</p><p>例如！</p><p>🌟 When Dad was drinking Coke, Mom went to bed.</p><p>🌟 Dad was drinking Coke when Mom went to bed.</p><p>固定搭配<code>be about to do sth. when...</code> 表示<code>正要做某事，这时</code></p><p>🌟 Mon was about to fall asleep when Dad gave a loud burp.</p><hr><p><strong>while</strong>：这个词，有点像你身边比较高冷的那种人，基本只跟<code>延续性动词</code>（如 drink）一起玩，而且常常是进行时。</p><p>🌟 While Dad was drinking Coke, Mom went to bed.</p><hr><p><strong>as</strong>：朋友圈也比较固定，后面跟延续性动词（如 drink）。as 强调主、从句两个动作<strong>同时发生</strong></p><p>🌟 As Dad was drinking Coke, he saw Mom go to the bedroom.</p><hr><p>🍎  <strong>until, not…until</strong></p><p>until，单独一个词相当于 till，是“直到……”的意思。</p><p>那么，not…until 直译过来就是“不做某事，直到……”。这样讲话费劲啊，我们再捋捋通顺：“直到……才……”。</p><p>🌟 I watched TV until Mom came home.</p><p>🌟 I didn’t watch TV until Mom came home.</p><p>我们看两个栗子!</p><p>1）我爱你，至死不渝。from《唐顿庄园》</p><p>💌 I will love you, until the last breath leaves my body.</p><p>2）直到放弃你，我才能爱你。from《纯真年代》</p><p>💌 I can’t love you until I give you up.</p><hr><p>🍎 <strong>as soon as</strong></p><p>“一……就……”，遵循<code>主将从现</code>哦！</p><p>🌟 I will call you as soon as I arrive.</p><p><strong>升级版</strong> <strong>no sooner … than …</strong></p><p>遵循主句过去完成，从句一般过去！</p><p>意思是：刚做完A，就去做B啦</p><p>所以A的时态相当于说话点的过去！而且A是完成了的，所以是过去完成时！</p><p>该句型描述的动作一般都发生在过去哦。</p><p>🌟 Dad had no sooner finished dinner than he took a Coke from the fridge.</p><hr><blockquote><p>条件状语从句</p></blockquote><p>条件状语从句表示满足某个条件<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>，事件<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 才会发生!</p><p><strong>引导词</strong></p><ul><li>if</li><li>unless</li></ul><p>🍎 <strong>if</strong></p><p>if适用于主将从现</p><p>🌟 If you jump, I will jump.</p><p>🍎 <strong>unless</strong></p><p><code>unless</code>与<code>if</code>反着来，表示除非~</p><p>🌟 Unless you jump, I won’t jump.</p><p>🌟 If you don’t jump, I won’t jump.</p><hr><blockquote><p>原因状语从句</p></blockquote><p>告诉你事情 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> 发生的原因！通常由<code>because, since, as</code> 引导，气场上逐渐减弱~</p><p>🍎 <strong>because</strong></p><p><code>because</code>表示直接原因，能够回答<code>why</code>的提问。一般情况下，提问方是不知道原因的。</p><p>⭐ Why do you hate her?</p><p>🌟 Because her dog always shits at my door.</p><p>🔔 注意注意！<code>because</code>不能和<code>so</code>一起用！</p><hr><p>🍎 <strong>since</strong></p><p><code>since</code>一般放在句首，一般可以表示为<code>既然</code>，带点小傲娇</p><p>既然你诚心诚意的发问啦，我就告诉你为什么吧~</p><p>🌟 Since you asked in good faith, I will tell you why~</p><hr><p>🍎 <strong>as</strong></p><p><code>as</code>可以表示<code>由于</code>，意思和语境是最弱也是最不正式的哦</p><p>🌟 As Mom gets angry, we had better go outside for a while.</p><hr><blockquote><p>结果状语从句！</p></blockquote><p>告诉你事件<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> 带来的结果！</p><p>一般来说，用<code>so...that..., such...that...</code>引导啦，可以意为：<code>如此，以至于</code></p><p>🌟 D&amp;G is <strong>so</strong> stupid <strong>that</strong> it <strong>took</strong> “hacked accounts” <strong>as</strong> an excuse.</p><p><code>so</code>后面跟形容词，<code>such</code>后面跟人或物~</p><p>❗ The baby is <strong>so cute</strong> that Wong likes her.</p><p>❗ She is <strong>such a cute baby</strong> that Wong likes her.</p><p>当然，遇到<code>many, much, little, few</code>这类不定形容词修饰的时候，只能用<code>so</code></p><p>🇱🇦 so many people, so much money</p><hr><blockquote><p>目的状语从句！</p></blockquote><p>告诉你做事件<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> 是为了啥！</p><p>一般用<code>so that, in order that</code>引导，可以理解为<code>为了，以便</code></p><p>🏷️ <code>so that</code>和<code>in order that</code>用法相同</p><p>🌟 I got up early <strong>so that / in order that</strong> I could catch the early flight.</p><p>我们做个对比(跟结果状语<code>so...that</code>)</p><p>☀️ I got up early <strong>so that</strong> I could catch the early flight.</p><p>🌙 I got up <strong>so</strong> early <strong>that</strong> I felt drowsy in the afternoon.</p><p>可以从以下三个方面进行区分哦</p><p>1️⃣ 看意思。早起是为了赶飞机，但结果可能是一整天精神萎靡，让人看着像二傻子。</p><p>2️⃣ 结果状语从句的 so…that 大多数情况下分开写，目的状语从句的 so that 则当做固定搭配来记；</p><p>3️⃣ <strong>目的状语从句一般带情态动词 can/ could, may/ might等。</strong></p><hr><blockquote><p>让步状语从句</p></blockquote><p>告诉你某事即使退一万步讲会怎样，通常由 <code>although, though, even though</code> 等引导，可以理解为<code>尽管……</code>，<code>即使……</code>。</p><p>🌟 Although Mom has a hot temper, Dad loves her very much.</p><p>❗ <code>although</code>和<code>but</code>也不能用在一个句子里！</p><p>❗ <code>although</code>比<code>though</code>更加的正式，而<code>though</code>可以做副词，意思是<code>然鹅</code>，阔以放在句末~</p><p>🌟 I got up early, I didn’t catch the early flight, though.</p><hr><blockquote><p>比较状语从句</p></blockquote><p>告诉你<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> 和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 一样，或者<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> 比<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 更怎样。通常由<code>as + 形容词/ 副词 + as…</code>，<code>比较级 + than…</code>等引导。</p><p>🌟 My sister eats <strong>twice</strong> <strong>as much as</strong> I do.</p><p>🏷️ 第二个<code>as</code>引导比较状语从句。第一个<code>as</code>是<code>as...as...</code>结构，意为<code>和...一样</code></p><hr><blockquote><p>方式状语从句</p></blockquote><p>告诉你动作以什么方式展开，常常由 as, as if/ though, the way 引导。</p><p>🌟 When in Rome, do <strong>as</strong> the Romans do.<br>🏷️ 入乡随俗。</p><p>🌟 Treat people <strong>the way</strong> you want to be treated.<br>🏷️ 用你希望别人对待你的方式去对待别人。</p><hr><blockquote><p>地点状语从句</p></blockquote><p>告诉你动作在哪里发生（可以是抽象意义），常由 <code>where</code> 等来引导。</p><p>🌟 <strong>Where</strong> there is a will, there is a way.<br>🏷️ 有志者事竟成。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;三大从句&quot;&gt;三大从句&lt;/h2&gt;
&lt;p&gt;根据性质与类型，从句可分为以下三大类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名词性从句&lt;/li&gt;
&lt;li&gt;定语从句&lt;/li&gt;
&lt;li&gt;状语从句&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;名词性从句&lt;/strong&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="英语" scheme="http://example.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 算法题归档</title>
    <link href="http://example.com/2022/08/06/%E3%80%90LeetCode%E3%80%91%20%E5%88%B7%E9%A2%98%E5%BD%92%E6%A1%A3/"/>
    <id>http://example.com/2022/08/06/%E3%80%90LeetCode%E3%80%91%20%E5%88%B7%E9%A2%98%E5%BD%92%E6%A1%A3/</id>
    <published>2022-08-06T15:58:11.238Z</published>
    <updated>2022-08-13T06:15:47.134Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>呼呼呼</p><p>这是我的刷题统计~</p><p>每周对这些题进行简单的复盘！</p><hr><h2 id="分组">分组</h2><blockquote><p>难度🌟=3⭐  🌙=3🌟 ☀️=3🌙 思维题♦️</p></blockquote><p><strong>前缀和</strong></p><table><thead><tr><th style="text-align:center">题号</th><th style="text-align:center">名称</th><th style="text-align:center">难度</th></tr></thead><tbody><tr><td style="text-align:center">724</td><td style="text-align:center"><a href="https://leetcode.cn/problems/find-pivot-index/">寻找数组的中心下标</a></td><td style="text-align:center">⭐⭐</td></tr><tr><td style="text-align:center">1403</td><td style="text-align:center"><a href="https://leetcode.cn/problems/minimum-subsequence-in-non-increasing-order/">非递增最小子序列</a></td><td style="text-align:center">⭐⭐</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><hr><p><strong>模拟</strong></p><table><thead><tr><th style="text-align:center">题号</th><th style="text-align:center">名称</th><th style="text-align:center">难度</th></tr></thead><tbody><tr><td style="text-align:center">592</td><td style="text-align:center"><a href="https://leetcode.cn/problems/fraction-addition-and-subtraction/">分数加减运算</a></td><td style="text-align:center">🌟🌟</td></tr><tr><td style="text-align:center">622</td><td style="text-align:center"><a href="https://leetcode.cn/problems/design-circular-queue/">设计循环队列</a></td><td style="text-align:center">🌟🌟</td></tr><tr><td style="text-align:center">1374</td><td style="text-align:center"><a href="https://leetcode.cn/problems/generate-a-string-with-characters-that-have-odd-counts/">生成每个字符都是奇数个的字符串</a></td><td style="text-align:center">⭐</td></tr><tr><td style="text-align:center">2365</td><td style="text-align:center"><a href="https://leetcode.cn/problems/task-scheduler-ii/">任务调度器II</a></td><td style="text-align:center">🌙⭐</td></tr><tr><td style="text-align:center">636</td><td style="text-align:center"><a href="https://leetcode.cn/problems/exclusive-time-of-functions/">函数的独占时间</a></td><td style="text-align:center">🌙</td></tr><tr><td style="text-align:center">640</td><td style="text-align:center"><a href="https://leetcode.cn/problems/solve-the-equation/">求解方程</a></td><td style="text-align:center">🌙</td></tr><tr><td style="text-align:center">1706</td><td style="text-align:center"><a href="https://leetcode.cn/problems/where-will-the-ball-fall/">球会落在哪</a></td><td style="text-align:center">🌙</td></tr><tr><td style="text-align:center">202</td><td style="text-align:center"><a href="https://leetcode.cn/problems/happy-number/">快乐数</a></td><td style="text-align:center">🌙</td></tr><tr><td style="text-align:center">54</td><td style="text-align:center"><a href="https://leetcode.cn/problems/spiral-matrix/">螺旋矩阵</a></td><td style="text-align:center">🌔</td></tr><tr><td style="text-align:center">59</td><td style="text-align:center"><a href="https://leetcode.cn/problems/spiral-matrix-ii/">螺旋矩阵II</a></td><td style="text-align:center">🌟🌟</td></tr><tr><td style="text-align:center">885</td><td style="text-align:center"><a href="https://leetcode.cn/problems/spiral-matrix-iii/">螺旋矩阵III</a></td><td style="text-align:center">🌙🌙</td></tr><tr><td style="text-align:center">2326</td><td style="text-align:center"><a href="https://leetcode.cn/problems/spiral-matrix-iv/">螺旋矩阵IV</a></td><td style="text-align:center">🌙</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><hr><p><strong>字符串</strong></p><table><thead><tr><th style="text-align:center">题号</th><th style="text-align:center">名称</th><th style="text-align:center">难度</th></tr></thead><tbody><tr><td style="text-align:center">205</td><td style="text-align:center"><a href="https://leetcode.cn/problems/isomorphic-strings/">同构字符串</a></td><td style="text-align:center">⭐</td></tr><tr><td style="text-align:center">392</td><td style="text-align:center"><a href="https://leetcode.cn/problems/is-subsequence/">判断子序列</a></td><td style="text-align:center">🌙</td></tr><tr><td style="text-align:center">409</td><td style="text-align:center"><a href="https://leetcode.cn/problems/longest-palindrome/">最长回文串</a></td><td style="text-align:center">⭐</td></tr><tr><td style="text-align:center">1408</td><td style="text-align:center"><a href="https://leetcode.cn/problems/string-matching-in-an-array/">数组字符串匹配</a></td><td style="text-align:center">⭐</td></tr><tr><td style="text-align:center">761</td><td style="text-align:center"><a href="https://leetcode.cn/problems/special-binary-string/">特殊的二进制序列</a></td><td style="text-align:center">☀️</td></tr><tr><td style="text-align:center">299</td><td style="text-align:center"><a href="https://leetcode.cn/problems/bulls-and-cows/">猜数字</a></td><td style="text-align:center">🌟</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center"><a href="https://leetcode.cn/problems/two-sum/">两数之和</a></td><td style="text-align:center">⭐</td></tr><tr><td style="text-align:center">1417</td><td style="text-align:center"><a href="https://leetcode.cn/problems/reformat-the-string/">重新格式化字符串</a></td><td style="text-align:center">🌟</td></tr></tbody></table><hr><p><strong>数组</strong></p><table><thead><tr><th style="text-align:center">题号</th><th style="text-align:center">名称</th><th style="text-align:center">难度</th></tr></thead><tbody><tr><td style="text-align:center">1480</td><td style="text-align:center"><a href="https://leetcode.cn/problems/running-sum-of-1d-array/">一维数组的动态和</a></td><td style="text-align:center">⭐</td></tr><tr><td style="text-align:center">1331</td><td style="text-align:center"><a href="https://leetcode.cn/problems/rank-transform-of-an-array/">数组序号转换</a></td><td style="text-align:center">⭐⭐</td></tr><tr><td style="text-align:center">121</td><td style="text-align:center"><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/">买股票的最佳时机</a></td><td style="text-align:center">🌟</td></tr><tr><td style="text-align:center">622</td><td style="text-align:center"><a href="https://leetcode.cn/problems/design-circular-queue/">设计循环队列</a></td><td style="text-align:center">🌟🌟</td></tr><tr><td style="text-align:center">899</td><td style="text-align:center"><a href="https://leetcode.cn/problems/orderly-queue/">有序队列</a></td><td style="text-align:center">♦️</td></tr><tr><td style="text-align:center">2363</td><td style="text-align:center"><a href="https://leetcode.cn/problems/merge-similar-items/">合并相似的物品</a></td><td style="text-align:center">⭐</td></tr><tr><td style="text-align:center">2364</td><td style="text-align:center"><a href="https://leetcode.cn/problems/count-number-of-bad-pairs/">统计坏数对的数目</a></td><td style="text-align:center">🌙</td></tr><tr><td style="text-align:center">2366</td><td style="text-align:center"><a href="https://leetcode.cn/problems/minimum-replacements-to-sort-the-array/">将数组排序的最小替换次数</a></td><td style="text-align:center">☀️</td></tr><tr><td style="text-align:center">2367</td><td style="text-align:center"><a href="https://leetcode.cn/problems/number-of-arithmetic-triplets/">算数三元组的数量</a></td><td style="text-align:center">⭐</td></tr><tr><td style="text-align:center">1413</td><td style="text-align:center"><a href="https://leetcode.cn/problems/minimum-value-to-get-positive-step-by-step-sum/">逐步求和得到正数的最小值</a></td><td style="text-align:center">🌟</td></tr><tr><td style="text-align:center">394</td><td style="text-align:center"><a href="https://leetcode.cn/problems/decode-string/">字符串解码</a></td><td style="text-align:center">🌙⭐</td></tr><tr><td style="text-align:center">844</td><td style="text-align:center"><a href="https://leetcode.cn/problems/backspace-string-compare/">比较退格字符串</a></td><td style="text-align:center">⭐⭐</td></tr><tr><td style="text-align:center">692</td><td style="text-align:center"><a href="https://leetcode.cn/problems/top-k-frequent-words/">前k个高频单词</a></td><td style="text-align:center">🌟🌟</td></tr><tr><td style="text-align:center">1282</td><td style="text-align:center"><a href="https://leetcode.cn/problems/reformat-the-string/">用户分组</a></td><td style="text-align:center">🌟🌟</td></tr></tbody></table><hr><p><strong>动态规划</strong></p><table><thead><tr><th style="text-align:center">题号</th><th style="text-align:center">名称</th><th style="text-align:center">难度</th></tr></thead><tbody><tr><td style="text-align:center">392</td><td style="text-align:center"><a href="https://leetcode.cn/problems/is-subsequence/">判断子序列</a></td><td style="text-align:center">🌙</td></tr><tr><td style="text-align:center">121</td><td style="text-align:center"><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/">买股票的最佳时机</a></td><td style="text-align:center">⭐</td></tr><tr><td style="text-align:center">70</td><td style="text-align:center"><a href="https://leetcode.cn/problems/climbing-stairs/">爬楼梯</a></td><td style="text-align:center">⭐</td></tr><tr><td style="text-align:center">509</td><td style="text-align:center"><a href="https://leetcode.cn/problems/fibonacci-number/">斐波那契数列</a></td><td style="text-align:center">⭐</td></tr><tr><td style="text-align:center">746</td><td style="text-align:center"><a href="https://leetcode.cn/problems/min-cost-climbing-stairs/">花费最小爬楼梯</a></td><td style="text-align:center">⭐⭐</td></tr><tr><td style="text-align:center">62</td><td style="text-align:center"><a href="https://leetcode.cn/problems/unique-paths/">不同路径</a></td><td style="text-align:center">⭐⭐</td></tr><tr><td style="text-align:center">2369</td><td style="text-align:center"><a href="https://leetcode.cn/problems/check-if-there-is-a-valid-partition-for-the-array/">检查数组是否存在有效划分</a></td><td style="text-align:center">🌙</td></tr><tr><td style="text-align:center">2370</td><td style="text-align:center"><a href="https://leetcode.cn/problems/longest-ideal-subsequence/submissions/">最长理想子序列</a></td><td style="text-align:center">🌟🌟</td></tr></tbody></table><hr><p><strong>数学</strong></p><table><thead><tr><th style="text-align:center">题号</th><th style="text-align:center">名称</th><th style="text-align:center">难度</th></tr></thead><tbody><tr><td style="text-align:center">593</td><td style="text-align:center"><a href="https://leetcode.cn/problems/valid-square/">有效正方形</a></td><td style="text-align:center">♦️</td></tr><tr><td style="text-align:center">70</td><td style="text-align:center"><a href="https://leetcode.cn/problems/climbing-stairs/">爬楼梯</a></td><td style="text-align:center">♦️</td></tr><tr><td style="text-align:center">509</td><td style="text-align:center"><a href="https://leetcode.cn/problems/fibonacci-number/">斐波那契数列</a></td><td style="text-align:center">♦️</td></tr></tbody></table><hr><p><strong>并查集+DFP+BFS（图)</strong></p><table><thead><tr><th style="text-align:center">题号</th><th style="text-align:center">名称</th><th style="text-align:center">难度</th></tr></thead><tbody><tr><td style="text-align:center">547</td><td style="text-align:center"><a href="https://leetcode.cn/problems/number-of-provinces/">省份数量</a></td><td style="text-align:center">🌟🌟</td></tr><tr><td style="text-align:center">952</td><td style="text-align:center"><a href="https://leetcode.cn/problems/largest-component-size-by-common-factor/">按公因数计算最大组件大小</a></td><td style="text-align:center">☀️</td></tr><tr><td style="text-align:center">733</td><td style="text-align:center"><a href="https://leetcode.cn/problems/flood-fill/">图像渲染</a></td><td style="text-align:center">🌟</td></tr><tr><td style="text-align:center">200</td><td style="text-align:center"><a href="https://leetcode.cn/problems/number-of-islands/">岛屿数量</a></td><td style="text-align:center">🌟🌟</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><hr><p><strong>链表</strong></p><table><thead><tr><th style="text-align:center">题号</th><th style="text-align:center">名称</th><th style="text-align:center">难度</th></tr></thead><tbody><tr><td style="text-align:center">21</td><td style="text-align:center"><a href="https://leetcode.cn/problems/merge-two-sorted-lists/">合并有序链表</a></td><td style="text-align:center">⭐</td></tr><tr><td style="text-align:center">206</td><td style="text-align:center"><a href="https://leetcode.cn/problems/reverse-linked-list/">反转链表</a></td><td style="text-align:center">⭐⭐</td></tr><tr><td style="text-align:center">876</td><td style="text-align:center"><a href="https://leetcode.cn/problems/middle-of-the-linked-list/">链表中间节点</a></td><td style="text-align:center">⭐</td></tr><tr><td style="text-align:center">142</td><td style="text-align:center"><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">环形链表 II</a></td><td style="text-align:center">⭐⭐</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><hr><p><strong>树</strong></p><table><thead><tr><th style="text-align:center">题号</th><th style="text-align:center">名称</th><th style="text-align:center">难度</th></tr></thead><tbody><tr><td style="text-align:center">1161</td><td style="text-align:center"><a href="https://leetcode.cn/problems/maximum-level-sum-of-a-binary-tree/">最大层内元素和</a></td><td style="text-align:center">⭐⭐</td></tr><tr><td style="text-align:center">623</td><td style="text-align:center"><a href="https://leetcode.cn/problems/add-one-row-to-tree/">在二叉树中增加一行</a></td><td style="text-align:center">🌙</td></tr><tr><td style="text-align:center">589</td><td style="text-align:center"><a href="https://leetcode.cn/problems/n-ary-tree-preorder-traversal/">N叉树的前序遍历</a></td><td style="text-align:center">⭐</td></tr><tr><td style="text-align:center">102</td><td style="text-align:center"><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">二叉树的层序遍历</a></td><td style="text-align:center">⭐</td></tr><tr><td style="text-align:center">235</td><td style="text-align:center"><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/">二叉搜索树最近公共祖先</a></td><td style="text-align:center">⭐⭐</td></tr><tr><td style="text-align:center">98</td><td style="text-align:center"><a href="https://leetcode.cn/problems/validate-binary-search-tree/">验证二叉搜索树</a></td><td style="text-align:center">🌙</td></tr><tr><td style="text-align:center">2368</td><td style="text-align:center"><a href="https://leetcode.cn/problems/reachable-nodes-with-restrictions/">受限制条件下可达到的节点数</a></td><td style="text-align:center">🌙⭐</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><hr><p><strong>二分法</strong></p><table><thead><tr><th style="text-align:center">题号</th><th style="text-align:center">名称</th><th style="text-align:center">难度</th></tr></thead><tbody><tr><td style="text-align:center">704</td><td style="text-align:center"><a href="https://leetcode.cn/problems/binary-search/">二分查找</a></td><td style="text-align:center">⭐</td></tr><tr><td style="text-align:center">278</td><td style="text-align:center"><a href="https://leetcode.cn/problems/first-bad-version/">第一个错误版本</a></td><td style="text-align:center">⭐</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><hr><p><strong>滑动窗口+双指针</strong></p><table><thead><tr><th style="text-align:center">题号</th><th style="text-align:center">名称</th><th style="text-align:center">难度</th></tr></thead><tbody><tr><td style="text-align:center">424</td><td style="text-align:center"><a href="https://leetcode.cn/problems/binary-search/">替换后的最长重复字符</a></td><td style="text-align:center">🌙</td></tr><tr><td style="text-align:center">438</td><td style="text-align:center"><a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/">找到字符串中所有字母异位值</a></td><td style="text-align:center">🌙</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><hr><p><strong>优先队列+堆</strong></p><table><thead><tr><th style="text-align:center">题号</th><th style="text-align:center">名称</th><th style="text-align:center">难度</th></tr></thead><tbody><tr><td style="text-align:center">1046</td><td style="text-align:center"><a href="https://leetcode.cn/problems/last-stone-weight/">最后一块石头的重量</a></td><td style="text-align:center">🌟</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">一些小小的总结和分析！</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="总结" scheme="http://example.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Python中:=符号的用法</title>
    <link href="http://example.com/2022/08/06/%E3%80%90Python%E3%80%91%20=%E7%AC%A6%E5%8F%B7/"/>
    <id>http://example.com/2022/08/06/%E3%80%90Python%E3%80%91%20=%E7%AC%A6%E5%8F%B7/</id>
    <published>2022-08-06T15:58:10.090Z</published>
    <updated>2022-08-22T10:55:03.203Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>是不是经常看到:=符号而又百思不得其解呢</p></blockquote><h2 id="栗子">栗子</h2><p>话不多说，我们直接上例子!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">321</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(v:=a)</span><br><span class="line"><span class="built_in">print</span>(v)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">321</span></span><br><span class="line"><span class="string">321</span></span><br><span class="line"><span class="string">321</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>对数字有着某种规律的话，对其他类型是否有效呢?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 再来看一个简单的栗子</span></span><br><span class="line">a=<span class="built_in">input</span>() <span class="comment"># &quot;abcd&quot;</span></span><br><span class="line"><span class="built_in">print</span>(v:=a)</span><br><span class="line"><span class="built_in">print</span>(v)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">abcd</span></span><br><span class="line"><span class="string">abcd</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>从上述的两个栗子我们可以发现，<code>:=</code>符号的作用是在表达式内获取变量值并赋给新变量。</p><p>好像他的返回值也挺有意思的？我们进一步观察:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">7</span></span><br><span class="line"><span class="built_in">print</span>(V:=(a+<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(V)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">9</span></span><br><span class="line"><span class="string">9</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>没错了，不但能够将表达式的值赋给变量，还能够再向上返回这个值。</p><h2 id="总结">总结</h2><p><code>:=</code>符号不能单独作为一个语句使用，一般是嵌套在函数内部，用于中间层获取返回值。</p><p>可以类似于A给B打电话，C偷听了他们的内容，并且记下来了。此时A和B依旧在正常通话。</p><p>其实就是个<code>语法糖</code>一样的东西啦</p><h2 id="案例">案例</h2><p>数据分析，要求从微信接龙中随机抽取<code>35</code>名选手参加毕业典礼。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">s:<span class="built_in">str</span>,k:<span class="built_in">int</span>=<span class="number">35</span></span>)-&gt;<span class="literal">None</span>:</span><br><span class="line"></span><br><span class="line">    hashmap=defaultdict(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(s) <span class="keyword">as</span> f:</span><br><span class="line">        nameList=f.readlines()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nameList:</span><br><span class="line">        hashmap[val[<span class="number">0</span>]]=(val:=i.split(<span class="string">&quot;.&quot;</span>))[<span class="number">1</span>].strip(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> random.sample(<span class="built_in">range</span>(<span class="number">1</span>,(l:=<span class="built_in">len</span>(hashmap))+<span class="number">1</span>),l-k <span class="keyword">if</span> l&gt;k <span class="keyword">else</span> <span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(hashmap[<span class="built_in">str</span>(i)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">solve(<span class="string">r&quot;C:\Users\lenovo\Desktop\新建 XLS 工作表.txt&quot;</span>)</span><br></pre></td></tr></table></figure><p>我们来做个小练习吧~</p><hr><h2 id="练习题">练习题</h2><p>给定一个单词列表 <code>words</code>和一个整数 <code>k </code>，返回前<code>k</code>个出现次数最多的单词。</p><p>返回的答案应该按单词出现频率由高到低排序。如果不同的单词有相同出现频率， 按<code>字典顺序</code> 排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">topKFrequent</span>(<span class="params">self, words: <span class="type">List</span>[<span class="built_in">str</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="comment"># 先获取到一个单词hash表 Counter(words)</span></span><br><span class="line">        <span class="comment"># 题目所给的需要进行的排序优先度为： 数量&gt;字典序</span></span><br><span class="line">        <span class="comment"># 我们可以考虑采用sorted函数，通过关键词 key=lambda x:(数量,字典序) 进行排序</span></span><br><span class="line">        <span class="comment"># 当然，数量是从小到大，而字典序是从大到小，这里需要控制</span></span><br><span class="line">        <span class="comment"># 所以最终的语句为:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sorted</span>((cnt:=Counter(words)).keys(),key=<span class="keyword">lambda</span> x:(-cnt[x],x))[:k]</span><br></pre></td></tr></table></figure><p>这个语句等价于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">topKFrequent</span>(<span class="params">self, words, k: <span class="built_in">int</span></span>):</span><br><span class="line">        cnt=Counter(words)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sorted</span>(cnt.keys(),key=<span class="keyword">lambda</span> x:(-cnt[x],x))[:k]</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">Python中:=符号的用法</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>【二】语态、倒装、强调、省略</title>
    <link href="http://example.com/2022/08/04/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91%E8%A2%AB%E5%8A%A8%E5%BC%BA%E8%B0%83%E5%80%92%E8%A3%85%E7%9C%81%E7%95%A5/"/>
    <id>http://example.com/2022/08/04/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91%E8%A2%AB%E5%8A%A8%E5%BC%BA%E8%B0%83%E5%80%92%E8%A3%85%E7%9C%81%E7%95%A5/</id>
    <published>2022-08-04T07:23:55.861Z</published>
    <updated>2022-08-19T02:07:23.410Z</updated>
    
    <content type="html"><![CDATA[<h2 id="被动语态">被动语态</h2><p>与主动语态相对，被动语态将焦点放在<code>动作的承受者</code>上。</p><img src="/2022/08/04/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91%E8%A2%AB%E5%8A%A8%E5%BC%BA%E8%B0%83%E5%80%92%E8%A3%85%E7%9C%81%E7%95%A5/image-20220804152517953.png" alt="image-20220804152517953" style="zoom: 50%;"><blockquote><p>构成: &lt;承受者&gt; be + 过去分词 + （by + &lt;动作执行者&gt;）</p></blockquote><p><strong>例句</strong></p><ul><li>His bicycle was stolen.</li><li>The building has been built in 2000.</li></ul><blockquote><p>注意啦，被动语态只有主语没有宾语，by xxx 是动作的承接者，作状语</p></blockquote><h3 id="什么时候需要使用被动语态呢？">什么时候需要使用被动语态呢？</h3><ol><li>不知道动作的执行者，或是没有必要知道<ul><li>Paper is made from wood.</li><li>He was wounded in the fight.</li><li>Electricity is used to run machines.</li></ul></li><li>需要强调动作的对象时<ul><li>Calculator can’t be used in the maths exam.</li><li>He was awarded first prize in that contest.</li></ul></li><li>让语气婉转，或是刻意隐藏信息<ul><li>The construction of the new lab must be completed by the end of next month.</li></ul></li></ol><h3 id="被动语态的结构">被动语态的结构</h3><ul><li>一般现在时: be + p. p 及物动词的过去分词</li><li>一般过去时: was / were + p. p</li><li>一般将来时: shall / will be + p. p</li><li>现在完成时: have / has been + p. p</li><li>现在进行时: be + being + p. p</li><li>过去将来时: should / would be + p. p</li><li>情态动词: 情态动词 + be + p. p</li></ul><h3 id="如何将主动变成被动呢？">如何将主动变成被动呢？</h3><ol><li>从句子的意义上看，找出<code>被完成</code>的事物<ul><li>主动: People speak English in many countries.</li><li>被动: English is spoken by People in many countries.</li></ul></li><li>从语法的角度看，把<code>宾语</code>改成主语<ul><li>主动: Xiao Liu has invited you to a lunch party.</li><li>被动: You has been invited to a lunch party by Xiao Liu.</li></ul></li></ol><h3 id="特殊情况">特殊情况</h3><p>在主动变成被动时，需要留意以下几个特殊情况：</p><ol><li>含双宾语的主动变成被动时，有两种方法：<ol><li>间接宾语变成主语，直接宾语保持不变</li><li>直接宾语变位主语，间接宾语用<code>to</code>或<code>for</code>引导</li></ol></li></ol><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">He told us a story.</span><br><span class="line"></span><br><span class="line"><span class="comment"># type 1</span></span><br><span class="line">We were told a story (by him).</span><br><span class="line"></span><br><span class="line"><span class="comment"># type 2</span></span><br><span class="line">A story was told to us (by him).</span><br></pre></td></tr></table></figure><ol start="2"><li>短语动词的被动需要视作一个整体，不能省去动词后的介词或副词</li><li>省略的to变成被动时需要补上</li><li>动词不定式的被动语态为<code>to be ＋过去分词</code></li><li>以疑问代词开头的疑问句转换成被动句时要注意词序：应将主动句中的疑问代词改为介词by的宾语，但仍然放在句子开头</li></ol><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Who has broken the cup?</span><br><span class="line"></span><br><span class="line">By Whom has the cup been broken?</span><br></pre></td></tr></table></figure><img src="/2022/08/04/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91%E8%A2%AB%E5%8A%A8%E5%BC%BA%E8%B0%83%E5%80%92%E8%A3%85%E7%9C%81%E7%95%A5/image-20220804205826411.png" alt="image-20220804205826411" style="zoom:50%;"><hr><h2 id="倒装句">倒装句</h2><p>倒装句作为英语的一种修辞手法，可以用来强调<code>主语</code>。一般呢，常见于书面用语。</p><p>比如：</p><ul><li>你吃<code>胡萝卜</code>了吗？</li><li>吃胡萝卜了吗，<code>你</code>？</li></ul><h3 id="一、完全倒装">一、完全倒装</h3><p>完全倒装的谓语动词完全放在主语前了，一般情况下，用于副词/介词短语在句首的倒装，和主语补语的倒装。</p><p><strong>地点副词在句首的倒装</strong></p><p>关键词: <code>here</code>，<code>there</code></p><p>例句: There <code>goes</code> the last bus.</p><p><strong>时间副词在句首的倒装</strong></p><p>关键词: <code>now</code>，<code>then</code></p><p>例句: Now <code>comes</code> the wolf’s turn.</p><p><strong>表运动方向在句首的倒装</strong></p><p>关键词: <code>in</code>，<code>out</code>，<code>up</code>，<code>down</code>，<code>away</code></p><p>例句: Up drive the car on the road.</p><p><strong>表语的倒装</strong></p><p>关键词：形容词、分词、介词短语、<code>such</code></p><p>例句：Seated on the ground is a group of rabbits.</p><p>Such were the wolf’s trick.</p><hr><h3 id="二、部分倒装">二、部分倒装</h3><p>分离助动词和谓语动词，将助动词提前。</p><p>主要用在：</p><ul><li>句首有否定意义时</li><li>句首有<code>only</code>时</li><li><code>if...should...</code>构成虚拟语气时</li><li>固定句型</li></ul><p><strong>句首有否定意义的倒装</strong></p><p>Never befor have I eaten such a delicious carrot.</p><p><strong>句首有Only的倒装</strong></p><p>Only in this way can we grow delicious carrots.</p><p>Only then did the rabbit meet the wolf.</p><p><strong>if…should…构成虚拟的倒装</strong></p><p>正常语序：If I should win the lottery, I would buy a huge pile of carrots.</p><p>倒装: Shoud I win the lottery, I would buy a huge pile of carrots.</p><p><strong>固定句型</strong></p><p>so do I.</p><p>neither/nor can the wolf.</p><hr><h3 id="三、形式倒装">三、形式倒装</h3><p>形式倒装仅仅是将强调内容提前，而不对谓语动词和助动词进行修改。</p><p>主要有如下情况：</p><ul><li>感叹句</li><li>比较句 the more the more</li><li>however whatever 引导让步状语从旧</li><li>as though 引导让步状语从句</li></ul><p><strong>感叹句</strong></p><p>What a delicious carrot it is!</p><p><strong>比较句</strong></p><p>The more carrots you eat, the healthier you become.</p><p><strong>让步状语</strong></p><p>However long this video is, you should watch it till the end.</p><p>Much as he likes the carrot, he doesn’t want to eat it.</p><img src="/2022/08/04/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91%E8%A2%AB%E5%8A%A8%E5%BC%BA%E8%B0%83%E5%80%92%E8%A3%85%E7%9C%81%E7%95%A5/image-20220804221342215.png" alt="image-20220804221342215" style="zoom:50%;"><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">常用的英语语法！chapter 2</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="英语" scheme="http://example.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>【一】 句子成分</title>
    <link href="http://example.com/2022/08/03/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91%E5%8F%A5%E5%AD%90%E6%88%90%E5%88%86/"/>
    <id>http://example.com/2022/08/03/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91%E5%8F%A5%E5%AD%90%E6%88%90%E5%88%86/</id>
    <published>2022-08-03T15:12:59.733Z</published>
    <updated>2022-08-04T14:14:37.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="句子成分">句子成分</h2><hr><h3 id="简单句">简单句</h3><p>语句中的最小单元是<code>简单句</code>(simple sentences)，而简单句的构成如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>主</mtext><msubsup><mtext>语</mtext><mrow><mi>s</mi><mi>u</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><mrow><mtext>人</mtext><mi mathvariant="normal">/</mi><mtext>物</mtext></mrow></msubsup><mo>+</mo><mtext>谓</mtext><msub><mtext>语</mtext><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>i</mi><mi>c</mi><mi>a</mi><mi>t</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">主语^{人/物}_{subject}+谓语_{predicate}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4822em;vertical-align:-0.4374em;"></span><span class="mord cjk_fallback">主</span><span class="mord"><span class="mord cjk_fallback">语</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.3987em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">bj</span><span class="mord mathnormal mtight">ec</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">人</span><span class="mord mtight">/</span><span class="mord cjk_fallback mtight">物</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4374em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord cjk_fallback">谓</span><span class="mord"><span class="mord cjk_fallback">语</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">re</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>谓语的核心是谓语动词，但谓语并不等同于谓语动词哦。</p><blockquote><p>句子成分和词性并没有一一对应的哦</p></blockquote><p><img src="/2022/08/03/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91%E5%8F%A5%E5%AD%90%E6%88%90%E5%88%86/image-20220803232917051.png" alt="image-20220803232917051"></p><p>我们来梳理一下~</p><p>英语的语法与中文不同，遵循严格的格式，其中最基本的单元就是<code>主语+谓语</code>构成的简单句。主语是一个工人，谓语就是工人手上的镰刀和锄头。有时候，工人会拿着锄头去割稻子，稻子就是锄头的施力对象，也就是<code>宾语</code>。有时候，稻子染上了白化病，这个白化让稻子变白了，白色便是稻子的修饰颜色，换句话说，叫做<code>定语</code>，它作为一层<code>外壳</code>固定在了宾语上。那这个稻子是水稻还是旱稻呢？工人告诉我们，是水稻。水稻，就是对稻子进行进一步的补充，叫做<code>宾语补足语</code>。中午，工人卖力地砍着稻子，而中午和卖力，就是<code>状语</code>，状语让句子有了无限的可能。</p><p>我们对状语、定语、表语的概念可以做个简单的区分：</p><p>表语最简单，只用来修饰或说明主语。而定语，一般只套在名词或代词上，作为挂件让其功能更加完善。状语就牛逼多啦，副词、形容词、动词、全句，他都能进行修饰，甚至是传递时间、地点、原因、目的、结果、方式、程度等，这些对句子加以完善的成分都是状语。(反正排除法啦，看起来怪怪的算在状语头上)</p><h3 id="复合句">复合句</h3><p>两个简单句中间的元素，叫做<code>连词</code>，例如<code>and</code>、<code>or</code>、<code>then</code>等等~连词的作用是连接两个简单句！</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>A</mi><mtext> </mtext><mi>a</mi><mi>n</mi><mi>d</mi><mtext> </mtext><mi>B</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">A\ and \ B.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">A</span><span class="mspace"> </span><span class="mord mathnormal">an</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord">.</span></span></span></span></span></p><h3 id="复杂句">复杂句</h3><p>而当某个简单句充当另一个简单句的句子成分时，我们也就叫复杂句或者<code>主从复合句</code>，被充当的称为<code>主句</code>，充当的称为<code>从句</code>。例如：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>H</mi><mi>e</mi><mtext> </mtext><mi>i</mi><mi>s</mi><mtext> </mtext><mi>a</mi><mtext> </mtext><mi>m</mi><mi>a</mi><mi>n</mi><mtext> </mtext><mi>w</mi><mi>h</mi><mi>o</mi><mtext> </mtext><mi>l</mi><mi>i</mi><mi>k</mi><mi>e</mi><mi>s</mi><mtext> </mtext><mi>p</mi><mi>l</mi><mi>a</mi><mi>y</mi><mtext> </mtext><mi>g</mi><mi>a</mi><mi>m</mi><mi>e</mi><mi>s</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">He\ is \ a\ man\ who\ likes\ play\ games. </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">He</span><span class="mspace"> </span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mspace"> </span><span class="mord mathnormal">a</span><span class="mspace"> </span><span class="mord mathnormal">man</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">h</span><span class="mord mathnormal">o</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.03148em;">ik</span><span class="mord mathnormal">es</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.01968em;">pl</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">am</span><span class="mord mathnormal">es</span><span class="mord">.</span></span></span></span></span></p><hr><h2 id="句子分类">句子分类</h2><p><img src="/2022/08/03/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91%E5%8F%A5%E5%AD%90%E6%88%90%E5%88%86/image-20220804000032303.png" alt="image-20220804000032303"></p><hr><h3 id="一些感想">一些感想</h3><p>就像图像有着最小单元，句子也有着属于它的最小单位，这就是 <s>你的工人爷爷</s> 简单句!</p><p>从简单句的结构来看，句子能够拆解成八大块，分别是主谓宾、定状补、同位语、插入语，谓语未必是动词，动词也未必是谓语，但谓语动词是可以独立做谓语的。</p><p>多个简单句集成了复合句，复合句根据组合方式是拼接还是嵌套，分为了复合句和复杂句。</p><p>根据句子本身的含义，又能分成四大天王：陈述、疑问、祈使、感叹；其中能力最强的疑问句，手下居然还有四大天王！分别是一般疑问、反义疑问句、特殊疑问、选择疑问！</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">常用的英语语法！chapter 1</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="英语" scheme="http://example.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>伪代码</title>
    <link href="http://example.com/2022/08/03/%E3%80%90%E7%A7%91%E7%A0%94%E3%80%91%E4%BC%AA%E4%BB%A3%E7%A0%81/"/>
    <id>http://example.com/2022/08/03/%E3%80%90%E7%A7%91%E7%A0%94%E3%80%91%E4%BC%AA%E4%BB%A3%E7%A0%81/</id>
    <published>2022-08-03T09:49:20.000Z</published>
    <updated>2022-08-10T15:24:52.646Z</updated>
    
    <content type="html"><![CDATA[<h1>伪代码教程</h1><hr><blockquote><p>起一篇伪代码基础教程</p></blockquote><p>伪代码(Pseudo code)是一种介于<code>计算机语言</code>和<code>自然语言</code>间的文字和符号，是表达算法的简单而有效的方法。伪代码不需要关注底层是如何实现的，本身就是算法框架的逻辑模型。</p><h2 id="一、赋值语句">一、赋值语句</h2><p>赋值号<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>←</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A\leftarrow B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>，表示将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>的内容传递给<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>，相当于：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>=</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A=B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></p><h2 id="二、输入输出">二、输入输出</h2><p><strong>输入</strong></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mi>n</mi><mi>p</mi><mi>u</mi><mi>t</mi><mo>:</mo><mtext> </mtext><mi>i</mi><mi>n</mi><mi>p</mi><mi>u</mi><mi>t</mi><mtext> </mtext><mi>p</mi><mi>a</mi><mi>r</mi><mi>a</mi><mi>m</mi><mi>e</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>s</mi><mtext> </mtext><mi>A</mi><mo separator="true">,</mo><mi>B</mi><mo separator="true">,</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">Input:\ input\ parameters\ A,B,C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">in</span><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mspace"> </span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">am</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mord mathnormal">ers</span><span class="mspace"> </span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p><p><strong>输出</strong></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mi>u</mi><mi>t</mi><mi>p</mi><mi>u</mi><mi>t</mi><mo>:</mo><mtext> </mtext><mi>o</mi><mi>u</mi><mi>t</mi><mi>p</mi><mi>u</mi><mi>t</mi><mtext> </mtext><mi>r</mi><mi>e</mi><mi>s</mi><mi>u</mi><mi>l</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">Output:\ output \ result</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal">u</span><span class="mord mathnormal">tp</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">tp</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mspace"> </span><span class="mord mathnormal">res</span><span class="mord mathnormal">u</span><span class="mord mathnormal">lt</span></span></span></span></p><h2 id="三、条件语句">三、条件语句</h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mi>f</mi><mtext> </mtext><mi>A</mi><mtext> </mtext><mi>t</mi><mi>h</mi><mi>e</mi><mi>n</mi><mtext> </mtext><mi>B</mi><mspace linebreak="newline"></mspace><mi>E</mi><mi>l</mi><mi>s</mi><mi>e</mi><mtext> </mtext><mi>C</mi><mspace linebreak="newline"></mspace><mi>E</mi><mi>n</mi><mi>d</mi><mtext> </mtext><mi>i</mi><mi>f</mi></mrow><annotation encoding="application/x-tex">If\ A \ then \ B\\Else \ C\\End\ if</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace"> </span><span class="mord mathnormal">A</span><span class="mspace"> </span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">El</span><span class="mord mathnormal">se</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span></span></p><h2 id="四、循环语句">四、循环语句</h2><h3 id="4-1-for循环">4.1 for循环</h3><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mi>o</mi><mi>r</mi><mtext> </mtext><mi>i</mi><mo>=</mo><mn>1</mn><mo>→</mo><mi>i</mi><mo>=</mo><mi>N</mi><mtext> </mtext><mi>d</mi><mi>o</mi><mspace linebreak="newline"></mspace><mi>e</mi><mi>n</mi><mi>d</mi><mtext> </mtext><mi>f</mi><mi>o</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">for\ i=1\rightarrow i=N\ do\\end \ for</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mspace"> </span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace"> </span><span class="mord mathnormal">d</span><span class="mord mathnormal">o</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span></span></span></span></span></p><h3 id="4-2-while循环">4.2 while循环</h3><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>W</mi><mi>h</mi><mi>i</mi><mi>l</mi><mi>e</mi><mtext> </mtext><mi>A</mi><mspace linebreak="newline"></mspace><mi>Y</mi><mi>o</mi><mi>u</mi><mi>r</mi><mtext> </mtext><mi>s</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>c</mi><mi>e</mi><mi>s</mi><mspace linebreak="newline"></mspace><mi>E</mi><mi>n</mi><mi>d</mi><mtext> </mtext><mi>w</mi><mi>h</mi><mi>i</mi><mi>l</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">While \ A\\Your\ sentences\\End \ while</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">Whi</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mspace"> </span><span class="mord mathnormal">A</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace"> </span><span class="mord mathnormal">se</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">ces</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">hi</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span></span></span></span></span></p><hr><p>一个简单的<code>栗子</code>🔶</p><p><img src="/2022/08/03/%E3%80%90%E7%A7%91%E7%A0%94%E3%80%91%E4%BC%AA%E4%BB%A3%E7%A0%81/image-20220803174851918.png" alt="image-20220803174851918"></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">基础的伪代码教程~再也不用担心看不懂论文啦</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【数论】欧式筛</title>
    <link href="http://example.com/2022/08/03/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E6%AC%A7%E6%8B%89%E7%AD%9B/"/>
    <id>http://example.com/2022/08/03/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E6%AC%A7%E6%8B%89%E7%AD%9B/</id>
    <published>2022-08-03T04:36:00.003Z</published>
    <updated>2022-08-03T11:08:47.641Z</updated>
    
    <content type="html"><![CDATA[<p>总所周知，质数(prime number)又称素数，除了<code>1</code>和<code>自身</code>外，不能被其他的自然数整除。</p><p>那么我们今天就来看看一个简单的寻找素数的算法，欧拉筛。欧拉筛是在埃氏筛的基础上做了一定的改进，大幅降低时间复杂度。</p><h2 id="欧拉筛">欧拉筛</h2><p><strong>输入</strong></p><ul><li>区间范围n</li></ul><p><strong>输出</strong></p><ul><li>素数列表</li></ul><p><strong>思想</strong></p><ul><li>通过打表的方式，构建素数表，这张表包含了<code>n</code>个元素，包括素数和合数</li><li>素数是无法通过其他素数相乘得到的，利用这一原理，可以将所有能够被素数相乘得到的值设置为合数</li></ul><p><strong>过程</strong></p><ul><li>创建一个大小为<code>n</code>的列表<code>isPrime</code>，元素值代表是否为素数。</li><li>创建一个新的可变列表<code>prime</code>，元素值代表素数</li><li>遍历<code>isPrime</code>，若元素值为<code>1</code>，则将其加入<code>prime</code>列表。</li><li>将该元素与<code>prime</code>中的所有素数相乘：<ul><li>若该元素为素数，那么会遍历<code>prime</code>列表，得到的结果是最小素数相乘的合数</li><li>若该元素为合数，那么将为其添加新的最小质数，直到遇到初始质数。(同样也是最小质数相乘)</li></ul></li></ul><p><strong>算法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="number">1e5</span>+<span class="number">1</span>)</span><br><span class="line">prime=[]</span><br><span class="line">isPrime=[<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line"><span class="comment"># 欧拉筛构建1-n的所有质数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> isPrime[i]==<span class="number">1</span>:</span><br><span class="line">        <span class="comment"># 质数加入队列</span></span><br><span class="line">        prime.append(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除质数集构成的合数</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(prime)):</span><br><span class="line">        <span class="keyword">if</span> prime[j]*i&lt;n:</span><br><span class="line">            <span class="comment"># 合数去掉了</span></span><br><span class="line">            isPrime[prime[j]*i]=<span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 通过最小质数来构建即可</span></span><br><span class="line">        <span class="keyword">if</span> i%prime[j]==<span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 当然第一次遇到还是要乘上去的，这样才会倍增</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(prime)</span><br></pre></td></tr></table></figure><p><strong>复杂度</strong></p><p>时间复杂度约等于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>，它只对每个元素遍历一次。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">计算素数的不二之选</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数学" scheme="http://example.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>记忆学入门</title>
    <link href="http://example.com/2022/08/03/%E3%80%90%E8%AE%B0%E5%BF%86%E5%AD%A6%E3%80%91%E8%AE%B0%E5%BF%86%E5%AD%A6%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2022/08/03/%E3%80%90%E8%AE%B0%E5%BF%86%E5%AD%A6%E3%80%91%E8%AE%B0%E5%BF%86%E5%AD%A6%E5%85%A5%E9%97%A8/</id>
    <published>2022-08-02T17:04:02.000Z</published>
    <updated>2022-08-10T15:23:50.689Z</updated>
    
    <content type="html"><![CDATA[<h1>记忆学入门</h1><hr><h2 id="Lesson-1-记忆术入门">Lesson 1  记忆术入门</h2><blockquote><p>爱因斯坦曾说，如果让他花一个小时解决问题，那么92%的时间用来认知问题，而解决问题只需要8%的时间。</p></blockquote><p>一个好的框架，比漫无目的的遍历好得多。</p><p>我们先来看看记忆的框架，总所周知，影响主动记忆的四个重要因子为：</p><ul><li>注意力</li><li>兴趣</li><li>自信心</li><li>好方法</li></ul><p>通过不断的训练，能够将<code>注意力</code>迅速集中在感<code>兴趣</code>的区域，形成正反馈后，增强<code>自信心</code>。当然，训练是离不开<code>好方法</code>的。</p><h3 id="万能记忆公式">万能记忆公式</h3><ul><li>用她去了解她</li><li>用你去理解她</li><li>用记忆法刻意记忆她</li></ul><p>参悟本源，吸收归纳，烙印神魂。</p><p><strong>记忆法</strong>的灵魂在于<strong>参与感</strong>！</p><p>细说的话，记忆法可以归纳为四步学习法：</p><img src="/2022/08/03/%E3%80%90%E8%AE%B0%E5%BF%86%E5%AD%A6%E3%80%91%E8%AE%B0%E5%BF%86%E5%AD%A6%E5%85%A5%E9%97%A8/image-20220803002451441.png" alt="image-20220803002451441" style="zoom: 50%;"><p><strong>例题</strong></p><img src="/2022/08/03/%E3%80%90%E8%AE%B0%E5%BF%86%E5%AD%A6%E3%80%91%E8%AE%B0%E5%BF%86%E5%AD%A6%E5%85%A5%E9%97%A8/image-20220803003611995.png" alt="image-20220803003611995" style="zoom:33%;"><p>摄取信息：</p><p>​这是一段概念性文字描述。我们试着去理解其中的内容，也就是什么是生产力，怎么样算生产力？敲代码，打猎，生活，财米油盐是不是都是生产力？那么，生产力作为一种力，肯定不能凭空产生呀，需要借助什么来实现呢？</p><p>处理信息：</p><ul><li>化简为繁<ul><li>关键字：生产力、征服自然、改造自然、物质生活能力</li><li>关键字：劳动者、生产工具、劳动对象</li></ul></li></ul><p>存储信息：</p><ul><li>理解知识信息</li><li>关键词转化为图像记忆</li><li>运用四大记忆方法记忆(联想、绘图、数字、宫殿)</li><li>创建回忆线索点</li><li>多次复习</li></ul><p><strong>简单的记忆宫殿练习</strong></p><img src="/2022/08/03/%E3%80%90%E8%AE%B0%E5%BF%86%E5%AD%A6%E3%80%91%E8%AE%B0%E5%BF%86%E5%AD%A6%E5%85%A5%E9%97%A8/image-20220803005534833.png" alt="image-20220803005534833" style="zoom:33%;"><img src="/2022/08/03/%E3%80%90%E8%AE%B0%E5%BF%86%E5%AD%A6%E3%80%91%E8%AE%B0%E5%BF%86%E5%AD%A6%E5%85%A5%E9%97%A8/image-20220803005552438.png" alt="image-20220803005552438" style="zoom: 25%;"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">59 23 07 81 64 06 28 62 08 99</span><br></pre></td></tr></table></figure><img src="/2022/08/03/%E3%80%90%E8%AE%B0%E5%BF%86%E5%AD%A6%E3%80%91%E8%AE%B0%E5%BF%86%E5%AD%A6%E5%85%A5%E9%97%A8/image-20220803005705359.png" alt="image-20220803005705359" style="zoom: 33%;"><img src="/2022/08/03/%E3%80%90%E8%AE%B0%E5%BF%86%E5%AD%A6%E3%80%91%E8%AE%B0%E5%BF%86%E5%AD%A6%E5%85%A5%E9%97%A8/image-20220803005724860.png" alt="image-20220803005724860" style="zoom:33%;"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">86 28 03 48 25 34 21 17 06 79</span><br></pre></td></tr></table></figure><h3 id="总结-v2">总结</h3><p>好的记忆力跟信息的输入输出相关，如何保证信息高效的输入呢？那就需要专注力，而专注力能够通过兴趣提升，不断的正反馈能够增强自信，自信也能提高专注力。当然，好的方法也必不可少。</p><p>我们在承载信息的时候，首先要明确的就是信息的形态、核心，是概念还是理论，是方法还是综述。掌握信息的核心本质，理解其中的思想，也就是<code>用她去了解她</code>。接下来，我们就可以通过构建自己的脑回路，将这个信息以自己的想法进行输出，这部分至关重要，也就是<code>用你去理解她</code>，我们可以借助关键字、化简成图的方式，结合记忆法进行辅助记忆。</p><p>当然，存储的信息一定要打下锚点，不然飘到什么地方去了就很难找了不是吗。</p><p>常复盘，这也是关键。</p><hr><h2 id="Lesson-2-注意力">Lesson 2  注意力</h2><p>增强注意力的关键，还是需要<code>参与感</code>，也就是一定的<code>兴趣</code>，兴致勃勃地研究，直到未知的内容显现出来。</p><blockquote><p>可以通过找茬游戏训练！</p></blockquote><p>注意力训练：</p><ul><li>保持腹式呼吸</li><li>眼睛自然睁大</li><li>不要眨眼，盯着黑点看，直到黑点阴影全部变成白色</li><li>一次时间约两分钟</li></ul><img src="/2022/08/03/%E3%80%90%E8%AE%B0%E5%BF%86%E5%AD%A6%E3%80%91%E8%AE%B0%E5%BF%86%E5%AD%A6%E5%85%A5%E9%97%A8/image-20220803153409835.png" alt="image-20220803153409835" style="zoom:50%;"><p><strong>思考</strong></p><p>注意力受制于我们的意志力，注意力在哪种下因，记忆力在哪收下果。</p><p>我们需要关注自己的思维波动，及时的把思想拉回锚点。做一做注意力训练也是件好事。</p><hr><h2 id="Lesson-3-数字编码">Lesson 3  数字编码</h2><p>啊下面是一些数字编码，内容实在是太多了，就放到另外的网页了。<a href="https://www.renrendoc.com/paper/88829238.html">https://www.renrendoc.com/paper/88829238.html</a></p><p><strong>type 1</strong></p><table><thead><tr><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th></tr></thead><tbody><tr><td style="text-align:center">呼啦圈</td><td style="text-align:center">蜡烛</td><td style="text-align:center">天鹅</td><td style="text-align:center">耳朵</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">6</td><td style="text-align:center">7</td></tr><tr><td style="text-align:center">旗子</td><td style="text-align:center">钩子</td><td style="text-align:center">汤勺</td><td style="text-align:center">镰刀</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">9</td><td style="text-align:center">10</td><td style="text-align:center">11</td></tr><tr><td style="text-align:center">葫芦</td><td style="text-align:center">哨子</td><td style="text-align:center">石头</td><td style="text-align:center">梯子</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">13</td><td style="text-align:center">14</td><td style="text-align:center">15</td></tr><tr><td style="text-align:center">椅儿</td><td style="text-align:center">医生</td><td style="text-align:center">钥匙</td><td style="text-align:center">鹦鹉</td></tr><tr><td style="text-align:center">16</td><td style="text-align:center">17</td><td style="text-align:center">18</td><td style="text-align:center">19</td></tr><tr><td style="text-align:center">石榴</td><td style="text-align:center">仪器</td><td style="text-align:center">糖葫芦</td><td style="text-align:center">衣钩</td></tr><tr><td style="text-align:center">20</td><td style="text-align:center">21</td><td style="text-align:center">22</td><td style="text-align:center">23</td></tr><tr><td style="text-align:center">香烟</td><td style="text-align:center">鳄鱼</td><td style="text-align:center">22娘</td><td style="text-align:center">和尚</td></tr><tr><td style="text-align:center">24</td><td style="text-align:center">25</td><td style="text-align:center">26</td><td style="text-align:center">27</td></tr><tr><td style="text-align:center">闹钟</td><td style="text-align:center">二胡</td><td style="text-align:center">河流</td><td style="text-align:center">耳机</td></tr><tr><td style="text-align:center">28</td><td style="text-align:center">29</td><td style="text-align:center">30</td><td style="text-align:center">31</td></tr><tr><td style="text-align:center">恶霸</td><td style="text-align:center">恶球</td><td style="text-align:center">三轮车</td><td style="text-align:center">鲨鱼</td></tr></tbody></table><hr><p><strong>type 2</strong></p><table><thead><tr><th style="text-align:center">32</th><th style="text-align:center">33</th><th style="text-align:center">34</th><th style="text-align:center">35</th></tr></thead><tbody><tr><td style="text-align:center">扇儿</td><td style="text-align:center">三三娘</td><td style="text-align:center">三丝</td><td style="text-align:center">珊瑚</td></tr><tr><td style="text-align:center">36</td><td style="text-align:center">37</td><td style="text-align:center">38</td><td style="text-align:center">39</td></tr><tr><td style="text-align:center">山路</td><td style="text-align:center">山鸡</td><td style="text-align:center">妇女</td><td style="text-align:center">山丘</td></tr><tr><td style="text-align:center">40</td><td style="text-align:center">41</td><td style="text-align:center">42</td><td style="text-align:center">43</td></tr><tr><td style="text-align:center">司令</td><td style="text-align:center">蜥蜴</td><td style="text-align:center">柿儿</td><td style="text-align:center">尸山</td></tr><tr><td style="text-align:center">44</td><td style="text-align:center">45</td><td style="text-align:center">46</td><td style="text-align:center">47</td></tr><tr><td style="text-align:center">蛇</td><td style="text-align:center">师傅</td><td style="text-align:center">饲料</td><td style="text-align:center">司机</td></tr><tr><td style="text-align:center">48</td><td style="text-align:center">49</td><td style="text-align:center">50</td><td style="text-align:center">51</td></tr><tr><td style="text-align:center">石板</td><td style="text-align:center">火眼金睛</td><td style="text-align:center">五菱宏光</td><td style="text-align:center">工人</td></tr><tr><td style="text-align:center">52</td><td style="text-align:center">53</td><td style="text-align:center">54</td><td style="text-align:center">55</td></tr><tr><td style="text-align:center">孤儿</td><td style="text-align:center">五年高考</td><td style="text-align:center">青年</td><td style="text-align:center">托马斯</td></tr><tr><td style="text-align:center">56</td><td style="text-align:center">57</td><td style="text-align:center">58</td><td style="text-align:center">59</td></tr><tr><td style="text-align:center">蜗牛</td><td style="text-align:center">武器</td><td style="text-align:center">尾巴</td><td style="text-align:center">蜈蚣</td></tr></tbody></table><hr><p><strong>type 3</strong></p><table><thead><tr><th style="text-align:center">60</th><th style="text-align:center">61</th><th style="text-align:center">62</th><th style="text-align:center">63</th></tr></thead><tbody><tr><td style="text-align:center">榴莲</td><td style="text-align:center">儿童</td><td style="text-align:center">牛儿</td><td style="text-align:center">流沙</td></tr><tr><td style="text-align:center">64</td><td style="text-align:center">65</td><td style="text-align:center">66</td><td style="text-align:center">67</td></tr><tr><td style="text-align:center">螺丝</td><td style="text-align:center">尿壶</td><td style="text-align:center">溜溜球</td><td style="text-align:center">流星</td></tr><tr><td style="text-align:center">68</td><td style="text-align:center">69</td><td style="text-align:center">70</td><td style="text-align:center">71</td></tr><tr><td style="text-align:center">喇叭</td><td style="text-align:center">太极</td><td style="text-align:center">麒麟</td><td style="text-align:center">机翼</td></tr><tr><td style="text-align:center">72</td><td style="text-align:center">73</td><td style="text-align:center">74</td><td style="text-align:center">75</td></tr><tr><td style="text-align:center">企鹅</td><td style="text-align:center">花旗参</td><td style="text-align:center">骑士</td><td style="text-align:center">媳妇</td></tr><tr><td style="text-align:center">76</td><td style="text-align:center">77</td><td style="text-align:center">78</td><td style="text-align:center">79</td></tr><tr><td style="text-align:center">汽油</td><td style="text-align:center">七七</td><td style="text-align:center">青蛙</td><td style="text-align:center">气球</td></tr><tr><td style="text-align:center">80</td><td style="text-align:center">81</td><td style="text-align:center">82</td><td style="text-align:center">83</td></tr><tr><td style="text-align:center">霸凌</td><td style="text-align:center">白蚁</td><td style="text-align:center">巴尔</td><td style="text-align:center">芭蕉扇</td></tr><tr><td style="text-align:center">84</td><td style="text-align:center">85</td><td style="text-align:center">86</td><td style="text-align:center">87</td></tr><tr><td style="text-align:center">宝宝巴士</td><td style="text-align:center">吧务</td><td style="text-align:center">八路</td><td style="text-align:center">白起</td></tr></tbody></table><hr><p><strong>type 4</strong></p><table><thead><tr><th style="text-align:center">88</th><th style="text-align:center">89</th><th style="text-align:center">90</th><th style="text-align:center">91</th></tr></thead><tbody><tr><td style="text-align:center">爸爸</td><td style="text-align:center">芭蕉</td><td style="text-align:center">酒瓶</td><td style="text-align:center">秋衣</td></tr><tr><td style="text-align:center">92</td><td style="text-align:center">93</td><td style="text-align:center">94</td><td style="text-align:center">95</td></tr><tr><td style="text-align:center">球儿</td><td style="text-align:center">旧伞</td><td style="text-align:center">旧誓</td><td style="text-align:center">酒壶</td></tr><tr><td style="text-align:center">96</td><td style="text-align:center">97</td><td style="text-align:center">98</td><td style="text-align:center">99</td></tr><tr><td style="text-align:center">蝴蝶</td><td style="text-align:center">酒气</td><td style="text-align:center">酒吧</td><td style="text-align:center">舅舅</td></tr><tr><td style="text-align:center">100</td><td style="text-align:center">00</td><td style="text-align:center">01</td><td style="text-align:center">02</td></tr><tr><td style="text-align:center">💯</td><td style="text-align:center">望远镜</td><td style="text-align:center">小树</td><td style="text-align:center">铃儿</td></tr><tr><td style="text-align:center">03</td><td style="text-align:center">04</td><td style="text-align:center">05</td><td style="text-align:center">06</td></tr><tr><td style="text-align:center">灵山</td><td style="text-align:center">奥迪</td><td style="text-align:center">老虎</td><td style="text-align:center">手枪</td></tr><tr><td style="text-align:center">07</td><td style="text-align:center">08</td><td style="text-align:center">09</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">007</td><td style="text-align:center">溜冰鞋</td><td style="text-align:center">猫</td><td style="text-align:center"></td></tr></tbody></table><hr><h2 id="Lesson-4-文字转换">Lesson 4 文字转换</h2><p>奇奇怪怪的文字编码~</p><p>主要就是<code>带动感官，积极想象</code>！</p><hr><h2 id="Lesson-5-联想配对记忆四大方法">Lesson 5 联想配对记忆四大方法</h2><p>嗨，咱今天就来介绍这四大联想法：</p><ul><li>主动出击</li><li>媒婆牵线</li><li>夸张搞笑</li><li>双剑合璧</li></ul><img src="/2022/08/03/%E3%80%90%E8%AE%B0%E5%BF%86%E5%AD%A6%E3%80%91%E8%AE%B0%E5%BF%86%E5%AD%A6%E5%85%A5%E9%97%A8/image-20220806222931152.png" alt="image-20220806222931152" style="zoom:33%;"><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">有关记忆术的小知识哦</summary>
    
    
    
    <category term="拾枝杂谈" scheme="http://example.com/categories/%E6%8B%BE%E6%9E%9D%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="记忆术" scheme="http://example.com/tags/%E8%AE%B0%E5%BF%86%E6%9C%AF/"/>
    
    <category term="朝花夕拾" scheme="http://example.com/tags/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BE/"/>
    
  </entry>
  
  <entry>
    <title>快速图像颜色风格迁移</title>
    <link href="http://example.com/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/"/>
    <id>http://example.com/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/</id>
    <published>2022-08-01T05:21:49.000Z</published>
    <updated>2022-08-02T16:32:56.936Z</updated>
    
    <content type="html"><![CDATA[<h1>快速图像颜色迁移</h1><hr><p>传统的图像颜色迁移是通过计算目标图像和源图像的颜色直方图，优化二者之间的差值，从而实现不更改内容，完成颜色的迁移。其核心在于如何找到颜色间的关系映射。一般情况的研究会现将RGB空间转化为更复杂、对色彩的支持度更佳的其他色彩空间，如HSV、Lab等。为了获取匹配规则，一般需要对图像进行色彩信息统计，可以是局部特征统计，也可以是全局。一般的特征统计计算的是色彩直方图信息，局部特征提取可以通过聚类来实现，或者是特征部分如角点、边缘、背景、Blob等。考虑到色彩之间存在语义信息，也会对不同色彩之间进行权重修正或是不同语义采用不同的算法来计算两幅图像之间的差异。</p><p>Reinhard提出的算法(2001)步骤大致如下：</p><ul><li><p>输入目标图像和源图像</p></li><li><p>将源图像和目标图像转化到Lab颜色空间，Lab颜色空间模拟感知均匀性，其中颜色量的微小变化会产生颜色重要性的相对变化。Lab空间在模仿人类如何解释颜色上做的比RGB更好</p></li><li><p>分离源图像和目标图像的通道</p></li><li><p>计算图像每个通道的平均值和标准差</p></li><li><p>利用标准差做缩放</p></li><li><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>I</mi><mrow><mi>n</mi><mi>e</mi><mi>w</mi></mrow></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>I</mi><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow></msub><mo>−</mo><mi>M</mi><mi>E</mi><mi>A</mi><msub><mi>N</mi><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow></msub><mo stretchy="false">)</mo><mo>∗</mo><mfrac><mrow><mi>S</mi><mi>T</mi><msub><mi>D</mi><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow></msub></mrow><mrow><mi>S</mi><mi>T</mi><msub><mi>D</mi><mrow><mi>s</mi><mi>o</mi><mi>u</mi><mi>r</mi><mi>c</mi><mi>e</mi></mrow></msub></mrow></mfrac><mo>+</mo><mo stretchy="false">(</mo><mi>M</mi><mi>E</mi><mi>A</mi><msub><mi>N</mi><mrow><mi>s</mi><mi>o</mi><mi>u</mi><mi>r</mi><mi>c</mi><mi>e</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I_{new}=(I_{target}-MEAN_{target})*\frac{STD_{target}}{STD_{source}}+(MEAN_{source})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">ME</span><span class="mord mathnormal">A</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.1963em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">ST</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">so</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">rce</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">ST</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">ME</span><span class="mord mathnormal">A</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">so</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">rce</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p></li><li><p>裁剪输出范围至[0,255]</p></li><li><p>融合通道并转回RGB空间</p></li></ul><hr><h3 id="实现代码">实现代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getImageStatistic</span>(<span class="params">img</span>):</span><br><span class="line">    <span class="comment"># 获取通道的统计信息</span></span><br><span class="line">    <span class="comment"># 相当于img[...,0]...</span></span><br><span class="line">    l,a,b=cv2.split(img)</span><br><span class="line">    lM,lS=l.mean(),l.std()</span><br><span class="line">    aM,aS=a.mean(),a.std()</span><br><span class="line">    bM,bS=b.mean(),b.std()</span><br><span class="line">    <span class="keyword">return</span> [lM,lS,aM,aS,bM,bS]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">colorTransfer</span>(<span class="params">source,target,needmask=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">if</span> needmask:</span><br><span class="line">        mask,edge=changeBackColor(target)</span><br><span class="line">        <span class="comment"># # 边缘需要提取下</span></span><br><span class="line">        <span class="comment"># target_edge=cv2.bitwise_and(target,target,mask=edge)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通道转化</span></span><br><span class="line">    source=cv2.cvtColor(source,cv2.COLOR_BGR2LAB).astype(<span class="string">&quot;float32&quot;</span>)</span><br><span class="line">    target=cv2.cvtColor(target,cv2.COLOR_BGR2LAB).astype(<span class="string">&quot;float32&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分离通道并获取统计信息</span></span><br><span class="line">    source_list=getImageStatistic(source)</span><br><span class="line">    target_list=getImageStatistic(target)</span><br><span class="line">    <span class="comment"># 缩放图像</span></span><br><span class="line">    LAB=[i <span class="keyword">for</span> i <span class="keyword">in</span> cv2.split(target)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        LAB[i]=np.clip((LAB[i]-target_list[i*<span class="number">2</span>])*(target_list[i*<span class="number">2</span>+<span class="number">1</span>]/source_list[i*<span class="number">2</span>+<span class="number">1</span>])+source_list[i*<span class="number">2</span>],<span class="number">0</span>,<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 合并通道</span></span><br><span class="line">    new=cv2.merge(LAB)</span><br><span class="line">    <span class="comment"># 转回RGB并使用8位无符号整形</span></span><br><span class="line">    new=cv2.cvtColor(new.astype(<span class="string">&quot;uint8&quot;</span>),cv2.COLOR_Lab2BGR)</span><br><span class="line">    <span class="comment"># 获取掩膜区域外的数据</span></span><br><span class="line">    cv2.imshow(<span class="string">&quot;new&quot;</span>,new)</span><br><span class="line">    <span class="keyword">if</span> needmask:</span><br><span class="line">        new=cv2.bitwise_and(new,new,mask=mask) <span class="comment"># 在掩膜范围内做按位与</span></span><br><span class="line">        <span class="comment"># 掩膜白色相当于逻辑1，黑色相当于逻辑0</span></span><br><span class="line">        <span class="comment"># 在白色部分也就是逻辑1部分进行运算，其他部分不参与运算</span></span><br><span class="line">        <span class="comment"># 替换黑色</span></span><br><span class="line">        new[mask==<span class="number">0</span>]=np.array([<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>])</span><br><span class="line">        <span class="comment"># new[edge!=0]=np.array([0,0,0])</span></span><br><span class="line">    <span class="keyword">return</span> new</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changeBackColor</span>(<span class="params">img</span>):</span><br><span class="line">    <span class="comment"># 如何修正背景色？</span></span><br><span class="line">    <span class="comment"># 可以选择边界提取算法来做</span></span><br><span class="line">    <span class="comment"># 也可以选择腐蚀+高斯算法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取边界</span></span><br><span class="line">    upper = np.array([<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>])</span><br><span class="line">    lower = np.array([<span class="number">200</span>, <span class="number">80</span>, <span class="number">180</span>])</span><br><span class="line">    mask = cv2.inRange(img, lower, upper)  <span class="comment"># 在区域内就是255，否则是0</span></span><br><span class="line">    <span class="comment"># 腐蚀</span></span><br><span class="line">    erode=cv2.erode(mask,kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">,iterations=<span class="number">10</span>) <span class="comment"># 分离连接</span></span><br><span class="line">    <span class="comment"># 膨胀</span></span><br><span class="line">    dilate=cv2.dilate(erode,kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">,iterations=<span class="number">10</span>) <span class="comment"># 孤岛填充</span></span><br><span class="line">    <span class="comment"># 黑色是需要剔除的，所以要按位取反</span></span><br><span class="line">    mask = cv2.bitwise_not(mask, mask)</span><br><span class="line">    cv2.imshow(<span class="string">&quot;mask&quot;</span>, mask)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 高斯滤波去除噪声</span></span><br><span class="line">    blurred = cv2.GaussianBlur(img, (<span class="number">3</span>, <span class="number">3</span>), <span class="number">0</span>)</span><br><span class="line">    gray = cv2.cvtColor(blurred, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    <span class="comment"># X Gradient  cv.CV_16SC1所对应的数据类型必须是整型</span></span><br><span class="line">    <span class="comment"># 获取两个方向梯度</span></span><br><span class="line">    xgrad = cv2.Sobel(gray, cv2.CV_16SC1, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="comment"># Y Gradient</span></span><br><span class="line">    ygrad = cv2.Sobel(gray, cv2.CV_16SC1, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># edge，50、150分别是低阈值和高阈值</span></span><br><span class="line">    edge_output = cv2.Canny(xgrad, ygrad, <span class="number">50</span>, <span class="number">150</span>)</span><br><span class="line">    cv2.imshow(<span class="string">&quot;edge&quot;</span>, edge_output)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mask,edge_output</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tar=cv2.imread(<span class="string">r&quot;C:\Users\lenovo\Desktop\gif\img\04.jpg&quot;</span>)</span><br><span class="line">    src=cv2.imread(<span class="string">r&quot;C:\Users\lenovo\Desktop\gif\img\02.jpg&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cv2.imshow(<span class="string">&#x27;src&#x27;</span>,src)</span><br><span class="line">        cv2.imshow(<span class="string">&#x27;tar&#x27;</span>,tar)</span><br><span class="line">        new=colorTransfer(src,tar,<span class="literal">True</span>)</span><br><span class="line">        cv2.imshow(<span class="string">&#x27;result&#x27;</span>,new)</span><br><span class="line">        cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">        cv2.destroyAllWindows()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Your path is error&quot;</span>)</span><br><span class="line">    new = colorTransfer(src, tar)</span><br></pre></td></tr></table></figure><hr><h3 id="结果展示">结果展示</h3><p><strong>迁移图像</strong></p><img src="/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/image-20220316140830023.png" alt="image-20220316140830023" style="zoom:23%;"><p><strong>目标图像</strong></p><img src="/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/image-20220316140740207.png" alt="image-20220316140740207" style="zoom:25%;"><p><strong>结果图像</strong></p><img src="/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/image-20220316140653641.png" alt="image-20220316140653641" style="zoom: 25%;"><hr><p><strong>专题地图迁移</strong></p><img src="/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/image-20220316140830023.png" alt="image-20220316140830023" style="zoom:18%;"><img src="/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/image-20220316153242319.png" alt="image-20220316153242319" style="zoom:25%;"><img src="/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/image-20220316153256467.png" alt="image-20220316153256467" style="zoom:25%;"><img src="/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/image-20220316153214690.png" alt="image-20220316153214690" style="zoom:25%;"><hr><h1>图像风格迁移</h1><hr><p>图像风格迁移顾名思义，就是将别的图像的风格迁移到内容图像上去。这一思想一经提出，无论是学术界还是艺术界，都伸出了橄榄枝。</p><p>图像风格迁移又能分成固定风格固定内容的普通迁移和固定风格不限内容的快速迁移。</p><h2 id="固定风格固定内容的迁移">固定风格固定内容的迁移</h2><p>该思想最早是由图宾根大学的研究学者提出，核心在于将图片作为可训练的变量，通过不断优化图片的像素值，降低其与内容图片的内容差异，并降低其与风格图片的差异。</p><img src="/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/image-20220308095531724.png" alt="image-20220308095531724" style="zoom:50%;"><img src="/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/image-20220308101448500.png" alt="image-20220308101448500" style="zoom:50%;"><p>在该研究中，通过提取VGG16网络的第0、5、10、19、28层卷积层作为需要比对的风格特征。而21层则是需要比对的内容特征。</p><p>在21层也就是<code>conv4_2</code>层上，计算特征映射的相似性作为图像的内容损失：</p><img src="/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/image-20220308095837322.png" alt="image-20220308095837322" style="zoom:50%;"><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>表示特征映射的层数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>是目标图像和内容图像在对应卷积层输出的特征向量。</p><p>损失函数求导后是这个样：</p><img src="/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/image-20220308101335734.png" alt="image-20220308101335734" style="zoom:50%;"><p>一般来说，目标图像可以是噪声，也可以是初始图像的副本。为了方便训练，一般选用副本。</p><p>图像的风格损失主要是通过Gram矩阵进行计算的。Gram矩阵通过计算特征映射，将其转为列向量，在用该列向量乘以其转置获得，能够更好的表示图片的风格。(风格是一种潜在的整体特征，而Gram矩阵能够提取这种特征)</p><p>运作方法如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设A是个数据，shape为[batch,deep,heigh,width]</span></span><br><span class="line">A=torch.Tensor(<span class="number">1</span>,<span class="number">21</span>,<span class="number">300</span>,<span class="number">300</span>)</span><br><span class="line"><span class="comment"># 获取其列向量</span></span><br><span class="line"><span class="comment"># 相当于把内容融合了</span></span><br><span class="line">A=A.view(<span class="number">1</span>,<span class="number">21</span>,<span class="number">300</span>*<span class="number">300</span>)</span><br><span class="line"><span class="comment"># 最后计算Gram矩阵</span></span><br><span class="line">gram=torch.mm(A,A.t())</span><br></pre></td></tr></table></figure><p>风格损失呢，可以这样去评估</p><p><img src="/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/image-20220308101608605.png" alt="image-20220308101608605"></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mi>l</mi></msub></mrow><annotation encoding="application/x-tex">N_l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mi>l</mi></msub></mrow><annotation encoding="application/x-tex">M_l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>对应特征映射的宽高</p><p><img src="/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/image-20220308101659514.png" alt="image-20220308101659514"></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mi>l</mi></msub></mrow><annotation encoding="application/x-tex">w_l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示每层的权重</p><p>求偏导后是这样</p><img src="/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/image-20220308101851552.png" alt="image-20220308101851552" style="zoom:50%;"><img src="/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/image-20220308101743233.png" alt="image-20220308101743233" style="zoom:50%;"><p>总损失则是由内容损失和风格损失加权得到。</p><hr><h3 id="实现代码-v2">实现代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> hiddenlayer <span class="keyword">as</span> hl</span><br><span class="line"><span class="keyword">from</span> skimage.io <span class="keyword">import</span> imread</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用VGG19网络构建特征</span></span><br><span class="line">vgg19=models.vgg19(pretrained=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 不需要网络分类器，只用卷积层和池化层</span></span><br><span class="line">vgg=vgg19.features</span><br><span class="line"><span class="comment"># 设置显卡</span></span><br><span class="line">device=torch.device(<span class="string">&quot;cuda:0&quot;</span>)</span><br><span class="line"><span class="comment"># 将VGG19的特征提取网络权重冻结，训练不进行更新</span></span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> vgg.parameters():</span><br><span class="line">    param.requires_grad_(<span class="literal">False</span>)</span><br><span class="line">vgg=vgg.to(device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义图像读取函数，将图像进行相应转化</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_image</span>(<span class="params">img_path,max_size=<span class="number">400</span>,shape=<span class="literal">None</span></span>):</span><br><span class="line">    image=Image.<span class="built_in">open</span>(img_path).convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">    size=max_size <span class="keyword">if</span> <span class="built_in">max</span>(image.size)&gt;max_size <span class="keyword">else</span> <span class="built_in">max</span>(image.size)</span><br><span class="line">    <span class="comment"># 指定尺寸需要转化</span></span><br><span class="line">    <span class="keyword">if</span> shape <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        size=shape</span><br><span class="line">    <span class="comment"># 进行图像数据转化</span></span><br><span class="line">    in_transform=transforms.Compose(</span><br><span class="line">        [transforms.Resize(size),</span><br><span class="line">         transforms.ToTensor(),</span><br><span class="line">         transforms.Normalize((<span class="number">0.485</span>,<span class="number">0.456</span>,<span class="number">0.406</span>),(<span class="number">0.229</span>,<span class="number">0.224</span>,<span class="number">0.225</span>))]</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 使用RGB通道，并升维到[b,c,h,w]</span></span><br><span class="line">    image=in_transform(image)[:<span class="number">3</span>,...].unsqueeze(dim=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> image.to(device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义可视化图像函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">im_convert</span>(<span class="params">tensor</span>):</span><br><span class="line">    <span class="comment"># [1,c,h,w]-&gt;[c,h,w]</span></span><br><span class="line">    image=tensor.data.cpu().numpy().squeeze()</span><br><span class="line">    <span class="comment"># [c,h,w]-&gt;[h,w,c]</span></span><br><span class="line">    image=image.transpose(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 逆标准化</span></span><br><span class="line">    image=image*np.array((<span class="number">0.229</span>,<span class="number">0.224</span>,<span class="number">0.225</span>))+np.array((<span class="number">0.485</span>,<span class="number">0.456</span>,<span class="number">0.406</span>))</span><br><span class="line">    <span class="comment"># 裁剪图片到[0,1]</span></span><br><span class="line">    image=image.clip(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 读取内容和风格图像</span></span><br><span class="line">content=load_image(<span class="string">r&quot;C:\Users\lenovo\Desktop\新建文件夹\图片\03.jpg&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;content shape:&quot;</span>,content.shape)</span><br><span class="line"></span><br><span class="line">style=load_image(<span class="string">r&quot;C:\Users\lenovo\Desktop\新建文件夹\渲染\03.jpg&quot;</span>,shape=content.shape[-<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Style&#x27;shape:&quot;</span>,style.shape)</span><br><span class="line"></span><br><span class="line">fig,(ax1,ax2) = plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">12</span>,<span class="number">5</span>))</span><br><span class="line">ax1.imshow(im_convert(content))</span><br><span class="line">ax1.set_title(<span class="string">&quot;Content&quot;</span>)</span><br><span class="line">ax2.imshow(im_convert(style))</span><br><span class="line">ax2.set_title(<span class="string">&quot;Style&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数，获取图像在网络上指定层的输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_features</span>(<span class="params">image,model,layers=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="comment"># 获取指定layer的输出</span></span><br><span class="line">    <span class="comment"># lyaers参数指定需要用于图像内容和样式表示的图层</span></span><br><span class="line">    <span class="comment"># 没有指定就使用默认的层</span></span><br><span class="line">    <span class="keyword">if</span> layers <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        layers=&#123;</span><br><span class="line">            <span class="string">&#x27;0&#x27;</span>:<span class="string">&#x27;conv1_1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;5&#x27;</span>:<span class="string">&#x27;conv2_1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;10&#x27;</span>:<span class="string">&#x27;conv3_1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;19&#x27;</span>:<span class="string">&#x27;conv4_1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;21&#x27;</span>:<span class="string">&#x27;conv4_2&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;28&#x27;</span>:<span class="string">&#x27;conv5_1&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment"># 获取的每层特征保存到字典中</span></span><br><span class="line">    features=&#123;&#125;</span><br><span class="line">    x=image</span><br><span class="line">    <span class="keyword">for</span> name,layer <span class="keyword">in</span> model._modules.items():</span><br><span class="line">        <span class="comment"># 从第一层开始获取图像特征</span></span><br><span class="line">        x=layer(x)</span><br><span class="line">        <span class="comment"># 如果是指定层的特征就保存</span></span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">in</span> layers:</span><br><span class="line">            features[layers[name]]=x</span><br><span class="line">    <span class="keyword">return</span> features</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 通过Gram矩阵来评价两幅图像是否具有相同风格</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gram_matrix</span>(<span class="params">tensor</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Gram矩阵表示图像的风格特征，在保证内容的情况下，进行风格传输</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    _,d,h,w=tensor.size()</span><br><span class="line">    <span class="comment"># 改变维度为(深度,高*宽)</span></span><br><span class="line">    tensor=tensor.view(d,h*w)</span><br><span class="line">    <span class="comment"># 计算gram矩阵</span></span><br><span class="line">    gram=torch.mm(tensor,tensor.t())</span><br><span class="line">    <span class="keyword">return</span> gram</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算第一次训练之前的内容特征和风格特征</span></span><br><span class="line">content_features=get_features(content,vgg)</span><br><span class="line">style_features=get_features(style,vgg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算每层的Gram矩阵,用于表示风格</span></span><br><span class="line">style_grams=&#123;layer:gram_matrix(style_features[layer]) <span class="keyword">for</span> layer <span class="keyword">in</span> style_features&#125;</span><br><span class="line"><span class="comment"># 使用内容图像的副本创建一个目标图像，训练时对目标图像进行调整</span></span><br><span class="line">target=content.clone().requires_grad_(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义每个样式层的权重</span></span><br><span class="line">style_weights=&#123;<span class="string">&#x27;conv1_1&#x27;</span>:<span class="number">1.</span>,</span><br><span class="line">               <span class="string">&#x27;conv2_1&#x27;</span>:<span class="number">0.75</span>,</span><br><span class="line">               <span class="string">&#x27;conv3_1&#x27;</span>:<span class="number">0.2</span>,</span><br><span class="line">               <span class="string">&#x27;conv4_1&#x27;</span>:<span class="number">0.2</span>,</span><br><span class="line">               <span class="string">&#x27;conv5_1&#x27;</span>:<span class="number">0.2</span>&#125;</span><br><span class="line"></span><br><span class="line">alpha=<span class="number">1</span></span><br><span class="line">beta=<span class="number">1e6</span></span><br><span class="line"></span><br><span class="line">content_weight=alpha</span><br><span class="line">style_weight=beta</span><br><span class="line"></span><br><span class="line"><span class="comment"># conv4 2用于度量图像内容相似性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每1000次迭代输出一个中间结果</span></span><br><span class="line">show_every=<span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存损失</span></span><br><span class="line">total_loss_all=[]</span><br><span class="line">content_loss_all=[]</span><br><span class="line">style_loss_all=[]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Adam优化器</span></span><br><span class="line">optimizer=optim.Adam([target],lr=<span class="number">0.0003</span>)</span><br><span class="line">step=<span class="number">50000</span></span><br><span class="line">t0=time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,step+<span class="number">1</span>):</span><br><span class="line">    <span class="comment"># 获取图像特征</span></span><br><span class="line">    target_features=get_features(target,vgg)</span><br><span class="line">    <span class="comment"># 计算内容损失</span></span><br><span class="line">    content_loss=torch.mean((target_features[<span class="string">&#x27;conv4_2&#x27;</span>]-content_features[<span class="string">&#x27;conv4_2&#x27;</span>])**<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 计算风格损失</span></span><br><span class="line">    style_loss=<span class="number">0</span></span><br><span class="line">    <span class="comment"># 把每个层的Gram矩阵相加</span></span><br><span class="line">    <span class="keyword">for</span> layer <span class="keyword">in</span> style_weights:</span><br><span class="line">        <span class="comment"># 计算要生成的图像风格表示</span></span><br><span class="line">        target_feature=target_features[layer]</span><br><span class="line">        <span class="comment"># [d,h*w]</span></span><br><span class="line">        target_gram=gram_matrix(target_feature)</span><br><span class="line">        _,d,h,w=target_feature.shape</span><br><span class="line">        <span class="comment"># 获得风格在每层的Gram矩阵</span></span><br><span class="line">        style_gram=style_grams[layer]</span><br><span class="line">        <span class="comment"># 计算损失</span></span><br><span class="line">        layer_style_loss=style_weights[layer]*torch.mean((target_gram-style_gram)**<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 累加计算风格差异</span></span><br><span class="line">        <span class="comment"># 每个像素点</span></span><br><span class="line">        style_loss+=layer_style_loss/(d*h*w)</span><br><span class="line">    <span class="comment"># 总损失等于风格损失加上内容损失</span></span><br><span class="line">    total_loss=content_weight*content_loss+style_weight*style_loss</span><br><span class="line">    <span class="comment"># 保留三种损失大小</span></span><br><span class="line">    content_loss_all.append(content_loss.item())</span><br><span class="line">    style_loss_all.append(style_loss.item())</span><br><span class="line">    total_loss_all.append(total_loss.item())</span><br><span class="line">    <span class="comment"># 更新需要生成的图像</span></span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    total_loss.backward()</span><br><span class="line">    optimizer.step()</span><br><span class="line">    <span class="comment"># 输出show_ecvery次数厚度图像</span></span><br><span class="line">    <span class="keyword">if</span> i%show_every==<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Total loss&quot;</span>,total_loss.item())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Use time: &quot;</span>,(time.time()-t0)/<span class="number">3600</span>,<span class="string">&quot;hour&quot;</span>)</span><br><span class="line">        newim=im_convert(target)</span><br><span class="line">        plt.imshow(newim)</span><br><span class="line">        plt.title(<span class="string">&quot;Iteration: &quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;times&quot;</span>)</span><br><span class="line">        plt.show()</span><br><span class="line">        <span class="comment"># 保存图片</span></span><br><span class="line">        result=Image.fromarray((newim*<span class="number">255</span>).astype(np.uint8))</span><br><span class="line">        result.save(<span class="string">r&quot;C:\Users\lenovo\Desktop\新建文件夹\结果\Map_Result&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;.bmp&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 结果可视化</span></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">4</span>))</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">plt.plot(total_loss_all,<span class="string">&#x27;r&#x27;</span>,label=<span class="string">&#x27;total_loss&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.title(<span class="string">&quot;total loss&quot;</span>)</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plt.plot(content_loss_all,<span class="string">&#x27;g-&#x27;</span>,label=<span class="string">&quot;content_loss&quot;</span>)</span><br><span class="line">plt.plot(style_loss_all,<span class="string">&#x27;b-.&#x27;</span>,label=<span class="string">&quot;style_loss&quot;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.title(<span class="string">&quot;Content and Style loss&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><hr><h3 id="结果展示-v2">结果展示</h3><p><strong>内容图片</strong></p><img src="/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/02.png" style="zoom:25%;"><p><strong>风格图片</strong></p><img src="/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/image-20220316140830023.png" alt="image-20220316140830023" style="zoom:10%;"><p><strong>渲染图片</strong></p><h1>对抗生成网络</h1><hr><h2 id="GAN">GAN</h2><p>GAN的核心在于生成器和判别器的勾心斗角。</p><img src="/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/image-20220317194554644.png" alt="image-20220317194554644" style="zoom:50%;"><p><strong>BCELOSS</strong></p><p>如何去评估模型的效果？对于判别器来说，会出现正负值，我们先将其映射到[0,1]区间，接着根据信息熵的计算公式来得到损失函数：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>l</mi><mi>o</mi><mi>s</mi><mi>s</mi><mo stretchy="false">(</mo><mi>o</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mn>1</mn><mi mathvariant="normal">/</mi><mi>n</mi><munder><mo>∑</mo><mi>i</mi></munder><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>∗</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>o</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo>∗</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>o</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">loss(o,t)=-1/n\sum_{i}(t[i]*log(o[i])+(1-t[i])*log(1-o[i]))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">oss</span><span class="mopen">(</span><span class="mord mathnormal">o</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3277em;vertical-align:-1.2777em;"></span><span class="mord">−</span><span class="mord">1/</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">o</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">])</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">])</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">o</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]))</span></span></span></span></span></p><h3 id="实现代码-v3">实现代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">from</span> torchvision.utils <span class="keyword">import</span> save_image</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件夹，用来存放数据</span></span><br><span class="line">os.makedirs(<span class="string">&quot;images&quot;</span>,exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建全局参数</span></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&quot;--n_epochs&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">100</span>, <span class="built_in">help</span>=<span class="string">&quot;number of epochs of training&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;--batch_size&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">128</span>, <span class="built_in">help</span>=<span class="string">&quot;size of the batches&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;--lr&quot;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=<span class="number">0.0002</span>, <span class="built_in">help</span>=<span class="string">&quot;adam: learning rate&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;--b1&quot;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=<span class="number">0.5</span>, <span class="built_in">help</span>=<span class="string">&quot;adam: decay of first order momentum of gradient&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;--b2&quot;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=<span class="number">0.999</span>, <span class="built_in">help</span>=<span class="string">&quot;adam: decay of first order momentum of gradient&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;--n_cpu&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">8</span>, <span class="built_in">help</span>=<span class="string">&quot;number of cpu threads to use during batch generation&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;--latent_dim&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">100</span>, <span class="built_in">help</span>=<span class="string">&quot;dimensionality of the latent space&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;--img_size&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">28</span>, <span class="built_in">help</span>=<span class="string">&quot;size of each image dimension&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;--channels&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">1</span>, <span class="built_in">help</span>=<span class="string">&quot;number of image channels&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;--sample_interval&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">400</span>, <span class="built_in">help</span>=<span class="string">&quot;interval betwen image samples&quot;</span>)</span><br><span class="line">opt = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图像形状 : (c,h,w)</span></span><br><span class="line">img_shape=(opt.channels,opt.img_size,opt.img_size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否调用GPU</span></span><br><span class="line">cuda=<span class="literal">True</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Generator</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 生成器要做的就是把随机噪声转化为图像像素</span></span><br><span class="line">        <span class="built_in">super</span>(Generator, self).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">block</span>(<span class="params">in_feat,out_feat,normalize=<span class="literal">True</span></span>):</span><br><span class="line">            <span class="comment"># in: 初始化随机噪声</span></span><br><span class="line">            <span class="comment"># out: 指定神经元输出</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 做个最简单的全连接</span></span><br><span class="line">            layers=[nn.Linear(in_feat,out_feat)]</span><br><span class="line">            <span class="keyword">if</span> normalize:</span><br><span class="line">                <span class="comment"># batch初始化</span></span><br><span class="line">                layers.append(nn.BatchNorm1d(out_feat,<span class="number">0.8</span>))</span><br><span class="line">            <span class="comment"># leakrelu激活函数</span></span><br><span class="line">            layers.append(nn.LeakyReLU(<span class="number">0.2</span>,inplace=<span class="literal">True</span>))</span><br><span class="line">            <span class="keyword">return</span> layers</span><br><span class="line"></span><br><span class="line">        self.model=nn.Sequential(</span><br><span class="line">            *block(opt.latent_dim,<span class="number">128</span>,normalize=<span class="literal">False</span>),</span><br><span class="line">            *block(<span class="number">128</span>, <span class="number">256</span>),</span><br><span class="line">            *block(<span class="number">256</span>, <span class="number">512</span>),</span><br><span class="line">            *block(<span class="number">512</span>, <span class="number">1024</span>),</span><br><span class="line">            <span class="comment"># 转化到图像大小</span></span><br><span class="line">            <span class="comment"># 即: c*h*w</span></span><br><span class="line">            nn.Linear(<span class="number">1024</span>, <span class="built_in">int</span>(np.prod(img_shape))),</span><br><span class="line">            nn.Tanh()</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,z</span>):</span><br><span class="line">        <span class="comment"># 生成fake图像</span></span><br><span class="line">        img=self.model(z)</span><br><span class="line">        <span class="comment"># 将展平的scalar变成图像格式</span></span><br><span class="line">        img=img.view(img.size(<span class="number">0</span>),*img_shape)</span><br><span class="line">        <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判别器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Discriminator</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Discriminator, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.model=nn.Sequential(</span><br><span class="line">            <span class="comment"># 判别器要做的就是识别图像状态</span></span><br><span class="line">            nn.Linear(<span class="built_in">int</span>(np.prod(img_shape)),<span class="number">512</span>),</span><br><span class="line">            nn.LeakyReLU(<span class="number">0.2</span>,inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.Linear(<span class="number">512</span>,<span class="number">256</span>),</span><br><span class="line">            nn.LeakyReLU(<span class="number">0.2</span>,inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.Linear(<span class="number">256</span>,<span class="number">1</span>),</span><br><span class="line">            <span class="comment"># 需要映射到01</span></span><br><span class="line">            nn.Sigmoid()</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,img</span>):</span><br><span class="line">        img_flat=img.view(img.size(<span class="number">0</span>),-<span class="number">1</span>)</span><br><span class="line">        validity=self.model(img_flat)</span><br><span class="line">        <span class="keyword">return</span> validity</span><br><span class="line"></span><br><span class="line"><span class="comment"># 损失函数</span></span><br><span class="line"><span class="comment"># 用的是BCEloss</span></span><br><span class="line"><span class="comment"># 即计算样本正确识别信息熵</span></span><br><span class="line">loss=torch.nn.BCELoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建生成器</span></span><br><span class="line">gen=Generator()</span><br><span class="line">dis=Discriminator()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> cuda:</span><br><span class="line">    gen.cuda()</span><br><span class="line">    dis.cuda()</span><br><span class="line">    loss.cuda()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建MNIST数据集</span></span><br><span class="line">os.makedirs(<span class="string">&quot;./data/mnist&quot;</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">dataloader = DataLoader(</span><br><span class="line">    datasets.MNIST(</span><br><span class="line">        <span class="string">&quot;./data/mnist&quot;</span>,</span><br><span class="line">        train=<span class="literal">True</span>,</span><br><span class="line">        download=<span class="literal">True</span>,</span><br><span class="line">        transform=transforms.Compose(</span><br><span class="line">            [transforms.Resize(opt.img_size),</span><br><span class="line">             transforms.ToTensor(),</span><br><span class="line">             transforms.Normalize([<span class="number">0.5</span>], [<span class="number">0.5</span>])]</span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line">    batch_size=opt.batch_size,</span><br><span class="line">    shuffle=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义优化器</span></span><br><span class="line">opt_G=torch.optim.Adam(gen.parameters(),lr=opt.lr,betas=(opt.b1, opt.b2))</span><br><span class="line">opt_D=torch.optim.Adam(dis.parameters(),lr=opt.lr,betas=(opt.b1, opt.b2))</span><br><span class="line"></span><br><span class="line">Tensor=torch.cuda.FloatTensor <span class="keyword">if</span> cuda <span class="keyword">else</span> torch.FloatTensor</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------</span></span><br><span class="line"><span class="comment">#   训练</span></span><br><span class="line"><span class="comment"># -------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(opt.n_epochs):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i,(imgs,_) <span class="keyword">in</span> <span class="built_in">enumerate</span>(dataloader):</span><br><span class="line">        <span class="comment"># 验证数据表</span></span><br><span class="line">        valid=Variable(Tensor(imgs.size(<span class="number">0</span>),<span class="number">1</span>).fill_(<span class="number">1.0</span>),requires_grad=<span class="literal">False</span>)</span><br><span class="line">        fake=Variable(Tensor(imgs.size(<span class="number">0</span>),<span class="number">1</span>).fill_(<span class="number">0.0</span>),requires_grad=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 真实影像</span></span><br><span class="line">        real_imgs=Variable(imgs.<span class="built_in">type</span>(Tensor))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ----------</span></span><br><span class="line">        <span class="comment">#  训练生成器</span></span><br><span class="line">        <span class="comment"># ----------</span></span><br><span class="line">        opt_G.zero_grad()</span><br><span class="line">        <span class="comment"># 创建随机噪声</span></span><br><span class="line">        z=Variable(Tensor(np.random.normal(<span class="number">0</span>,<span class="number">1</span>,(imgs.shape[<span class="number">0</span>],opt.latent_dim)))) <span class="comment"># imgs:(128,1,28,28) z:(128,100)</span></span><br><span class="line">        <span class="comment"># 生成batch图片</span></span><br><span class="line">        gen_imgs=gen(z)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算生成器能够骗过判别器的能力</span></span><br><span class="line">        g_loss = loss(dis(gen_imgs), valid)</span><br><span class="line"></span><br><span class="line">        g_loss.backward()</span><br><span class="line">        opt_G.step()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ---------------------</span></span><br><span class="line">        <span class="comment">#  训练判别器</span></span><br><span class="line">        <span class="comment"># ---------------------</span></span><br><span class="line"></span><br><span class="line">        opt_D.zero_grad()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算判别器对真实数据的敏感度</span></span><br><span class="line">        real_loss = loss(dis(real_imgs), valid)</span><br><span class="line">        <span class="comment"># 计算判别器识别虚假数据的敏感度</span></span><br><span class="line">        fake_loss = loss(dis(gen_imgs.detach()), fake)</span><br><span class="line"></span><br><span class="line">        d_loss = (real_loss + fake_loss) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        d_loss.backward()</span><br><span class="line">        opt_D.step()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(</span><br><span class="line">            <span class="string">&quot;[Epoch %d/%d] [Batch %d/%d] [D loss: %f] [G loss: %f]&quot;</span></span><br><span class="line">            % (epoch, opt.n_epochs, i, <span class="built_in">len</span>(dataloader), d_loss.item(), g_loss.item())</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        batches_done = epoch * <span class="built_in">len</span>(dataloader) + i</span><br><span class="line">        <span class="keyword">if</span> batches_done % opt.sample_interval == <span class="number">0</span>:</span><br><span class="line">            save_image(gen_imgs.data[:<span class="number">25</span>], <span class="string">&quot;images/%d.png&quot;</span> % batches_done, nrow=<span class="number">5</span>, normalize=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果展示-v3">结果展示</h3><p><img src="/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/image-20220318011258706.png" alt="image-20220318011258706"></p><p>训练生成的图像已经能够以假乱真了。</p><hr><h2 id="CyCleGAN">CyCleGAN</h2><p>CycleGAN区别于其他网络，不需要图像配对(Paired)即可对目标图像进行风格与颜色的迁移。</p><p><strong>CycleGAN能做什么？</strong></p><p><img src="/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/horse2zebra.gif" alt="horse2zebra"></p><p><strong>CycleGAN网络架构</strong></p><p>循环架构能够保证生成的图像与源图像有关系，要不然只要是![img](file:///C:\Users\lenovo\AppData\Local\Temp\SGPicFaceTpBq\22660\22F3ACEB.png)就可以了。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>G</mi><mrow><mi>A</mi><mi>B</mi></mrow></msub></mrow><annotation encoding="application/x-tex">G_{AB}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>用于将源图像生成目标图像，该目标图像进入判别器与真时图像进行比对。同时，为了保证图像间的关联，还需要通过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>G</mi><mrow><mi>B</mi><mi>A</mi></mrow></msub></mrow><annotation encoding="application/x-tex">G_{BA}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span><span class="mord mathnormal mtight">A</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>网络将目标图像还原至与源图像相似的图像，并衡量最后结果与源图像的相似程度。</p><img src="/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/image-20220318085558382.png" alt="image-20220318085558382" style="zoom:33%;"><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>G</mi><mrow><mi>B</mi><mi>A</mi></mrow></msub></mrow><annotation encoding="application/x-tex">G_{BA}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span><span class="mord mathnormal mtight">A</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>在其中也有着非常重要的作用，同样需要经过训练。</p><img src="/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/image-20220318090444399.png" alt="image-20220318090444399" style="zoom:33%;"><p>在整体网络架构中，通过颠倒目标图像与源图像的方式，能够对循环生成器进行训练。</p><p><strong>损失函数</strong></p><ul><li>生成器损失</li><li>判别器损失</li><li>循环损失</li><li>映射损失(将生成图像再通过生成器，看二次生成与一次生成的差别)</li></ul><h3 id="重点代码详解">重点代码详解</h3><h3 id="结果展示-v4">结果展示</h3><p>样本类A示例</p><img src="/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/264_A.jpg" alt="image-20220318012102085" style="zoom: 50%;"><p>样本类B示例</p><img src="/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/264_B.jpg" alt="image-20220318012123535" style="zoom: 50%;"><p>生成器结果示例</p><img src="/2022/08/01/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%BF%AB%E9%80%9F%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB/1002_A_fake.png" alt="image-20220318012123535" style="zoom: 110%;"><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">本文介绍了三种实现颜色迁移的方式，其中基于内容风格的颜色迁移通过将整体图像作为参数训练的方式来实现，是一个大胆的想法。</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="图像处理" scheme="http://example.com/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    <category term="机器视觉" scheme="http://example.com/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
</feed>
