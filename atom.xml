<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>岁染</title>
  <icon>https://www.gravatar.com/avatar/7228219e90ece9b38ea5921da1fcc500</icon>
  <subtitle>别来无恙，你在心上</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-09-15T07:35:05.935Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Kagura</name>
    <email>651421775@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/09/15/%E3%80%90ENVI%E3%80%91%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2023/09/15/%E3%80%90ENVI%E3%80%91%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/</id>
    <published>2023-09-15T07:34:51.895Z</published>
    <updated>2023-09-15T07:35:05.935Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ENVI影像融合">ENVI影像融合</h3><p>加载高分辨率的全色影像与低分辨率的高光谱影像。</p><p><img src="/2023/09/15/%E3%80%90ENVI%E3%80%91%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/image-20230915151332155.png" alt="image-20230915151332155"></p><p>如果两幅影像空间不一致，还需要进行地理配准：</p><p><img src="/2023/09/15/%E3%80%90ENVI%E3%80%91%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/image-20230915151845770.png" alt="image-20230915151845770"></p><p>可以手动或自动添加控制点，完成影像配准。</p><p>在<code>Image Sharpening</code>里面选择不同类型的融合方式即可。</p><p><img src="/2023/09/15/%E3%80%90ENVI%E3%80%91%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/image-20230915151712970.png" alt="image-20230915151712970"></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;ENVI影像融合&quot;&gt;ENVI影像融合&lt;/h3&gt;
&lt;p&gt;加载高分辨率的全色影像与低分辨率的高光谱影像。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/09/15/%E3%80%90ENVI%E3%80%91%E6%93%8D%E4%BD%9C%E8%AE%B0%E5</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>遗书</title>
    <link href="http://example.com/2023/08/26/%E3%80%90%E6%97%A0%E3%80%91Testament/"/>
    <id>http://example.com/2023/08/26/%E3%80%90%E6%97%A0%E3%80%91Testament/</id>
    <published>2023-08-26T12:08:07.647Z</published>
    <updated>2023-10-01T08:46:50.590Z</updated>
    
    <content type="html"><![CDATA[<hr><p>我之前写作有个习惯。那就是一定要想一个工整对偶的标题，一定要起一个或是荡气回肠，或是光怪陆离的开头。</p><p>但是这次没有。只是简简单单的开始，只是匆匆忙忙的结束。</p><h3 id="Part-1">Part 1</h3><p>人生是怎么样的呢？是苦，是甜？是一种状态，还是一种结局？小时候，我思考过不同的人生轨迹，想过自己要如何去活，写过不少以人生为命题的作文。是了，上一次写人生，不就是毕业之时吗？</p><blockquote><p>时光荏苒，岁月如梭。</p><p>上一次这般开头，还是在初入大学的象牙塔时，写下的追忆高中的文章。时间曾在过去的季节唱起歌谣，悠扬婉转的旋律交织了四个春夏秋冬，于这个季节飘然远去。若是仔细聆听，歌谣的韵律便是人生起承转合的缩影，有过欢喜，也有过失意。花开花败，曲终人散，当在毕业论文写下这段话的时候，也意味着大学四年的岁月即将洒下句点。</p><p>在此时此刻，虽有太多的情愫与不舍想要直抒胸臆，但在此之前，我更急切地想把我的敬意与感激献给在这四年与我相逢相识的人儿们。</p><p>首先非常感谢我的导师赵飞老师，本文在选题、撰写过程中都受到了赵老师的悉心指导。赵老师是我非常敬重的一位老师，他严谨的治学精神、深厚的知识积累、缜密的思维方式、豁达的处世态度和乐观的生活心态都令我受益匪浅。我与赵老师相识了四年，这四年中，无论是学习上还是生活上都受到了赵老师的帮助，他的学术观念和生活态度也在潜移默化中影响着我，令我在最开始的时光中完成了思想上的蜕变，树立了未来的学术目标。</p><p>感谢我的班主任孙正宝老师和刘蕊老师。是您们在我最失意最落魄的时候给了我帮助，是您们在最低谷的时候不抛弃不放弃，一点一点地将偏航的我引入正途。要是没有孙老师和刘老师，恐怕我在学术上的探索也就将止步于此了。除却思想上的救赎，孙老师和刘老师在生活上也给了我很多的意见和帮助，这些都令我感激不尽，是我受用终生。在此，我报以最诚挚敬意与感激，您们是我人生中的灯塔，是我未来一生做人的标尺。</p><p>感谢解智强老师，您一路见证了我的起起落落，跟您一起参与的大创项目使我受益匪浅，您带给我们思想上的启发和生活上的帮助，谢谢您，您严谨的教学态度和灵活的思维模式让我向往与钦佩。</p><p>感谢我未来的导师于丽君老师，感谢夏既胜老师、谈树成老师、曾洪云老师、张军老师、朱艳萍老师、刘云老师以及在云南大学遇到的所有老师们，是各位老师们的悉心教导，倾囊相授，我们今天才能站在这里，才能在这岁月静好的四年完成思想、人生、学术上的升华。每一位老师，每一种思想和主张，都给我带来了灵魂上的碰撞与启发，是您们教给了我学术思想和理论知识，是您们让我懂得了如何探索地理的奥秘，是您们令我真正领悟了何为脚踏实地，何为科学严谨。您们是我们心中的太阳，是学术海洋中的摆渡人。非常感谢这几年的相遇相识，令我的求学之路不再荆棘丛生。数载教诲，师恩难报。在这里我向各位老师鞠躬致谢，致以最崇高的敬意！</p><p>感谢这四年来朝夕相处的同学们，感谢我相识或是相知的朋友们，感谢与我休戚与共的舍友们。是缘分让我们相遇，是时光让我们相知。你们让我的生活充满了阳光，你们让我有了奋起前进的动力，感谢你们。尤其感谢我的挚友王万炜、林烨阳、陈毅榕、李思阳、梁翌盺、郑雨欣同学，大学生活因为有你们的陪伴而更加丰富，因为你们的帮助而更加轻松。感谢黄春媛同学，是你照亮了我高考后阴霾的天空，是你让我看到了未来的无限可能性，是你让我鼓足勇气踏入大学生活。很高兴能够认识你们，也很幸运，最好的年华遇见了最好的你们。祝各位前程似锦，未来一片光明！</p><p>“慈母手中线，游子身上衣”。感谢我的父母和家人们，是你们给了我鼓励和支持，才有了今天的我。养育之恩，无以为报。你们在我失意的时候给我帮助和建议，倾听我倒垃圾般倒出的负能量，为我出谋划策。是你们的理解与包容，鼓励与信任，让我有了坚定走下去的勇气。</p><p>最后，感谢曾经教育和帮助过我的所有老师，衷心地感谢为评阅本论文而付出宝贵时间和辛勤劳动的专家和教授们！感谢一路上关心和帮助过我的人！</p><p>希望疫情阴霾早日散去，云销雨霁之后便是艳阳高照。</p></blockquote><p>瞧瞧，这溢出词句的矫情，这所谓的刹那真心与感动。我都快忘却了，曾经那颗热情未熄，炙热跳动的心。昔年故人今何在，欲买桂花同载酒，终不似，少年游。离题了吗？我的人生本就是离题。每一刻的状态，都是前一刻情绪与经历的递推。当年的我，与此时有着相同的情感，只不过，此时更胜往日。如果，未能从上文中读出我的心境，那就说明你是健康的。最起码，你在精神上是向上的。</p><p>什么时候开始的呢？什么时候开始的呢？</p><p>我一直是一个自卑的人。我所有的行为，都是在这样一种人格下被驱动。我的自卑，来自于母亲过度的掌控欲，来自于少年时老师的挖苦讥讽，来自于形体丑陋灵魂剥离的痛苦，来源于不敢于人交往，不懂与人交往，来源于长期失败的积累。</p><p>我一事无成。而且是个丑陋，肥胖，低劣的人。</p><p>正是因为这种自卑，驱动着我渴望他人的关爱，不，换个此也许更加准确，渴望他人的施舍。</p><p>为了掩埋这浸入骨子里的恶臭，我开始滋生了一种新的罪欲，嫉妒。</p><p>每当自己不如别人，我的内心都会萎缩成一团，这样就没人关注我了啊。</p><p>在舞台上，我是如此渴望得到大家的侧目，在舞台下，我又是如此害怕登上舞台，甚至惧于与人交流。</p><p>如此，自卑与表演型人格的可悲混响，在一个人的躯壳与灵魂上矛盾地演奏。</p><hr><h3 id="Part-2">Part 2</h3><p>我生于十二月的飞雪，父母告诉我，出生时的温度，决定了一个人的性格。</p><p>年少时的我信以为真。</p><p>性格天生注定。我天生如此。</p><p>内向自卑，话都讲不流利，不敢直视对方的眼睛。</p><p>以至于初中老师对我的评价是，没想到我这样的人成绩会这样好。</p><p>是啊，换个人，也许就被这个该死的性格毁了吧，甚至连高中都上不去，然后一辈子埋没在工厂里，悄悄的来，悄悄的走。</p><p>可是，这一切的前提，似乎是“性格天定”。</p><p>后面，我慢慢了解到，性格是可以被塑造的，是环境和行为共同作用下，逐渐形成了一个人独特的性格和气质。</p><p>所以我说，不会教育孩子，还不如不生。时代变了，大环境早就不复当年。</p><p>想改吗？来得及吗？</p><p>或许吧，但已经没必要了。</p><hr><h3 id="Part-3">Part 3</h3><p>本来这段应该写些别的内容。但我的心隐隐作痛。</p><p>字面意义上的，物理层面的痛。</p><p>也不是第一次了。以前挺怕的，现在挺享受的。</p><p>我曾不止一次幻想过自己的湮灭，归于虚无。</p><p>那样相较于现在的人生，从本质上并没有什么不同，反而是我更加向往的。</p><p>堵住的鼻子。</p><p>带来的不仅仅是呼吸困难。连锁反应之下，难以入睡，大脑供氧不足，感觉脑袋发酸，思维迟缓，甚至神经元中断。</p><p>发涩的双眼。</p><p>也许是眼镜的问题，看东西越看越累，越看越难受。</p><p>恶心的身体。</p><p>减肥，从未成功过。如此丑陋不堪，如此令人作呕的外表。</p><p>绝望的心。</p><p>当一个人对未来彻底失去希望，对信仰彻底置若罔闻，对生命彻底不屑一顾时，那便明白了生命的意义。</p><p>改变？改变！</p><p>如何改变？残败不堪的身体，骤然熔断的脑回路，阴霾长绕的记忆，还是裂纹密布的道心？</p><p>内环境。</p><p>一切都是徒劳罢了。</p><p>你明白努力却换不来结果的痛苦吗？我想你应该明白。</p><p>而这对我只不过是日常。</p><hr><h3 id="Part-4">Part 4</h3><p>史上最难就业季。</p><p>今后每一年，都是未来最好的一年。</p><p>如此重压。</p><p>本就不怎么好的学校，本就不怎么好的专业，本就不怎么好的我。</p><p>我记不住东西，任何一点。这二十三载春秋，虚度。或许这样表达不够详尽。</p><p>无效的努力。</p><p>什么都记不住，什么也不会。</p><p>失败。</p><p>失败。</p><p>线崩的太紧了，就会断了。</p><p>试想一下，即使有了好的工作，未来又是怎样？</p><p>裁员，痛苦，贷款，疾病。</p><p>我一点希望都看不见。</p><p>黑暗中，最后一丝光芒随之消弭。</p><p>为什么不肯向下兼容？</p><p>为什么？</p><p>因为你不是我。</p><p>你不了解我。</p><p>活着就这么重要吗？</p><p>为了所谓的生物意义上的基因延续，然后一代又重复着一代？</p><p>被基因所驱动，苟且着过日，只是为了繁衍。</p><p>与低等动物何异？</p><p>我不想承担所谓的生命责任，我宁愿归于虚无。</p><p>逃避？逃避什么？</p><p>我只是更喜欢死亡一点。</p><p>开篇非吾所求，</p><p>结局书吾所愿。</p><hr><blockquote><p>我想给谁看见？谁又能看得见？</p><p>我写给我自己</p><p>死亡不止肉体，亦有灵魂</p></blockquote><hr><h3 id="Part-5">Part 5</h3><p>我羡慕别人的生活。</p><p>我一如既往的渴望，一如既往的羡慕。</p><p>聚会也好，出差也罢，踏遍祖国山河，亦或是投身祖国事业。</p><p>我羡慕。</p><p>这样的情愫，可当我真正要去做曾经羡慕的事时，我犹豫，我害怕。</p><p>于是我发现了，我所羡慕的，并不是别人的生活，而是那个闪闪发光，与自己的迥然不同的别人。</p><p>我羡慕别人。</p><p>本质上是厌恶自己。</p><p>我讨厌我自己。</p><p>如果没有来过。</p><p>人活着的痛苦，有时候是像搭积木一样，可以一层一层抽离的。</p><p>除了最下层，要伴随你一辈子的。</p><p>讨厌生活，讨厌自己。</p><p>与自己和解？</p><p>没有必要了。</p><p>我没有钱，我没有名誉，我没有时间，我什么都不是。</p><p>即便想一览山河，即便想拥抱世界，我没有钱，也没有时间。</p><p>我不明白我生活的意义。</p><p>追求什么？价值，名誉，还是信仰？</p><p>与我何干？</p><hr><h3 id="Part-6">Part 6</h3><p>2023，10，1。</p><p>有一个名字。</p><p>在上文中出现过，在此时被提起，在未来被撰写。</p><p>你为什么，为什么？</p><p>第二次了。我已经，被你救了两次。</p><p>失而复得，方知珍贵。</p><p>你是我的天选，也是我的唯一。</p><p>什么生活的意义，什么价值名誉和信仰？我的意义，现在由你来定义。</p><p>可是那之后呢？如果再一次分开？</p><p>我想，未来太远，当下你在我身边，如此便是所有。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">灵魂消亡了，躯壳还能行走吗？</summary>
    
    
    
    <category term="拾枝杂谈" scheme="http://example.com/categories/%E6%8B%BE%E6%9E%9D%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>【优化算法】遗传算法</title>
    <link href="http://example.com/2023/08/26/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2023/08/26/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/</id>
    <published>2023-08-25T17:07:03.775Z</published>
    <updated>2023-08-27T09:22:30.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="遗传算法">遗传算法</h2><p>遗传算法(Genetic Algorithm)属于智能优化算法的一种，本质上是模拟自然界中种群的演化来寻求问题的最优解。与之相似的还有模拟退火、粒子群、蚁群等算法。</p><p>在具体介绍遗传算法之前，我们先来了解一些知识🧀</p><blockquote><p>DNA： 携带有合成RNA和蛋白质所必需的遗传信息的生物大分子，是生物体发育和正常运作必不可少的生物大分子。一般情况下，是以双螺旋结构存在。</p></blockquote><p>现实中的DNA由碱基、脱氧核糖和磷酸双分子层组成，两条脱氧核苷酸链通过碱基间的氢键形成的碱基对相连，形成稳定的结构。碱基由四种，腺嘌呤，鸟嘌呤，胸腺嘧啶，胞嘧啶。</p><p>那么如何在计算机中对DNA进行编码？也不需要想的过于复杂，我们只需要表达每个位置上的碱基就行啦！譬如，一条DNA链可以写作：012332100123；每个数字对应一个碱基的映射。为了提高运行速度，我们将其以二进制的形式进行简化表达，即一条DNA链可以看做一串二进制文本：01011101010</p><blockquote><p>个体与种群</p></blockquote><p>我们将每条DNA链看做一个个体，实际上，也就是问题的一个解。譬如，我们寻找映射<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(X,Y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span></span>的最优解，其中一个可能的值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>=</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">X=6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">6</span></span></span></span>，便是一个个体。</p><p>种群就是个体的集合。注意，同一种群内部发生信息交换，不同种群之间不会发生信息交换。例如，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>的全集不会与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span>的全集发生交换，DNA交换只会发生在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>集合或<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span>集合内部。</p><blockquote><p>遗传： 生物的DNA来自于父母，一般情况下由父亲提供X或Y染色体，母亲提供X染色体</p></blockquote><p>假设现在有两个个体：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1001</mn><mtext> </mtext><mn>0001</mn></mrow><annotation encoding="application/x-tex">1001\ 0001</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1001</span><span class="mspace"> </span><span class="mord">0001</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>00011001</mn></mrow><annotation encoding="application/x-tex">0001 1001</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00011001</span></span></span></span> 分别作为父亲和母亲，生下了一个新的个体，那么该个体的DNA将由父亲和母亲来决定，例如前四位由父亲提供，后四位由母亲提供，那么该子代个体就是：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1001</mn><mtext> </mtext><mn>1001</mn></mrow><annotation encoding="application/x-tex">1001\ 1001</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1001</span><span class="mspace"> </span><span class="mord">1001</span></span></span></span></p><blockquote><p>变异： 在DNA的某个位置发生了变化</p></blockquote><p>因为是二进制表达的DNA，那么所谓的变化就是某一位由0到1，或是由1到0</p><blockquote><p>自然选择： 优胜劣汰，将会选择更加适宜的个体</p></blockquote><p>个体的适宜度，实际上也就是满足函数最优解的值。适宜度越高，该个体在下一轮的自然选择中越容易存活，从而保留自身的DNA。</p><hr><p>下面我们将来说一下如何实现一个GA算法~</p><h3 id="一、创建属于我们的种群">一、创建属于我们的种群</h3><p>在一切的开始，我们为种群制定一个规则，比方说这个种群的大小，DNA链的长度~</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Population_Nums=<span class="number">200</span> <span class="comment"># 种群有200个个体</span></span><br><span class="line">DNA_Size=<span class="number">16</span> <span class="comment"># DNA链的长度</span></span><br><span class="line">Range=[[-<span class="number">3</span>,<span class="number">3</span>],[-<span class="number">3</span>,<span class="number">3</span>]] <span class="comment"># 自变量的值域范围</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="comment"># pop维度为(n,Population_Nums,DNA_Size)</span></span><br><span class="line"><span class="comment"># 其中n表示有几个种群，也就是自变量</span></span><br><span class="line">pop=np.random.randint(<span class="number">0</span>,<span class="number">2</span>,size=(<span class="built_in">len</span>(Range),Population_Nums,DNA_Size))</span><br></pre></td></tr></table></figure><p>种群的数量呢决定了收敛的速度，但是也有可能因此陷入局部最优解，并降低运行速度(注意跟收敛速度的区别)</p><p>DNA链的长度实际上决定了<code>精度</code>。这句话如何理解呢？我们要来看如何将一串DNA转译成我们需要的信息~</p><p>假设有一串DNA链：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10101</mn></mrow><annotation encoding="application/x-tex">10101</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10101</span></span></span></span>，我们的映射函数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(X,Y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>的值域为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mn>5</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[-5,5]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">5</span><span class="mclose">]</span></span></span></span>，想一想如何进行转译呢？</p><p>为了方便计算和模拟遗传变异，我们采用了二进制作为个体DNA。而我们想要的结果是十进制，那就需要先将二进制转为十进制！<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>4</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>3</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>0</mn></msup><mo>=</mo><mn>21</mn></mrow><annotation encoding="application/x-tex">1*2^{4}+0*2^3+1*2^2+0*2^1+1*2^0=21</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">21</span></span></span></span>，这样就来到了十进制。对于种群的基因，只需要除以一个最大值，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>11111</mn></mrow><annotation encoding="application/x-tex">11111</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">11111</span></span></span></span>，或者说<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>，就可以压缩到区间<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>，然后再通过区间匹配到实际值域区间中。</p><p>这段写成代码的话，可以是这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decoding</span>(<span class="params">pop</span>):</span><br><span class="line">    deList=[]</span><br><span class="line">    <span class="keyword">for</span> idx,i <span class="keyword">in</span> <span class="built_in">enumerate</span>(pop):</span><br><span class="line">        deList.append(i.dot(<span class="number">2</span>**np.arange(DNA_Size))/<span class="built_in">float</span>(<span class="number">2</span>**DNA_Size)*(Range[idx][<span class="number">1</span>]-Range[idx][<span class="number">0</span>])+Range[idx][<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> deList</span><br></pre></td></tr></table></figure><p>好啦，那么现在我们就需要评估一个个体的适宜度，这也是自然选择中最重要的部分。适宜度越大的个体，越容易在下一轮的选择中存活。</p><p>假设函数为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">F</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>*(<span class="number">1</span>-x)**<span class="number">2</span>*np.exp(-(x**<span class="number">2</span>)-(y+<span class="number">1</span>)**<span class="number">2</span>)-<span class="number">10</span>*(x/<span class="number">5</span>-x**<span class="number">3</span>-y**<span class="number">5</span>)*np.exp(-x**<span class="number">2</span>-y**<span class="number">2</span>)-<span class="number">1</span>/<span class="number">3</span>**np.exp(-(x+<span class="number">1</span>)**<span class="number">2</span>-y**<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>假设优化目标是求这个函数的极大值，那么我们的适宜度就应该是个体DNA转为十进制编码后，带入函数的结果，这个结果越大，说明适宜度越高。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fitnetss</span>(<span class="params">pop</span>):</span><br><span class="line">    deList=decoding(pop)</span><br><span class="line">    pred=F(*deList)</span><br><span class="line">    <span class="keyword">return</span> (pred-pred.<span class="built_in">min</span>())+<span class="number">1e-3</span></span><br></pre></td></tr></table></figure><p>后面这个<code>1e-3</code>的实际含义是，让每一个个体都有机会，而不是绝对肯定或绝对否定哪个个体。</p><hr><h3 id="二、遗传和变异">二、遗传和变异</h3><p>在遗传部分，我们设置了一个参数，用来控制遗传发生的比例。毕竟有些个体并没有后代~</p><p>在变异部分，我们同样也有一个较小的参数，用来控制变异发生的可能性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mutation</span>(<span class="params">pop,rate=<span class="number">1e-3</span></span>):</span><br><span class="line">    <span class="comment"># 变异将随机发生</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> pop:</span><br><span class="line">        <span class="keyword">if</span> np.random.rand()&lt;rate:</span><br><span class="line">            <span class="comment"># 随机一个个体发生变异</span></span><br><span class="line">            i[np.random.randint(<span class="number">0</span>,DNA_Size)]^=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>变异的作用是跳出局部最优解，下面是进行变异的三次结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(x,y):  -<span class="number">0.03668099860435703</span> <span class="number">1.499994903802568</span></span><br><span class="line">(x,y):  -<span class="number">0.013274610833800438</span> <span class="number">1.6933678801875045</span></span><br><span class="line">(x,y):  <span class="number">0.05119961805341333</span> <span class="number">1.4999723732455</span></span><br></pre></td></tr></table></figure><p>而下面是不进行变异的三次结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(x,y):  -<span class="number">0.027307929236169315</span> <span class="number">1.5981612562037268</span></span><br><span class="line">(x,y):  <span class="number">0.18948037561657305</span> <span class="number">1.4062327388663727</span></span><br><span class="line">(x,y):  -<span class="number">0.0962074456338553</span> <span class="number">1.4998157322296937</span></span><br></pre></td></tr></table></figure><p>可以发现，发生了变异后，结果稳定在[0,1.5]，而不是陷入部分最优解。</p><p>遗传过程的算法可以描述如下：</p><ul><li>遍历种群中的每个个体，并将该个体A作为父母个体</li><li>有一定概率该个体可以随机跟种群中的其他个体B发生基因交换（甚至包括它自己，但这对结果并没有影响，只是降低了遗传概率）</li><li>发生基因交换时，随机选择DNA的断点，断点前半部分由个体A提供，后半段由个体B提供</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">crossover</span>(<span class="params">pop,rate=<span class="number">0.7</span></span>):</span><br><span class="line">    <span class="comment"># 注意这里只与自身种群发生变化</span></span><br><span class="line">    new_pop=[]</span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> pop.shape[<span class="number">0</span>]:</span><br><span class="line">        children=[]</span><br><span class="line">        <span class="keyword">for</span> father <span class="keyword">in</span> pop[idx]:</span><br><span class="line">            <span class="keyword">if</span> np.random.rand()&lt;rate:</span><br><span class="line">                child=father</span><br><span class="line">                mother=pop[idx][np.random.randn(<span class="number">0</span>,Population_Nums)]</span><br><span class="line">                <span class="comment"># 随机选择发生互换的碱基对</span></span><br><span class="line">                choicePoint=np.random.randn(<span class="number">0</span>,DNA_Size)</span><br><span class="line">                child[choicePoint:]=mother[choicePoint:]</span><br><span class="line">             <span class="comment"># 发生变异</span></span><br><span class="line">            children.append(mutation(child))</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> chidren</span><br></pre></td></tr></table></figure><hr><h3 id="三、自然选择">三、自然选择</h3><p>这部分将会根据个体的适宜度分配权值，决定该个体基因出现在下一轮概率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">select</span>(<span class="params">pop,fitness</span>):</span><br><span class="line">    pop_s=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> pop:</span><br><span class="line">        pop_s.append(i[np.random.choice(np.array(Population_Nums),size=Population_Nums,replace=<span class="literal">True</span>,p=(fitness)/(fitness.<span class="built_in">sum</span>()))])</span><br><span class="line">    <span class="keyword">return</span> pop_s</span><br></pre></td></tr></table></figure><hr><h3 id="四、基于面向对象的遗传算法">四、基于面向对象的遗传算法</h3><p>现在，我们就要将这些东西封装成一个类啦，提高复用性和稳定性。</p><p>首先是构造函数，就是先写入一些常量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GA</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,popN=<span class="number">2000</span>,DNA_Size=<span class="number">16</span>,Epochs=<span class="number">500</span>,crossRate=<span class="number">0.8</span>,mutationRate=<span class="number">0.005</span></span>):</span><br><span class="line">        self.popN=popN <span class="comment"># 种群数量</span></span><br><span class="line">        self.DNA_Size=DNA_Size <span class="comment"># DNA长度</span></span><br><span class="line">        self.Epochs=Epochs <span class="comment"># 迭代次数</span></span><br><span class="line">        self.crossRate=crossRate <span class="comment"># 交叉遗传概率</span></span><br><span class="line">        self.mutationRate=mutationRate  <span class="comment"># 变异概率</span></span><br><span class="line">        self.Range=<span class="literal">None</span> <span class="comment"># 输入数据的值域</span></span><br><span class="line">        <span class="comment"># 例如：[[-3,3],[2,5],[1,9]] 这表示第一个变量的值域是[-3,3]，第二个是[2,5]</span></span><br><span class="line">        </span><br><span class="line">        self.plot_=[] <span class="comment"># 保留每轮的最优值</span></span><br><span class="line">        self.bestScore=<span class="literal">None</span> <span class="comment"># 最佳得分</span></span><br><span class="line">        self.best=<span class="literal">None</span> <span class="comment"># 最佳个体</span></span><br></pre></td></tr></table></figure><p>然后，需要提供一个输入函数的接口：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fit_function</span>(<span class="params">self,f,<span class="built_in">range</span></span>):</span><br><span class="line">     self.f=f</span><br><span class="line">     self.Range=<span class="built_in">range</span></span><br><span class="line">     <span class="comment"># 初始化种群</span></span><br><span class="line">     self.pop=np.random.randint(<span class="number">0</span>,<span class="number">2</span>,size=(<span class="built_in">len</span>(<span class="built_in">range</span>),self.popN,self.DNA_Size))</span><br><span class="line">     self.plot_=[]</span><br></pre></td></tr></table></figure><p>解码方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decoding</span>(<span class="params">self</span>):</span><br><span class="line">     deList = []</span><br><span class="line">     <span class="keyword">for</span> idx, i <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.pop):</span><br><span class="line">         deList.append(</span><br><span class="line">             i.dot(<span class="number">2</span> ** np.arange(self.DNA_Size)) / <span class="built_in">float</span>(<span class="number">2</span> ** self.DNA_Size) * (self.Range[idx][<span class="number">1</span>] - self.Range[idx][<span class="number">0</span>]) + self.Range[idx][</span><br><span class="line">                 <span class="number">0</span>])</span><br><span class="line">     <span class="keyword">return</span> deList</span><br></pre></td></tr></table></figure><p>适应值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fitness</span>(<span class="params">self</span>):</span><br><span class="line">    deList=self.decoding()</span><br><span class="line">    pred=self.f(*deList)</span><br><span class="line">    <span class="keyword">return</span> (pred-pred.<span class="built_in">min</span>())+<span class="number">1e-3</span></span><br></pre></td></tr></table></figure><p>变异：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mutation</span>(<span class="params">self,pop</span>):</span><br><span class="line">    <span class="keyword">if</span> np.random.rand()&lt;self.mutationRate:</span><br><span class="line">        pop[np.random.randint(<span class="number">0</span>,self.DNA_Size)]^=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> pop</span><br></pre></td></tr></table></figure><p>交叉遗传：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">crossover</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(self.pop.shape[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> _,father <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.pop[idx]):</span><br><span class="line">            child = father</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> np.random.rand()&lt;self.crossRate:</span><br><span class="line">                mother=self.pop[idx][np.random.randint(<span class="number">0</span>,self.popN)]</span><br><span class="line">                crossPoint=np.random.randint(<span class="number">0</span>,self.DNA_Size)</span><br><span class="line">                child[crossPoint:]=mother[crossPoint:]</span><br><span class="line">                </span><br><span class="line">            self.pop[idx][_]=self.mutation(child)</span><br></pre></td></tr></table></figure><p>自然选择：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">select</span>(<span class="params">self,fitness</span>):</span><br><span class="line">    pops=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> self.pop:</span><br><span class="line">        pops.append(i[np.random.choice(self.popN,size=self.popN,replace=<span class="literal">True</span>,p=fitness/(fitness.<span class="built_in">sum</span>()))])</span><br><span class="line">    <span class="keyword">return</span> pops</span><br></pre></td></tr></table></figure><p>打印信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getInfo</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;最优参数为： &#x27;</span>,[i <span class="keyword">for</span> i <span class="keyword">in</span> self.best])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;最优结果为: &quot;</span>,self.bestScore)</span><br></pre></td></tr></table></figure><p>提供一个训练接口和绘图接口供使用者调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">self,plot=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(self.Epochs):</span><br><span class="line">        self.crossover() <span class="comment"># 交叉变异</span></span><br><span class="line"></span><br><span class="line">        f=self.fitness() <span class="comment"># 计算适宜度</span></span><br><span class="line">                   </span><br><span class="line">        max_fit = np.argmax(f) <span class="comment"># 获取最大适宜度下标</span></span><br><span class="line">        k=[(i[max_fit].dot(<span class="number">2</span>**np.arange(self.DNA_Size))/<span class="built_in">float</span>(<span class="number">2</span>**self.DNA_Size))*(self.Range[idx][<span class="number">1</span>]-self.Range[idx][<span class="number">0</span>])+self.Range[idx][<span class="number">0</span>] <span class="keyword">for</span> idx,i <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.pop)] <span class="comment"># 获取最佳个体的十进制值</span></span><br><span class="line">        bs=self.f(*k) <span class="comment"># 计算该值的适宜度</span></span><br><span class="line">        <span class="comment"># 请注意，适宜度并不代表函数结果，适宜度是一个相对的值</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 记录全局最优结果</span></span><br><span class="line">        <span class="keyword">if</span> self.bestScore==<span class="literal">None</span> <span class="keyword">or</span> bs&gt;self.bestScore:</span><br><span class="line">            self.bestScore=bs</span><br><span class="line">            self.best=k</span><br><span class="line">  </span><br><span class="line">self.pop = np.array(self.select(f)) <span class="comment"># 自然选择</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> plot:</span><br><span class="line">            self.plot_.append(bs)</span><br><span class="line"></span><br><span class="line">    self.getInfo()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">if</span> self.plot_==[]:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    plt.plot([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.Epochs)],self.plot_)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;Epochs&quot;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&quot;BestValue&quot;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p>最终的结果如下：</p><img src="/2023/08/26/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/image-20230827172052205.png" alt="image-20230827172052205" style="zoom:50%;"><p>可以看到在25个Epoch左右就开始收敛了。</p><hr><h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GA</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,popN=<span class="number">2000</span>,DNA_Size=<span class="number">16</span>,Epochs=<span class="number">500</span>,crossRate=<span class="number">0.8</span>,mutationRate=<span class="number">0.005</span></span>):</span><br><span class="line">        self.popN=popN</span><br><span class="line">        self.DNA_Size=DNA_Size</span><br><span class="line">        self.Epochs=Epochs</span><br><span class="line">        self.crossRate=crossRate</span><br><span class="line">        self.mutationRate=mutationRate</span><br><span class="line">        self.Range=<span class="literal">None</span></span><br><span class="line">        self.plot_=[]</span><br><span class="line">        self.bestScore=<span class="literal">None</span></span><br><span class="line">        self.best=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fit_function</span>(<span class="params">self,f,<span class="built_in">range</span></span>):</span><br><span class="line">        self.f=f</span><br><span class="line">        self.Range=<span class="built_in">range</span></span><br><span class="line">        self.pop=np.random.randint(<span class="number">0</span>,<span class="number">2</span>,size=(<span class="built_in">len</span>(<span class="built_in">range</span>),self.popN,self.DNA_Size))</span><br><span class="line">        self.plot_=[]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decoding</span>(<span class="params">self</span>):</span><br><span class="line">        deList = []</span><br><span class="line">        <span class="keyword">for</span> idx, i <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.pop):</span><br><span class="line">            deList.append(</span><br><span class="line">                i.dot(<span class="number">2</span> ** np.arange(self.DNA_Size)) / <span class="built_in">float</span>(<span class="number">2</span> ** self.DNA_Size) * (self.Range[idx][<span class="number">1</span>] - self.Range[idx][<span class="number">0</span>]) + self.Range[idx][</span><br><span class="line">                    <span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span> deList</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fitness</span>(<span class="params">self</span>):</span><br><span class="line">        deList=self.decoding()</span><br><span class="line">        pred=self.f(*deList)</span><br><span class="line">        <span class="keyword">return</span> (pred-pred.<span class="built_in">min</span>())+<span class="number">1e-3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mutation</span>(<span class="params">self,pop</span>):</span><br><span class="line">        <span class="keyword">if</span> np.random.rand()&lt;self.mutationRate:</span><br><span class="line">            pop[np.random.randint(<span class="number">0</span>,self.DNA_Size)]^=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> pop</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">crossover</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(self.pop.shape[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">for</span> _,father <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.pop[idx]):</span><br><span class="line">                child = father</span><br><span class="line">                <span class="keyword">if</span> np.random.rand()&lt;self.crossRate:</span><br><span class="line">                    mother=self.pop[idx][np.random.randint(<span class="number">0</span>,self.popN)]</span><br><span class="line">                    crossPoint=np.random.randint(<span class="number">0</span>,self.DNA_Size)</span><br><span class="line">                    child[crossPoint:]=mother[crossPoint:]</span><br><span class="line">                self.pop[idx][_]=self.mutation(child)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select</span>(<span class="params">self,fitness</span>):</span><br><span class="line">        pops=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.pop:</span><br><span class="line">            pops.append(i[np.random.choice(self.popN,size=self.popN,replace=<span class="literal">True</span>,p=fitness/(fitness.<span class="built_in">sum</span>()))])</span><br><span class="line">        <span class="keyword">return</span> pops</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getInfo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;最优参数为： &#x27;</span>,[i <span class="keyword">for</span> i <span class="keyword">in</span> self.best])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;最优结果为: &quot;</span>,self.bestScore)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">self,plot=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(self.Epochs):</span><br><span class="line">            self.crossover()</span><br><span class="line"></span><br><span class="line">            f=self.fitness()</span><br><span class="line">            max_fit = np.argmax(f)</span><br><span class="line">            k=[(i[max_fit].dot(<span class="number">2</span>**np.arange(self.DNA_Size))/<span class="built_in">float</span>(<span class="number">2</span>**self.DNA_Size))*(self.Range[idx][<span class="number">1</span>]-self.Range[idx][<span class="number">0</span>])+self.Range[idx][<span class="number">0</span>] <span class="keyword">for</span> idx,i <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.pop)]</span><br><span class="line">            bs=self.f(*k)</span><br><span class="line">            <span class="keyword">if</span> self.bestScore==<span class="literal">None</span> <span class="keyword">or</span> bs&gt;self.bestScore:</span><br><span class="line">                self.bestScore=bs</span><br><span class="line">                self.best=k</span><br><span class="line">            self.pop = np.array(self.select(f))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> plot:</span><br><span class="line">                self.plot_.append(bs)</span><br><span class="line"></span><br><span class="line">        self.getInfo()</span><br><span class="line">        <span class="keyword">return</span> self.best</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">plot</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.plot_==[]:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        plt.plot([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.Epochs)],self.plot_)</span><br><span class="line">        plt.xlabel(<span class="string">&quot;Epochs&quot;</span>)</span><br><span class="line">        plt.ylabel(<span class="string">&quot;BestValue&quot;</span>)</span><br><span class="line">        plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ga=GA(popN=<span class="number">200</span>,DNA_Size=<span class="number">16</span>,Epochs=<span class="number">200</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">F</span>(<span class="params">x, y</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span> * (<span class="number">1</span> - x) ** <span class="number">2</span> * np.exp(-(x ** <span class="number">2</span>) - (y + <span class="number">1</span>) ** <span class="number">2</span>) - <span class="number">10</span> * (x / <span class="number">5</span> - x ** <span class="number">3</span> - y ** <span class="number">5</span>) * np.exp(</span><br><span class="line">            -x ** <span class="number">2</span> - y ** <span class="number">2</span>) - <span class="number">1</span> / <span class="number">3</span> ** np.exp(-(x + <span class="number">1</span>) ** <span class="number">2</span> - y ** <span class="number">2</span>)</span><br><span class="line">    Range = [[-<span class="number">3</span>, <span class="number">3</span>], [-<span class="number">3</span>, <span class="number">3</span>]]</span><br><span class="line">    </span><br><span class="line">    ga.fit_function(F,Range)</span><br><span class="line">    ga.train(<span class="literal">True</span>)</span><br><span class="line">    ga.plot()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">可能陷入局部最优</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="最优化" scheme="http://example.com/tags/%E6%9C%80%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>【赋权算法】熵权法</title>
    <link href="http://example.com/2023/08/24/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E7%86%B5%E6%9D%83%E6%B3%95/"/>
    <id>http://example.com/2023/08/24/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E7%86%B5%E6%9D%83%E6%B3%95/</id>
    <published>2023-08-24T09:18:28.852Z</published>
    <updated>2023-08-24T09:54:59.807Z</updated>
    
    <content type="html"><![CDATA[<p>在开始之前，我们先说一下信息熵的概念。</p><p>当一件事情发生，如果是意料之中，那么这个事情就并不能拿来当做茶余饭后的谈资，我们可以说这个事情并没有什么信息和价值。而当一件不可能发生的事情发生的时候，我们可能就会觉得震撼三观，这件事情太Crazy了，带来的信息量也就很多。</p><p>哼哼，通过上文我们可以知道，一个事情越稳定，信息量就越少，那么如何去衡量呢？我们可以用概率的倒数（也就是负相关）来衡量。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mo>=</mo><mo>−</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I=-log(p(x))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span>也就是自信息，一件事情越确定，自信息也就越小。</p><p>而信息熵就是自信息的期望，代表这一件事情的<code>混乱程度</code>。信息熵越大，混乱程度越大，说明这件事情越疯狂。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>H</mi><mo>=</mo><mo>−</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H=-log(p(x))p(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></span></p><hr><p>再说熵权法(Entropy Weight Method)，熵权法是客观赋权的一种方式，对应的主观赋权有专家打分法，相似的还有层次分析法。熵权法是利用信息稳定程度而提出的方法，一般来说，某列属性越稳定，它的信息就越可信，那么在实际的权重也应当越高。</p><p>不说人话，那就是：</p><blockquote><p>一般来说，若某个指标的信息熵越小，表明指标值得变异程度越大，<strong>提供的信息量</strong>越多，在综合评价中所能起到的作用也越大，其权重也就越大。相反，某个指标的信息熵越大，表明指标值得变异程度越小，<strong>提供的信息量</strong>也越少，在综合评价中所起到的作用也越小，其权重也就越小。</p></blockquote><p>你会发现在这段话中，自信息和提供信息实际上是成反比的。</p><p>不管他，只需要知道原本越稳定的数据，对异常越敏感，也越可信。</p><p>在实际计算中，遵循以下步骤：</p><p><code>step1</code> 归一化</p><p><strong>正向指标</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>Y</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><mfrac><mrow><msub><mi>X</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>−</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>−</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">Y_{ij}=\frac{X_{ij}-min(X_i)}{max(X_i)-min(X_i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">min</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">min</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><strong>负向指标</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>Y</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><mfrac><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>−</mo><msub><mi>X</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>−</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">Y_{ij}=\frac{max(X_i)-X_{ij}}{max(X_i)-min(X_i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">min</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><code>step2</code> 求频率替换概率</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>p</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><mfrac><msub><mi>Y</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mrow><mo>∑</mo><msub><mi>Y</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">p_{ij}=\frac{Y_{ij}}{\sum Y_{ij}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3324em;vertical-align:-0.9721em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9721em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><code>step3</code> 计算归一化信息熵</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mi>n</mi><mi>t</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>y</mi><mo>=</mo><mo>−</mo><mfrac><mn>1</mn><mrow><mi>l</mi><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>∑</mo><msub><mi>p</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mi>l</mi><mi>n</mi><mo stretchy="false">(</mo><msub><mi>p</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Entropy=-\frac{1}{ln(n)}\sum p_{ij}ln(p_{ij})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2574em;vertical-align:-0.936em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-symbol large-op" style="position:relative;top:0em;">∑</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>以什么为底的不重要啦</p><p><code>step4</code> 计算权重</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>W</mi><mi>j</mi></msub><mo>=</mo><mfrac><mrow><mn>1</mn><mo>−</mo><msub><mi>E</mi><mi>j</mi></msub></mrow><mrow><mi>k</mi><mo>−</mo><mo>∑</mo><msub><mi>E</mi><mi>j</mi></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">W_j=\frac{1-E_j}{k-\sum E_j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3324em;vertical-align:-0.9721em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9721em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><hr><p>以下是实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">EWM</span>(<span class="params">data</span>):</span><br><span class="line">    t=(data-data.<span class="built_in">min</span>(axis=<span class="number">0</span>))/(data.<span class="built_in">max</span>(axis=<span class="number">0</span>)-data.<span class="built_in">min</span>(axis=<span class="number">0</span>))</span><br><span class="line">    t=t/t.<span class="built_in">sum</span>(axis=<span class="number">0</span>)</span><br><span class="line">    t[t&lt;<span class="number">0.0001</span>]=<span class="number">0.0001</span></span><br><span class="line">    entropy=-<span class="number">1</span>/np.log(t.shape[<span class="number">0</span>])*np.<span class="built_in">sum</span>(t*np.log(t))</span><br><span class="line">    <span class="keyword">return</span> [(<span class="number">1</span>-i)/(<span class="built_in">len</span>(entropy)-<span class="built_in">sum</span>(entropy)) <span class="keyword">for</span> i <span class="keyword">in</span> entropy]</span><br></pre></td></tr></table></figure><p>当然，这样的结果只是个权重，我们还需要对数据做乘法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.matmul(data.values,np.array(EWM(data)).T)</span><br></pre></td></tr></table></figure><p><img src="/2023/08/24/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E7%86%B5%E6%9D%83%E6%B3%95/image-20230824175234863.png" alt="image-20230824175234863"></p><p>对这样一组数据，A十分稳定，B是正态分布，C是二分布，得到的结果是：</p><p><strong>信息熵：</strong></p><p><img src="/2023/08/24/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E7%86%B5%E6%9D%83%E6%B3%95/image-20230824175347424.png" alt="image-20230824175347424"></p><p><strong>权重：</strong></p><p><img src="/2023/08/24/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E7%86%B5%E6%9D%83%E6%B3%95/image-20230824175405861.png" alt="image-20230824175405861"></p><hr><p>确实符合越稳定权重越大。</p><p><strong>熵权法的优点</strong></p><p>熵值法是根据各项指标指标值的变异程度来确定指标权数的，这是一种客观赋权法，避免了人为因素带来的偏差。</p><p>相对那些主观赋值法，精度较高客观性更强，能够更好的解释所得到的结果。</p><p><strong>熵权法的缺点</strong></p><p>**·**忽略了指标本身重要程度，有时确定的指标权数会与预期的结果相差甚远，同时熵值法不能减少评价指标的维数，也就是熵权法符合数学规律具有严格的数学意义，但往往会忽视决策者主观的意图；</p><p>**·**如果指标值的变动很小或者很突然地变大变小，熵权法用起来有局限</p><p><strong>熵权法的使用</strong></p><p>**·**一般指标个数最好小于对象个数，比较好；</p><p>**·**可用于任何评价问题中的确定指标权重；</p><p>**·**可用于剔除指标体系中对评价结果贡献不大的指标；</p><p>**·**可以用于任何需要确定权重的过程，也可以结合一些方法共同使用。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">客观而非主观</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数学" scheme="http://example.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>【数据分析实践】斯里兰卡生态服务价值计算</title>
    <link href="http://example.com/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    <id>http://example.com/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/</id>
    <published>2023-08-22T10:10:24.626Z</published>
    <updated>2023-08-22T14:22:03.241Z</updated>
    
    <content type="html"><![CDATA[<h1>斯里兰卡生态服务价值计算</h1><hr><h2 id="一、引言">一、引言</h2><p>生态系统服务价值是指人类<strong>间接</strong>或<strong>直接</strong>从生态系统各服务功能中获得的<strong>收益</strong>，对人类社会福祉起着极其重要的贡献。生态系统服务价值核算作为一项<strong>基础性研究工作</strong>，对生态安全格局的构建、生态补偿以及生态文明建设等研究有重要的参考价值，对促进人与自然和谐共生以及人类自己的可持续发展有重要意义(熊睿毅，2021)。</p><p>联合国生态评估组将生态系统服务分为四类：</p><ul><li>供给服务<ul><li>供给服务主要是提供人类生存生活所必须的物质资源，譬如食物、水资源、原材料等</li></ul></li><li>调节服务<ul><li>调节服务是指生态系统在发挥维持自我稳定和自我修复的特性时提供的服务，主要包括水文调节、气体调节、气候调节、净化环境等功能</li></ul></li><li>支持服务<ul><li>支持服务是指作为其他服务的基础，起到支持和维持作用的服务，譬如土壤保持、生物多样性保持和养分循环维持等</li></ul></li><li>文化服务<ul><li>文化服务是指为人类提供的满足人类文化兴趣和需求的服务，譬如灵感获取、宗教服务、精神价值、教育价值等，其最大的特点就是非消耗性，不受到消费而减少。</li></ul></li></ul><p>本文采用模拟市场法进行价值评估，细化方法为当量因子法，国内主流的是谢高地在Costanza的研究基础上进行改良后的适用于中国陆地生态系统的单位面积价值当量因子动态评估模型，其单位面积生态系统服务价值当量表如下：</p><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230822160625301.png" alt="image-20230822160625301" style="zoom:50%;"><center>单位面积生态系统服务价值当量</center><p>生态系统服务价值量的计算公式如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mi>S</mi><mi>V</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>m</mi><mo>=</mo><mn>1</mn></mrow><mi>x</mi></munderover><msub><mi>A</mi><mi>m</mi></msub><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi>y</mi></munderover><msub><mi>E</mi><mrow><mi>m</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">ESV=\sum_{m=1}^xA_m\sum_{n=1}^yE_{mn}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">ES</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9656em;vertical-align:-1.2671em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8829em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2671em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6985em;"><span style="top:-1.8829em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3471em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2671em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">mn</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>为第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>类生态系统，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>为第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>个服务功能，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">A_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为研究范围内第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>个生态系统的面积，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mrow><mi>m</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">E_{mn}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">mn</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>则是该服务功能的标准单位价值。</p><p>标准单位<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mi>S</mi><mi>V</mi></mrow><annotation encoding="application/x-tex">ESV</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">ES</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span>当量因子的价值公式为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>V</mi><mo>=</mo><mn>1</mn><mi mathvariant="normal">/</mi><mn>7</mn><mo>×</mo><mi>P</mi><mo>×</mo><mi>Q</mi></mrow><annotation encoding="application/x-tex">V=1/7\times P\times Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1/7</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span></span></span></span></span></p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>表示粮食均价，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span></span></span></span>表示粮食单产。</p><hr><h2 id="二、数据源">二、数据源</h2><p>土地覆盖数据来自于Esri公司的Sentinel-2 Land Cover Explorer产品，网址为：<a href="https://livingatlas.arcgis.com/landcoverexplorer/#mapCenter=-66.80083417615404%2C-9.321964396201427%2C11&amp;mode=step&amp;timeExtent=2017%2C2022&amp;year=2022%E3%80%82%E8%AF%A5%E4%BA%A7%E5%93%81%E6%8F%90%E4%BE%9B%E4%BA%86%E5%93%A8%E5%85%B5%E4%BA%8C%E5%8F%B7%E8%8E%B7%E5%8F%96%E7%9A%842017-2020%E5%B9%B410m%E5%88%86%E8%BE%A8%E7%8E%87%E7%9A%84%E5%85%A8%E7%90%83%E5%9C%9F%E5%9C%B0%E8%A6%86%E7%9B%96%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%EF%BC%8C%E4%B8%80%E5%85%B1%E6%9C%89%E4%B9%9D%E7%B1%BB%EF%BC%8C%E5%8C%85%E6%8B%AC%E6%B0%B4%E7%B3%BB%E3%80%81%E6%A3%AE%E6%9E%97%E3%80%81%E6%B9%BF%E5%9C%B0%E3%80%81%E8%80%95%E5%9C%B0%E3%80%81%E5%BB%BA%E7%AD%91%E7%94%A8%E5%9C%B0%E3%80%81%E8%A3%B8%E5%9C%B0%E3%80%81%E5%86%B0%E9%9B%AA%E3%80%81%E4%BA%91%E5%B1%82%E3%80%81%E8%8D%89%E7%94%B8%E3%80%82">https://livingatlas.arcgis.com/landcoverexplorer/#mapCenter=-66.80083417615404%2C-9.321964396201427%2C11&amp;mode=step&amp;timeExtent=2017%2C2022&amp;year=2022。该产品提供了哨兵二号获取的2017-2020年10m分辨率的全球土地覆盖类型数据，一共有九类，包括水系、森林、湿地、耕地、建筑用地、裸地、冰雪、云层、草甸。</a></p><p>行政区划数据来自于GADM官网，该数据集提供了全球所有国家及其下级行政区划的矢量边界和空间数据，网址为：<a href="https://gadm.org/index.html%E3%80%82%E5%80%BC%E5%BE%97%E6%B3%A8%E6%84%8F%E7%9A%84%EF%BC%8C%E8%BF%99%E9%87%8C%E7%9A%84%E4%B8%AD%E5%9B%BD%E6%95%B0%E6%8D%AE%E5%B9%B6%E6%B2%A1%E6%9C%89%E5%8F%B0%E6%B9%BE%E5%92%8C%E4%B9%9D%E6%AE%B5%E7%BA%BF%EF%BC%8C%E4%B8%8D%E5%BB%BA%E8%AE%AE%E5%9C%A8%E8%BF%99%E9%87%8C%E4%B8%8B%E8%BD%BD%E7%B2%BE%E7%A1%AE%E7%9A%84%E5%9B%BD%E5%AE%B6%E6%95%B0%E6%8D%AE%E3%80%82">https://gadm.org/index.html。值得注意的，这里的中国数据并没有台湾和九段线，不建议在这里下载精确的国家数据。</a></p><p>统计年鉴数据，包括主要农作物产量、单价，来自于国际粮农组织，官网为：<a href="https://www.fao.org/faostat/en/#data">https://www.fao.org/faostat/en/#data</a></p><hr><h2 id="三、数据处理">三、数据处理</h2><h3 id="3-1-数据预处理">3.1 数据预处理</h3><h4 id="3-1-1-土地覆盖类型数据处理">3.1.1 土地覆盖类型数据处理</h4><p>在Esri上下载的土地覆盖类型数据，每一年都有两幅图像，如下图所示，我们需要做的就是将其拼接起来，并通过斯里兰卡矢量边界进行裁剪。</p><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230822163243616.png" alt="image-20230822163243616" style="zoom:33%;"><center>土地覆盖数据</center><p>其中，<code>镶嵌至新栅格</code>在工具箱中的位置如下：数据管理-&gt;栅格-&gt;栅格数据集-&gt;镶嵌至新栅格</p><p><code>裁剪</code>在工具箱中的位置如下：数据管理-&gt;栅格-&gt;栅格处理-&gt;裁剪</p><p>新建一个个人地理数据库，并将下载的<code>2017-2022</code>年数据处理好后保存到该数据库。</p><p><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230822163636053.png" alt="image-20230822163636053"></p><center>工作数据库<p>裁剪完之后，数据分类值域会自动填充至[0,255]，这并不是我们想要的，因此，通过栅格计算器工具处理掉不需要的值。</p><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230822163717282.png" alt="image-20230822163717282" style="zoom:50%;"><center>异常数据<p><code>栅格计算器</code>工具位于空间分析工具-&gt;地图代数-&gt;栅格计算器，计算表达式为：<code>Con(&quot;lc2021&quot;&gt;11,0,&quot;lc2021&quot;)</code>，该条件语句将大于11的值映射至0，而小于11的保持原状。</p><h4 id="3-1-2-产量、价格数据处理">3.1.2 产量、价格数据处理</h4><p>我们读取数据，并进行简单的统计量查看。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">path=<span class="string">r&quot;Path&quot;</span></span><br><span class="line">yield_=pd.read_csv(path+<span class="string">r&quot;\yield.csv&quot;</span>)</span><br><span class="line">pp_=pd.read_csv(path+<span class="string">r&quot;\Producer Prices.csv&quot;</span>)</span><br><span class="line">yield_.head()</span><br></pre></td></tr></table></figure><p><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230818164633501.png" alt="image-20230818164633501"></p><center>产量数据<p>需要用到的属性只有<code>Item,Year,Unit,Value</code>,为了保证数据的时效性，我们只使用2000年以后的数据。因此需要对原始数据做时间和属性上的筛选。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yield_=yield_[[<span class="string">&quot;Item&quot;</span>,<span class="string">&quot;Year&quot;</span>,<span class="string">&quot;Unit&quot;</span>,<span class="string">&quot;Value&quot;</span>]]</span><br><span class="line">yield_=yield_[yield_[<span class="string">&quot;Year&quot;</span>]&gt;<span class="number">2000</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于价格数据同理</span></span><br><span class="line">pp_=pp_[[<span class="string">&quot;Item&quot;</span>,<span class="string">&quot;Year&quot;</span>,<span class="string">&quot;Value&quot;</span>,<span class="string">&quot;Element&quot;</span>]]</span><br><span class="line">pp_=pp_[pp_[<span class="string">&quot;Year&quot;</span>]&gt;<span class="number">2000</span>]</span><br></pre></td></tr></table></figure><p>实际上，在这个数据里，产量已经没有问题了。我们只需要做一个简单的处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yield_.groupby(<span class="string">&quot;Item&quot;</span>).mean()[<span class="string">&quot;Value&quot;</span>]/<span class="number">10</span> <span class="comment">#转为千克</span></span><br></pre></td></tr></table></figure><p><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230818165519952.png" alt="image-20230818165519952"></p><center>平均产量<p>便可拿到每种作物近二十年的平均产量(单位：千克/公顷)。</p><hr><h3 id="3-2-基于LSTM的简单时间序列数据扩充">3.2 基于LSTM的简单时间序列数据扩充</h3><p>从世界粮农组织获得Sri Lanka主要农作物产量和价格数据时，其中的主要作物Sorghum仅有2001-2006年的数据，而Millet只有2001-2005,2020-2021这样的间断数据。虽然说可以直接剔除这种过分缺失的数据，但这无疑会对生态因子的计算造成重大影响。为了尽可能保证数据的稳定，我们采用循环神经网络来对数据进行拟合扩充。</p><h4 id="3-2-1-数据探查">3.2.1 数据探查</h4><p>在上一小节，我们读入了产量和价格数据。实际上，这个价格数据是有问题的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pp_.tail(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230818165632557-1692693733911-14.png" alt="image-20230818165632557"></p><center>产量数据<p>高粱数据最新只到2006年。</p><h4 id="3-2-2-模型构建">3.2.2 模型构建</h4><p>在本小节，我们将比较传统一维CNN与RNN在结果上的异同。</p><p>一般做一维RNN时，可以指定一个<code>时间窗口</code>，比如用<code>2006,2007,2008</code>年的数据，推理<code>2009</code>年的数据，用<code>2007,2008,2009</code>年推理<code>2010</code>年。</p><p>我们现在要用之前处理好的<code>pp_c</code>数据中的玉米产量，来预测高粱产量。所以第一步就是将其转化为<code>torch</code>接受的格式。</p><p>别忘记导入模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> functional <span class="keyword">as</span> F</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x=pp_c[pp_c[<span class="string">&#x27;Item&#x27;</span>]==<span class="string">&quot;Maize (corn)&quot;</span>][<span class="string">&#x27;Value&#x27;</span>]</span><br><span class="line">x=torch.FloatTensor(x)</span><br></pre></td></tr></table></figure><p>之前写数据迭代器的时候，除了可以继承自<code>torch.utils.data.DataLoader</code>，也可以是任意的可迭代对象。这里我们可以简单的设置一个类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置迭代器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDataSet</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,seq,ws=<span class="number">6</span></span>):</span><br><span class="line">        <span class="comment"># ws是滑动窗口大小</span></span><br><span class="line">        self.ori=[i <span class="keyword">for</span> i <span class="keyword">in</span> seq[:ws]]</span><br><span class="line">        self.label=[i <span class="keyword">for</span> i <span class="keyword">in</span> seq[ws:]]</span><br><span class="line">        self.reset()</span><br><span class="line">        self.ws=ws</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set</span>(<span class="params">self,dpi</span>):</span><br><span class="line">        <span class="comment"># 添加数据</span></span><br><span class="line">        self.x.append(dpi)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        self.x=self.ori[:]</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,idx</span>):</span><br><span class="line">        <span class="keyword">return</span> self.x[idx:idx+self.ws],self.label[idx]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.x)</span><br></pre></td></tr></table></figure><p>在对数据按照时间窗口进行处理时，主要有两种方式，一种是用原始数据做预测，一种是用预测数据做预测。</p><p>假设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>=</mo><mo stretchy="false">[</mo><mi>a</mi><mn>1</mn><mo separator="true">,</mo><mi>a</mi><mn>2</mn><mo separator="true">,</mo><mi>a</mi><mn>3</mn><mo separator="true">,</mo><mi>a</mi><mn>4</mn><mo separator="true">,</mo><mi>a</mi><mn>5</mn><mo separator="true">,</mo><mi>a</mi><mn>6</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">A=[a1,a2,a3,a4,a5,a6]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">a</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord">6</span><span class="mclose">]</span></span></span></span>，时间窗口大小为3。</p><p>用原始数据做预测，那么输入值为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mn>1</mn><mo separator="true">,</mo><mi>a</mi><mn>2</mn><mo separator="true">,</mo><mi>a</mi><mn>3</mn></mrow><annotation encoding="application/x-tex">a1,a2,a3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">a</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord">3</span></span></span></span>，得到的结果将与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mn>4</mn></mrow><annotation encoding="application/x-tex">a4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord mathnormal">a</span><span class="mord">4</span></span></span></span>做比较。下一轮输入为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mn>2</mn><mo separator="true">,</mo><mi>a</mi><mn>3</mn><mo separator="true">,</mo><mi>a</mi><mn>4</mn></mrow><annotation encoding="application/x-tex">a2,a3,a4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">a</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord">4</span></span></span></span>，得到的结果将与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mn>5</mn></mrow><annotation encoding="application/x-tex">a5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord mathnormal">a</span><span class="mord">5</span></span></span></span>做比较。</p><p>而用预测的数据做预测，第一轮输入值为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mn>1</mn><mo separator="true">,</mo><mi>a</mi><mn>2</mn><mo separator="true">,</mo><mi>a</mi><mn>3</mn></mrow><annotation encoding="application/x-tex">a1,a2,a3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">a</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord">3</span></span></span></span>，得到的结果是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mn>4</mn></mrow><annotation encoding="application/x-tex">b4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span><span class="mord">4</span></span></span></span>，在与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mn>4</mn></mrow><annotation encoding="application/x-tex">a4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord mathnormal">a</span><span class="mord">4</span></span></span></span>做比较后，下一轮的输入为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mn>2</mn><mo separator="true">,</mo><mi>a</mi><mn>3</mn><mo separator="true">,</mo><mi>b</mi><mn>4</mn></mrow><annotation encoding="application/x-tex">a2,a3,b4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">a</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mord">4</span></span></span></span>，会出现如下情况：</p><p>输入数据为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mn>4</mn><mo separator="true">,</mo><mi>b</mi><mn>5</mn><mo separator="true">,</mo><mi>b</mi><mn>6</mn></mrow><annotation encoding="application/x-tex">b4,b5,b6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">b</span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mord">6</span></span></span></span>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ws=<span class="number">6</span> <span class="comment"># 全局时间窗口</span></span><br><span class="line">train_data=MyDataSet(x,ws)</span><br></pre></td></tr></table></figure><p>网络的架构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net3</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,in_features=<span class="number">54</span>,n_hidden1=<span class="number">128</span>,n_hidden2=<span class="number">256</span>,n_hidden3=<span class="number">512</span>,out_features=<span class="number">7</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(Net3, self).__init__()</span><br><span class="line">        self.flatten=nn.Flatten()</span><br><span class="line">        self.hidden1=nn.Sequential(</span><br><span class="line">            nn.Linear(in_features,n_hidden1,<span class="literal">False</span>),</span><br><span class="line">           </span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line">        self.hidden2=nn.Sequential(</span><br><span class="line">            nn.Linear(n_hidden1,n_hidden2),</span><br><span class="line"></span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line">        self.hidden3=nn.Sequential(</span><br><span class="line">            nn.Linear(n_hidden2,n_hidden3),</span><br><span class="line"></span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line">        self.out=nn.Sequential(nn.Linear(n_hidden3,out_features))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x=self.flatten(x)</span><br><span class="line">        x=self.hidden2(self.hidden1(x))</span><br><span class="line">        x=self.hidden3(x)</span><br><span class="line">        <span class="keyword">return</span> self.out(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CNN</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, output_dim=<span class="number">1</span>,ws=<span class="number">6</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(CNN, self).__init__()</span><br><span class="line">        self.relu = nn.ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">        self.conv1 = nn.Conv1d(ws, <span class="number">64</span>, <span class="number">1</span>)</span><br><span class="line">        self.lr = nn.LeakyReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">        self.conv2 = nn.Conv1d(<span class="number">64</span>, <span class="number">128</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.bn1, self.bn2 = nn.BatchNorm1d(<span class="number">64</span>), nn.BatchNorm1d(<span class="number">128</span>)</span><br><span class="line">        self.bn3, self.bn4 = nn.BatchNorm1d(<span class="number">1024</span>), nn.BatchNorm1d(<span class="number">128</span>)</span><br><span class="line">        self.flatten = nn.Flatten()</span><br><span class="line">        self.lstm1 = nn.LSTM(<span class="number">128</span>, <span class="number">1024</span>)</span><br><span class="line">        self.lstm2 = nn.LSTM(<span class="number">1024</span>, <span class="number">256</span>)</span><br><span class="line">        self.lstm3=nn.LSTM(<span class="number">256</span>,<span class="number">512</span>)</span><br><span class="line">        self.fc = nn.Linear(<span class="number">512</span>, <span class="number">512</span>)</span><br><span class="line">        self.fc4=nn.Linear(<span class="number">512</span>,<span class="number">256</span>)</span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">256</span>, <span class="number">64</span>)</span><br><span class="line">        self.fc3 = nn.Linear(<span class="number">64</span>, output_dim)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reS</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> x.reshape(-<span class="number">1</span>, x.shape[-<span class="number">1</span>], x.shape[-<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.reS(x)</span><br><span class="line">        x = self.conv1(x) </span><br><span class="line">        x = self.lr(x)</span><br><span class="line"></span><br><span class="line">        x = self.conv2(x) </span><br><span class="line">        x = self.lr(x)</span><br><span class="line"></span><br><span class="line">        x = self.flatten(x)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># LSTM部分</span></span><br><span class="line">        x, h = self.lstm1(x)</span><br><span class="line">        x, h = self.lstm2(x)</span><br><span class="line">        x,h=self.lstm3(x)</span><br><span class="line">        x, _ = h</span><br><span class="line"></span><br><span class="line">        x = self.fc(x.reshape(-<span class="number">1</span>, ))</span><br><span class="line">        x = self.relu(x)</span><br><span class="line">        x = self.fc4(x)</span><br><span class="line">        x = self.relu(x)</span><br><span class="line">        x = self.fc1(x)</span><br><span class="line">        x = self.relu(x)</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>训练部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Train</span>(<span class="params">model,train_data,seed=<span class="number">1</span></span>):</span><br><span class="line">    device=<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span></span><br><span class="line">    model=model.to(device)</span><br><span class="line">    Mloss=<span class="number">100000</span></span><br><span class="line">    path=<span class="string">r&quot;YourPath\%s.pth&quot;</span>%seed</span><br><span class="line">    <span class="comment"># 设置损失函数,这里使用的是均方误差损失</span></span><br><span class="line">    criterion = nn.MSELoss()</span><br><span class="line">    <span class="comment"># 设置优化函数和学习率lr</span></span><br><span class="line">    optimizer=torch.optim.Adam(model.parameters(),lr=<span class="number">1e-5</span>,betas=(<span class="number">0.9</span>,<span class="number">0.99</span>),</span><br><span class="line">                               eps=<span class="number">1e-07</span>,weight_decay=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 设置训练周期</span></span><br><span class="line">    epochs =<span class="number">3000</span></span><br><span class="line">    criterion=criterion.to(device)</span><br><span class="line">    model.train()</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        total_loss=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)-ws):</span><br><span class="line">            <span class="comment"># 每次更新参数前都梯度归零和初始化</span></span><br><span class="line">            seq,y_train=train_data.get(i) <span class="comment"># 从我们的数据集中拿出数据</span></span><br><span class="line">            seq,y_train=torch.FloatTensor(seq),torch.FloatTensor([y_train])</span><br><span class="line">            seq=seq.unsqueeze(dim=<span class="number">0</span>)</span><br><span class="line">            seq,y_train=seq.to(device),y_train.to(device)</span><br><span class="line"></span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            <span class="comment"># 注意这里要对样本进行reshape，</span></span><br><span class="line">            <span class="comment"># 转换成conv1d的input size（batch size, channel, series length）</span></span><br><span class="line">            y_pred = model(seq)</span><br><span class="line">            loss = criterion(y_pred, y_train)</span><br><span class="line">            loss.backward()</span><br><span class="line">            train_data.<span class="built_in">set</span>(y_pred.to(<span class="string">&quot;cpu&quot;</span>).item()) <span class="comment"># 再放入预测数据</span></span><br><span class="line">            optimizer.step()</span><br><span class="line">            total_loss+=loss</span><br><span class="line"></span><br><span class="line">        train_data.reset()</span><br><span class="line">        <span class="keyword">if</span> total_loss.tolist()&lt;Mloss:</span><br><span class="line">            Mloss=total_loss.tolist()</span><br><span class="line">            torch.save(model.state_dict(),path)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Saving&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Epoch: <span class="subst">&#123;epoch+<span class="number">1</span>:<span class="number">2</span>&#125;</span> Mean Loss: <span class="subst">&#123;total_loss.tolist()/<span class="built_in">len</span>(train_data):<span class="number">10.8</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d=CNN(ws=ws)</span><br><span class="line">Train(d,train_data,<span class="string">&quot;Net1&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230818173024746.png" alt="image-20230818173024746"></p><center>模型损失<p>平均损失在10点左右。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">checkpoint=torch.load(<span class="string">r&quot;YourPath\4.pth&quot;</span>)</span><br><span class="line">d.load_state_dict(checkpoint) <span class="comment"># 加载最佳参数</span></span><br><span class="line">d.to(<span class="string">&quot;cpu&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="3-2-3-结果可视化">3.2.3 结果可视化</h4><p>我们这里用到<code>Pyechart</code>进行可视化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> CurrentConfig</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pre,ppre=[i.item() <span class="keyword">for</span> i <span class="keyword">in</span> x[:ws]],[]</span><br><span class="line"><span class="comment"># pre 是用原始数据做预测</span></span><br><span class="line"><span class="comment"># ppre 用预测数据做预测</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)-ws+<span class="number">1</span>):</span><br><span class="line">    ppre.append(d(torch.FloatTensor(x[i:i+ws]).unsqueeze(dim=<span class="number">0</span>)))</span><br><span class="line">    pre.append(d(torch.FloatTensor(pre[-ws:]).unsqueeze(dim=<span class="number">0</span>)).item())</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">l=Line()</span><br><span class="line">l.add_xaxis([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))])</span><br><span class="line">l.add_yaxis(<span class="string">&quot;Original Data&quot;</span>,x.tolist())</span><br><span class="line">l.add_yaxis(<span class="string">&quot;Pred Data(Using Raw Datas)&quot;</span>,x[:ws].tolist()+[i.item() <span class="keyword">for</span> i <span class="keyword">in</span> ppre])</span><br><span class="line">l.add_yaxis(<span class="string">&quot;Pred Data(Using Pred Datas)&quot;</span>,pre)</span><br><span class="line">l.set_series_opts(label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>))</span><br><span class="line">l.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;LSTM CNN&#x27;</span>))</span><br><span class="line"></span><br><span class="line">l.render_notebook()</span><br></pre></td></tr></table></figure><p>根据时间窗口的不同，可以得到不同的结果。</p><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230818173641683.png" alt="image-20230818173641683" style="zoom:50%;"><center><b>窗口大小为4</b></center><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230818173542749.png" alt="image-20230818173542749" style="zoom:58%;"><center><b>窗口大小为5</b></center><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230818173724244.png" alt="image-20230818173724244" style="zoom:51%;"><center><b>窗口大小为6</b></center><p>从结果上来看，在一定范围内，时间窗口越大，损失误差越小。</p><p>至于验证，我们可以选<code>Rice</code>做验证：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">x=torch.FloatTensor(pp_c[pp_c[<span class="string">&#x27;Item&#x27;</span>]==<span class="string">&quot;Rice&quot;</span>][<span class="string">&#x27;Value&#x27;</span>].tolist())</span><br><span class="line">pre,ppre=[i.item() <span class="keyword">for</span> i <span class="keyword">in</span> x[:ws]],[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)-ws+<span class="number">1</span>):</span><br><span class="line">    ppre.append(d(torch.FloatTensor(x[i:i+ws]).unsqueeze(dim=<span class="number">0</span>)))</span><br><span class="line">    pre.append(d(torch.FloatTensor(pre[-ws:]).unsqueeze(dim=<span class="number">0</span>)).item())</span><br><span class="line">l=Line()</span><br><span class="line">l.add_xaxis([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))])</span><br><span class="line">l.add_yaxis(<span class="string">&quot;Original Data&quot;</span>,x.tolist())</span><br><span class="line">l.add_yaxis(<span class="string">&quot;Pred Data(Using Raw Datas)&quot;</span>,x[:ws].tolist()+[i.item() <span class="keyword">for</span> i <span class="keyword">in</span> ppre])</span><br><span class="line">l.add_yaxis(<span class="string">&quot;Pred Data(Using Pred Datas)&quot;</span>,pre)</span><br><span class="line">l.set_series_opts(label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>))</span><br><span class="line">l.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;LSTM CNN&#x27;</span>))</span><br><span class="line"></span><br><span class="line">l.render_notebook()</span><br></pre></td></tr></table></figure><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230818174046726.png" alt="image-20230818174046726" style="zoom:52%;"><center>基于Rice数据的验证结果<p>可以发现，用预测做预测的结果，基本上不会差太多，那也就意味着，我们可以对高粱进行预测。不过在这之前，我们可以看看用原始数据做训练的结果：</p><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230818174214014.png" alt="image-20230818174214014" style="zoom:50%;"><center> 采用原始数据作训练的结果<p>时间窗口一样为6，可以看到在黑线贴合的非常好，但是面对大量缺失的数据，精度就远不如用预测数据做预测的结果了。</p><p>此外，这是用CNN做的结果</p><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230818174436597.png" alt="image-20230818174436597" style="zoom:44%;"><center> CNN拟合结果<p>我们可以发现LSTM的波动要比CNN好，CNN后面死水一潭，应该是梯度消失导致的，前面信息没有了，后面信息又是自个构造的，这就导致了到后面变成了线性情况。</p><p>那么最后的最后，就是预测高粱产量了：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pre_data=pp_c[pp_c[<span class="string">&#x27;Item&#x27;</span>]==<span class="string">&#x27;Sorghum&#x27;</span>][<span class="string">&#x27;Value&#x27;</span>].tolist()</span><br><span class="line">l=pre_data[:]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)-ws+<span class="number">1</span>):</span><br><span class="line">    l.append(d(torch.FloatTensor(l[-ws:]).unsqueeze(dim=<span class="number">0</span>)).item())</span><br><span class="line">L=Line()</span><br><span class="line">L.add_xaxis([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))])</span><br><span class="line">L.add_yaxis(<span class="string">&quot;Pred&quot;</span>,l)</span><br><span class="line">L.set_series_opts(label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>))</span><br><span class="line">L.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;sorghum production forecasts&#x27;</span>)</span><br><span class="line">                            </span><br><span class="line">                             )</span><br><span class="line"></span><br><span class="line">L.render_notebook()</span><br><span class="line">l.to_csv(<span class="string">&quot;path&quot;</span>)</span><br></pre></td></tr></table></figure><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230818174718747.png" alt="image-20230818174718747" style="zoom:52%;"><center> 高粱价格拟合曲线<p>将结果数据更新。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(x)-ws):</span><br><span class="line">pp_c=pp_c.append(&#123;<span class="string">&quot;Unnamed: 0&quot;</span>:<span class="number">91</span>+i,<span class="string">&quot;Year&quot;</span>:<span class="number">2006</span>+i,<span class="string">&quot;Value&quot;</span>:l[<span class="number">5</span>+i],<span class="string">&quot;Item&quot;</span>:<span class="string">&quot;Sorghum&quot;</span>,<span class="string">&#x27;Unit&#x27;</span>:<span class="string">&quot;卢比/kg&quot;</span>&#125;,ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="3-3-斯里兰卡总ESV计算">3.3 斯里兰卡总ESV计算</h3><p>对于我们前面得到的数据，依据价值公式计算生态服务单位价值表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">y=pd.read_excel(path+<span class="string">r&quot;\yield_final.xlsx&quot;</span>)</span><br><span class="line">p=pd.read_excel(path+<span class="string">r&quot;\Price_Mean.xls&quot;</span>)</span><br><span class="line"></span><br><span class="line">s=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> y[<span class="string">&quot;Item&quot;</span>].unique():</span><br><span class="line">    s+=y[y[<span class="string">&#x27;Item&#x27;</span>]==_][<span class="string">&#x27;Value&#x27;</span>].tolist()[<span class="number">0</span>]*p[p[<span class="string">&#x27;Item&#x27;</span>]==_][<span class="string">&quot;Price&quot;</span>].tolist()[<span class="number">0</span>]</span><br><span class="line">s/=<span class="number">4</span>*<span class="number">7</span></span><br></pre></td></tr></table></figure><p>可以得到这样一个因子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s:<span class="number">16111.103594750322</span></span><br></pre></td></tr></table></figure><p>该因子表示每公顷的价值。接下来，我们读取生态系统服务价值表，该表根据本项目的类型做过修改。即：保留存在的类型，剔除不存在的类型，将森林因子记作针叶林、阔叶林、针阔混交林的平均值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e=pd.read_excel(path+<span class="string">r&quot;/Esv_table.xls&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230822172406365.png" alt="image-20230822172406365"></p><center>改进标准价值当量<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> e.columns:</span><br><span class="line">    <span class="keyword">if</span> e[i].dtype ==np.float64:</span><br><span class="line">        e[i]=e[i]*<span class="number">16111</span> <span class="comment"># 不保留小数部分了</span></span><br></pre></td></tr></table></figure><p>于是，可以得到我们的最终结果表。</p><p><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230822172555364.png" alt="image-20230822172555364"></p><center> 价值当量<p>将每年的土地覆盖属性表导出，接着将利用这些数据计算最终结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">path=<span class="string">r&quot;E:\Sri Lanka\attributeTable&quot;</span></span><br><span class="line"></span><br><span class="line">values=<span class="string">r&quot;E:\Sri Lanka\ESV_Pro.csv&quot;</span>  <span class="comment"># 这个就是上面那张表的导出</span></span><br><span class="line"></span><br><span class="line">mapTable=&#123;</span><br><span class="line">    <span class="number">1</span>:<span class="string">&quot;水系&quot;</span>,</span><br><span class="line">    <span class="number">2</span>:<span class="string">&quot;森林(针+针阔+阔叶)//3&quot;</span>,</span><br><span class="line">    <span class="number">4</span>:<span class="string">&quot;湿地&quot;</span>,</span><br><span class="line">    <span class="number">5</span>:<span class="string">&quot;耕地(旱地)&quot;</span>,</span><br><span class="line">    <span class="number">7</span>:<span class="string">&quot;城镇用地&quot;</span>,</span><br><span class="line">    <span class="number">8</span>:<span class="string">&quot;裸地&quot;</span>,</span><br><span class="line">    <span class="number">9</span>:<span class="string">&quot;冰川积雪&quot;</span>,</span><br><span class="line">    <span class="number">10</span>:<span class="string">&quot;云层&quot;</span>,</span><br><span class="line">    <span class="number">11</span>:<span class="string">&quot;草原&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AT=[]</span><br><span class="line">tab=os.listdir(path)</span><br><span class="line">tables=[i <span class="keyword">for</span> i <span class="keyword">in</span> tab <span class="keyword">if</span> i.endswith(<span class="string">&quot;t.csv&quot;</span>)]</span><br><span class="line"><span class="comment"># [&#x27;2017t.csv&#x27;, &#x27;2018t.csv&#x27;, &#x27;2019t.csv&#x27;, &#x27;2020t.csv&#x27;, &#x27;2021t.csv&#x27;, &#x27;2022t.csv&#x27;]</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tables)):</span><br><span class="line">    newT=defaultdict(<span class="built_in">int</span>)</span><br><span class="line">    year=tables[i].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    tb=pd.read_csv(os.path.join(path,tables[i]))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tb)):</span><br><span class="line">        <span class="keyword">if</span> (k:=mapTable[tb[<span class="string">&quot;Value&quot;</span>][i]]) <span class="keyword">in</span> v[<span class="string">&quot;Unnamed: 0&quot;</span>].unique():</span><br><span class="line">            _=tb[<span class="string">&#x27;Count&#x27;</span>][i]/<span class="number">100</span></span><br><span class="line">            <span class="keyword">for</span> n,g <span class="keyword">in</span> <span class="built_in">enumerate</span>(v.columns[<span class="number">2</span>:].tolist(),<span class="number">2</span>):</span><br><span class="line">                  <span class="comment"># 每一项都等于 每种类型的像元乘以该像元在该项之下的价值之和</span></span><br><span class="line">                newT[g]+=_/<span class="number">1e10</span>*v[v[<span class="string">&quot;Unnamed: 0&quot;</span>]==k].iloc[<span class="number">0</span>,n]</span><br><span class="line">    AT.append(newT)</span><br><span class="line">d=pd.DataFrame(AT,index=[<span class="string">&quot;%s&quot;</span>%i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2017</span>,<span class="number">2023</span>)])</span><br></pre></td></tr></table></figure><p>其结果如下：</p><p><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230822173510089.png" alt="image-20230822173510089"></p><center> 分项ESV量表<p>其中，食物生产、原料生产、水资源供给属于<code>供给服务</code>，气体调节、气候调节、净化环境、水文调节属于<code>调节服务</code>，水土保持、养分循环、生物多样性属于<code>支持服务</code>，美学景观属于<code>文化服务</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">newD=pd.DataFrame([],columns=[<span class="string">&quot;供给服务&quot;</span>,<span class="string">&quot;调节服务&quot;</span>,<span class="string">&quot;支持服务&quot;</span>,<span class="string">&quot;文化服务&quot;</span>])</span><br><span class="line">newD[<span class="string">&quot;供给服务&quot;</span>]=d.iloc[:,<span class="number">0</span>]+d.iloc[:,<span class="number">1</span>]+d.iloc[:,<span class="number">2</span>]</span><br><span class="line">x=d.iloc[:,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>,<span class="number">7</span>):</span><br><span class="line">    x+=d.iloc[:,i]</span><br><span class="line">newD[<span class="string">&quot;调节服务&quot;</span>]=x</span><br><span class="line">x=d.iloc[:,<span class="number">7</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>,<span class="number">10</span>):</span><br><span class="line">    x+=d.iloc[:,i]</span><br><span class="line">newD[<span class="string">&#x27;支持服务&#x27;</span>]=x</span><br><span class="line">newD[<span class="string">&#x27;文化服务&#x27;</span>]=d.iloc[:,-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230822173712909.png" alt="image-20230822173712909"></p><center>大类ESV量表<p>剩下的工作就是绘制图表了。</p><hr><h3 id="3-4-斯里兰卡行政县ESV变化情况">3.4 斯里兰卡行政县ESV变化情况</h3><p>在本部分中，我们将研究分析2017-2022年斯里兰卡各个行政县的ESV变化，并通过人为设置分级，对其总量进行量化。其计算公式如下：</p><table><thead><tr><th style="text-align:center">值(单位：10亿/卢比)</th><th style="text-align:center">级别</th></tr></thead><tbody><tr><td style="text-align:center">0-3</td><td style="text-align:center">低</td></tr><tr><td style="text-align:center">3-6</td><td style="text-align:center">较低</td></tr><tr><td style="text-align:center">6-9</td><td style="text-align:center">中等</td></tr><tr><td style="text-align:center">9-12</td><td style="text-align:center">较高</td></tr><tr><td style="text-align:center">&gt;12</td><td style="text-align:center">高</td></tr></tbody></table><p>为了能够实现按照各个省份分级，需将原本的土地覆盖栅格数据按照县面多边形进行裁剪，创建独立的县单元栅格，方便我们进行处理。当然，如果只是想做简单的聚合，则不需要进行独立栅格的构建，直接使用<code>分区统计</code>工具即可。</p><p>斯里兰卡有二十五个行政县，如果一个个用手点的话，是不是有些麻烦了，批处理也不支持迭代处理要素，那么有没有什么更加便捷的自动化操作呢？一开始我想的是用脚本来做，但是看到ArcGIS里面有一个模型构建器。通过模型构建器，可以创建迭代工作流，进而实现我们的需求。</p><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230822144644519.png" alt="image-20230822144644519"><center> 裁剪模型迭代器<p>对行政区矢量数据内的所有面要素进行迭代，并将其作为裁剪工具的输入面要素，即可实现端到端的一键式任务流。将拆分数据的工作空间设置为一个新的<code>mdb</code>文件，即可获得分割好的数据。</p><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230822144906569.png" alt="image-20230822144906569" style="zoom:50%;"><center> 迭代结果<p>由于分割的栅格没有属性表，此时我们需要迭代对其构建属性表。同样，可以使用模型构建器来进行，亦或是通过属性-&gt;符号系统来构建属性表。再拿到属性表之后，我们的数据应该是这样的：</p><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230822145145242.png" alt="image-20230822145145242" style="zoom:50%;"><center> 地图效果<p>颜色斑杂是因为每个独立区块使用的色彩分级不一样，但这并不是我们要关注的重点。下一步操作将会导出这些属性表，并进行可视化。同样使用模型构建器，可以导出属性表：</p><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230822145352556.png" alt="image-20230822145352556"><center> 属性表导出迭代器<p><code>表转Excel</code>位于转换工具-&gt;Excel-&gt;表转Excel。</p><p><code>表至表</code>位于转换工具-&gt;转出至地理数据库-&gt;表至表。</p><p>该操作后，我们便可取到对应栅格数据的数据表。下一步的工作内容是对这些表格进行处理，计算ESV价值。</p><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230822145926891.png" alt="image-20230822145926891" style="zoom:50%;"><center> 导出结果<p>实际上，这个属性表长这个样子：</p><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230822150346120.png" alt="image-20230822150346120" style="zoom:50%;"><center> 属性表<p>需要关注的就是<code>Value</code>属性和<code>Count</code>属性，前者代表土地覆盖类型，我们通过一个映射函数将映射到实际含义上，后者表示像元个数，注意像元大小是<code>10m by 10m</code>，如果换算成公顷，需要除以100。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">path=<span class="string">r&quot;E:\Sri Lanka\SubDivision&quot;</span> <span class="comment"># 文件路径</span></span><br><span class="line">mapTable=&#123;</span><br><span class="line">    <span class="number">1</span>:<span class="string">&quot;水系&quot;</span>,</span><br><span class="line">    <span class="number">2</span>:<span class="string">&quot;森林(针+针阔+阔叶)//3&quot;</span>,</span><br><span class="line">    <span class="number">4</span>:<span class="string">&quot;湿地&quot;</span>,</span><br><span class="line">    <span class="number">5</span>:<span class="string">&quot;耕地(旱地)&quot;</span>,</span><br><span class="line">    <span class="number">7</span>:<span class="string">&quot;城镇用地&quot;</span>,</span><br><span class="line">    <span class="number">8</span>:<span class="string">&quot;裸地&quot;</span>,</span><br><span class="line">    <span class="number">9</span>:<span class="string">&quot;冰川积雪&quot;</span>,</span><br><span class="line">    <span class="number">10</span>:<span class="string">&quot;云层&quot;</span>,</span><br><span class="line">    <span class="number">11</span>:<span class="string">&quot;草原&quot;</span></span><br><span class="line">&#125; <span class="comment"># 映射表</span></span><br><span class="line"></span><br><span class="line">values=<span class="string">r&quot;E:\Sri Lanka\ESV_Pro.csv&quot;</span> <span class="comment"># 前面得到的最终因子价值</span></span><br><span class="line">v=pd.read_csv(values)</span><br><span class="line">v.drop(v.columns[<span class="number">0</span>],axis=<span class="number">1</span>,inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getValue</span>(<span class="params">year</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">tem</span>):</span><br><span class="line">        Sum=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tem)):</span><br><span class="line">            <span class="comment"># 若映射存在</span></span><br><span class="line">            <span class="keyword">if</span>(k:=mapTable[tem[<span class="string">&#x27;Value&#x27;</span>][i]]) <span class="keyword">in</span> v[<span class="string">&#x27;Unnamed: 0&#x27;</span>].unique():</span><br><span class="line">                _=tem[<span class="string">&#x27;Count&#x27;</span>][i]/<span class="number">100</span> <span class="comment"># 换算成公顷</span></span><br><span class="line">                Sum+=v[v[<span class="string">&#x27;Unnamed: 0&#x27;</span>]==k].iloc[<span class="number">0</span>,<span class="number">1</span>:].<span class="built_in">sum</span>()*_ <span class="comment"># 总价值=\sum c_i*v_i</span></span><br><span class="line">        <span class="keyword">return</span> Sum</span><br><span class="line">    dicT=defaultdict(<span class="built_in">int</span>)</span><br><span class="line">    tabs=os.listdir(path+<span class="string">r&quot;\%sTabs&quot;</span>%year)</span><br><span class="line">    total_esv=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tabs:</span><br><span class="line">        tb=pd.read_excel(path+<span class="string">r&quot;\%sTabs\\&quot;</span>%year+i)</span><br><span class="line">        total_esv+=(k:=f(tb))</span><br><span class="line">        dicT[i.split(<span class="string">&quot;_&quot;</span>)[<span class="number">0</span>]]=k/<span class="number">1e10</span></span><br><span class="line">    <span class="keyword">return</span> total_esv/<span class="number">1e10</span>,dicT</span><br></pre></td></tr></table></figure><p>为了验证该函数，我们可以尝试读取一下数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getValue(<span class="number">2017</span>)[<span class="number">0</span>] <span class="comment"># 获取2017年全国总量</span></span><br></pre></td></tr></table></figure><p><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230822150741885.png" alt="image-20230822150741885"></p><center> 结果比对<p>从结果上，与前面未做分割的全国数据大致相等。由于按照多边形分割不可避免的会造成像元损失，因此该结果会小于整体的结果，误差在可接受范围内。</p><p>下一步，需要计算各个县每年的总量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Stable=[getValue(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2017</span>,<span class="number">2023</span>)]</span><br><span class="line">DataShow=pd.DataFrame([],columns=[<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2017</span>,<span class="number">2023</span>)])</span><br><span class="line"><span class="comment"># 实际上，DF可以直接传入一个Dict，Key将作为Index，value将作为列值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2017</span>,<span class="number">2023</span>):DataShow[<span class="built_in">str</span>(i)]=Stable[i-<span class="number">2017</span>][<span class="number">1</span>]</span><br></pre></td></tr></table></figure><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230822151043526.png" alt="image-20230822151043526" style="zoom:50%;"><center> 各县市年总ESV量表<p>我们将这个结果表导出，下一步便是在ArcGIS中绘制地图。</p><p>通过属性表的连接操作，可以将导出的表添加到矢量图中，然后就是对其进行地图制作，这方面不再赘述。</p><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230822152158798.png" alt="image-20230822152158798" style="zoom:50%;"><center> 制图结果<p>再进一步，我们将利用<code>imageio</code>模块绘制动态图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> imageio</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_gif</span>(<span class="params">filelist,name,dur=<span class="number">1.5</span></span>):</span><br><span class="line">    IMG=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> filelist:</span><br><span class="line">        IMG.append(imageio.imread(i))</span><br><span class="line">    <span class="keyword">return</span> imageio.mimsave(name,IMG,<span class="string">&#x27;GIF&#x27;</span>,duration=dur)</span><br><span class="line">path=[os.path.join(<span class="string">r&quot;E:\Sri Lanka\Res\Img&quot;</span>,i) <span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(<span class="string">r&quot;E:\Sri Lanka\Res\Img&quot;</span>)]</span><br><span class="line">create_gif(path,<span class="string">r&quot;E:\Sri Lanka\Res\Img\res.gif&quot;</span>)</span><br></pre></td></tr></table></figure><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/res.gif" alt="res" style="zoom: 25%;"><center> 各省ESV年变化情况<p>结果如上图所示。</p><hr><h2 id="四、结果展示">四、结果展示</h2><p><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230822174109522.png" alt="image-20230822174109522"></p><center> 斯里兰卡生态系统服务价值变化表<p>在斯里兰卡生态系统服务中，调节服务占了较大的比重，而文化服务的价值量较低，这与斯里兰卡大量的森林植被、湿地草甸覆盖有关。总体的价值量呈现波动上升趋势，说明斯里兰卡在新型人地关系的构建与维护上成果斐然。</p><p><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230822174406411.png" alt="image-20230822174406411"></p><center> 斯里兰卡2022ESV分项占比<p><img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/image-20230822174431358.png" alt="image-20230822174431358"></p><center>各分项年变化情况<img src="/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%96%AF%E9%87%8C%E5%85%B0%E5%8D%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%BB%B7%E5%80%BC%E8%AE%A1%E7%AE%97/res.gif" alt="res" style="zoom: 25%;"><p>从各省结果来看，斯里兰卡的中部和东部具有较高的价值量，且随着时间变化，东部、中部地区总量呈现增加趋势，而<code>Matara</code>和<code>Puttalam</code>两个省份则是刚好在分界线上呈现先下降后上升的结果。</p><hr><h2 id="五、参考文献">五、参考文献</h2><p>熊睿毅. 福建省生态系统服务价值动态评估及影响因子研究[D].武汉大学,2021.DOI:10.27379/d.cnki.gwhdu.2021.000700.</p></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">开学做的一个项目</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="项目实践" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>【数据分析实践】问题集</title>
    <link href="http://example.com/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86/"/>
    <id>http://example.com/2023/08/22/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86/</id>
    <published>2023-08-22T09:11:58.387Z</published>
    <updated>2023-08-24T09:43:05.559Z</updated>
    
    <content type="html"><![CDATA[<h1>【项目】斯里兰卡ESV计算</h1><p><strong>按照某一指标进行排序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yield_c[yield_c[<span class="string">&quot;Year&quot;</span>]&gt;<span class="number">2015</span>].groupby(<span class="string">&#x27;Item&#x27;</span>).mean()</span><br></pre></td></tr></table></figure><p><strong><code>torch</code>存储和读取</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">torch.save(model.state_dict(),path) <span class="comment"># 存储</span></span><br><span class="line"></span><br><span class="line">checkpoint=torch.load(path)</span><br><span class="line">model.load_state_dict(checkpoint) <span class="comment"># 加载参数</span></span><br></pre></td></tr></table></figure><p><strong><code>Pyechart</code>制图参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l.set_series_opts(label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>))</span><br><span class="line">l.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;1D CNN&#x27;</span>))</span><br></pre></td></tr></table></figure><p><code>Series</code>转列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pp_c[pp_c[<span class="string">&#x27;Item&#x27;</span>]==<span class="string">&quot;Rice&quot;</span>][<span class="string">&#x27;Value&#x27;</span>].tolist()</span><br></pre></td></tr></table></figure><p><strong>添加行数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pp_c=pp_c.append(&#123;<span class="string">&quot;Unnamed: 0&quot;</span>:<span class="number">91</span>+i,<span class="string">&quot;Year&quot;</span>:<span class="number">2006</span>+i,<span class="string">&quot;Value&quot;</span>:l[<span class="number">5</span>+i],<span class="string">&quot;Item&quot;</span>:<span class="string">&quot;Sorghum&quot;</span>,<span class="string">&#x27;Unit&#x27;</span>:<span class="string">&quot;卢比/kg&quot;</span>&#125;,ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>注意需要列对应上，并且需要忽略索引，这里以字典形式做匹配。</p><p><strong>判断数据类型</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> e.columns:</span><br><span class="line">    <span class="keyword">if</span> e[i].dtype==np.float64:</span><br><span class="line">        e[i]*=<span class="number">16111</span></span><br></pre></td></tr></table></figure><p><strong>关于enumerate</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">tb,path</span>):</span><br><span class="line">    newT=defaultdict(<span class="built_in">int</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tb)):</span><br><span class="line">        <span class="keyword">if</span> (k:=mapTable[tb[<span class="string">&quot;Value&quot;</span>][i]]) <span class="keyword">in</span> v[<span class="string">&quot;Unnamed: 0&quot;</span>].unique(): <span class="comment"># unique()才能用 in，否则数据类型不是list</span></span><br><span class="line">            _=tb[<span class="string">&#x27;Count&#x27;</span>][i]/<span class="number">100</span></span><br><span class="line">            <span class="keyword">for</span> n,g <span class="keyword">in</span> <span class="built_in">enumerate</span>(v.columns[<span class="number">2</span>:].tolist(),<span class="number">2</span>): <span class="comment"># enumerate(list,idx) idx表示起始下标</span></span><br><span class="line">                newT[g]+=_/<span class="number">1e10</span>*v[v[<span class="string">&quot;Unnamed: 0&quot;</span>]==k].iloc[<span class="number">0</span>,n]</span><br><span class="line">    s=pd.DataFrame(newT,<span class="built_in">range</span>(<span class="number">1</span>))</span><br><span class="line">    s.to_csv(path)</span><br></pre></td></tr></table></figure><p><strong>很酷的运算1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">AT=[]</span><br><span class="line">tab=os.listdir(path)</span><br><span class="line">tables=[i <span class="keyword">for</span> i <span class="keyword">in</span> tab <span class="keyword">if</span> i.endswith(<span class="string">&quot;t.csv&quot;</span>)]</span><br><span class="line"><span class="comment"># [&#x27;2017t.csv&#x27;, &#x27;2018t.csv&#x27;, &#x27;2019t.csv&#x27;, &#x27;2020t.csv&#x27;, &#x27;2021t.csv&#x27;, &#x27;2022t.csv&#x27;]</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tables)):</span><br><span class="line">    newT=defaultdict(<span class="built_in">int</span>)</span><br><span class="line">    year=tables[i].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    tb=pd.read_csv(os.path.join(path,tables[i]))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tb)):</span><br><span class="line">        <span class="keyword">if</span> (k:=mapTable[tb[<span class="string">&quot;Value&quot;</span>][i]]) <span class="keyword">in</span> v[<span class="string">&quot;Unnamed: 0&quot;</span>].unique():</span><br><span class="line">            _=tb[<span class="string">&#x27;Count&#x27;</span>][i]/<span class="number">100</span></span><br><span class="line">            <span class="keyword">for</span> n,g <span class="keyword">in</span> <span class="built_in">enumerate</span>(v.columns[<span class="number">2</span>:].tolist(),<span class="number">2</span>):</span><br><span class="line">                  <span class="comment"># 每一项都等于 每种类型的像元乘以该像元在该项之下的价值之和</span></span><br><span class="line">                newT[g]+=_/<span class="number">1e10</span>*v[v[<span class="string">&quot;Unnamed: 0&quot;</span>]==k].iloc[<span class="number">0</span>,n]</span><br><span class="line">    AT.append(newT)</span><br><span class="line">d=pd.DataFrame(AT,index=[<span class="string">&quot;%s&quot;</span>%i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2017</span>,<span class="number">2023</span>)])</span><br></pre></td></tr></table></figure><p><strong>很酷的运算2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getValue</span>(<span class="params">year</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">tem</span>):</span><br><span class="line">        Sum=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tem)):</span><br><span class="line">            <span class="comment"># 若映射存在</span></span><br><span class="line">            <span class="keyword">if</span>(k:=mapTable[tem[<span class="string">&#x27;Value&#x27;</span>][i]]) <span class="keyword">in</span> v[<span class="string">&#x27;Unnamed: 0&#x27;</span>].unique():</span><br><span class="line">                _=tem[<span class="string">&#x27;Count&#x27;</span>][i]/<span class="number">100</span> <span class="comment"># 换算成公顷</span></span><br><span class="line">                Sum+=v[v[<span class="string">&#x27;Unnamed: 0&#x27;</span>]==k].iloc[<span class="number">0</span>,<span class="number">1</span>:].<span class="built_in">sum</span>()*_ <span class="comment"># 总价值=\sum c_i*v_i</span></span><br><span class="line">        <span class="keyword">return</span> Sum</span><br><span class="line">    dicT=defaultdict(<span class="built_in">int</span>)</span><br><span class="line">    tabs=os.listdir(path+<span class="string">r&quot;\%sTabs&quot;</span>%year)</span><br><span class="line">    total_esv=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tabs:</span><br><span class="line">        tb=pd.read_excel(path+<span class="string">r&quot;\%sTabs\\&quot;</span>%year+i)</span><br><span class="line">        total_esv+=(k:=f(tb))</span><br><span class="line">        dicT[i.split(<span class="string">&quot;_&quot;</span>)[<span class="number">0</span>]]=k/<span class="number">1e10</span></span><br><span class="line">    <span class="keyword">return</span> total_esv/<span class="number">1e10</span>,dicT</span><br><span class="line"></span><br><span class="line">Stable=[getValue(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2017</span>,<span class="number">2023</span>)]</span><br><span class="line">DataShow=pd.DataFrame([],columns=[<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2017</span>,<span class="number">2023</span>)])</span><br><span class="line"><span class="comment"># 实际上，DF可以直接传入一个Dict，Key将作为Index，value将作为列值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2017</span>,<span class="number">2023</span>):DataShow[<span class="built_in">str</span>(i)]=Stable[i-<span class="number">2017</span>][<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p><strong>关于PyEchart图层的叠加</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.overlap(l).render_notebook()</span><br></pre></td></tr></table></figure><p><strong>关于在训练过程中的新形式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyDataSet</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,seq,ws=<span class="number">6</span></span>):</span><br><span class="line">        <span class="comment"># ws是滑动窗口大小</span></span><br><span class="line">        self.ori=[i <span class="keyword">for</span> i <span class="keyword">in</span> seq[:ws]]</span><br><span class="line">        self.label=[i <span class="keyword">for</span> i <span class="keyword">in</span> seq[ws:]]</span><br><span class="line">        self.reset()</span><br><span class="line">        self.ws=ws</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set</span>(<span class="params">self,dpi</span>):</span><br><span class="line">        <span class="comment"># 添加数据</span></span><br><span class="line">        self.x.append(dpi)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        self.x=self.ori[:]</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,idx</span>):</span><br><span class="line">        <span class="keyword">return</span> self.x[idx:idx+self.ws],self.label[idx]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.x)</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 数据迭代器不一定非得集成自DataLoader</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)-ws):</span><br><span class="line">            <span class="comment"># 每次更新参数前都梯度归零和初始化</span></span><br><span class="line">            seq,y_train=train_data.get(i) <span class="comment"># 从我们的数据集中拿出数据</span></span><br><span class="line">            seq,y_train=torch.FloatTensor(seq),torch.FloatTensor([y_train])</span><br><span class="line">            seq=seq.unsqueeze(dim=<span class="number">0</span>)</span><br><span class="line">            seq,y_train=seq.to(device),y_train.to(device)</span><br><span class="line"></span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            <span class="comment"># 注意这里要对样本进行reshape，</span></span><br><span class="line">            <span class="comment"># 转换成conv1d的input size（batch size, channel, series length）</span></span><br><span class="line">            y_pred = model(seq)</span><br><span class="line">            loss = criterion(y_pred, y_train)</span><br><span class="line">            loss.backward()</span><br><span class="line">            train_data.<span class="built_in">set</span>(y_pred.to(<span class="string">&quot;cpu&quot;</span>).item()) <span class="comment"># 再放入预测数据</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 需要注意的是，一定要先构建计算图处理梯度后再放入，要不会出bug</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><strong>获取DataFrame中的数值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.matmul(data.values,np.array(EWM(data)).T)</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">针对项目中遇到的问题进行反思和总结</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="项目实践" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>【数据分析实践】基于LSTM的一维数据拟合扩展</title>
    <link href="http://example.com/2023/08/18/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E4%B8%80%E7%BB%B4%E6%95%B0%E6%8D%AE%E6%89%A9%E5%B1%95/"/>
    <id>http://example.com/2023/08/18/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E4%B8%80%E7%BB%B4%E6%95%B0%E6%8D%AE%E6%89%A9%E5%B1%95/</id>
    <published>2023-08-18T08:24:55.317Z</published>
    <updated>2023-08-18T09:50:38.514Z</updated>
    
    <content type="html"><![CDATA[<h1>基于LSTM的一维数据拟合扩展</h1><h3 id="一、引-fei-言-hua">一、引(fei)言(hua)</h3><p>我在做Sri Lanka生态系统服务价值计算时，中间遇到了一点小问题。从世界粮农组织(<a href="https://www.fao.org/faostat/en/#data">FAO</a>)上获得Sri Lanka主要农作物产量和价格数据时，其中的主要作物Sorghum仅有2001-2006年的数据，而Millet只有2001-2005,2020-2021这样的间断数据。虽然说可以直接剔除这种过分缺失的数据，但这无疑会对生态因子的计算造成重大影响。所以我想要不要整个函数把他拟合一下，刚好Maize和Rice有2001-2021的完备数据，于是，这个文档就这样诞生了。</p><hr><h3 id="二、数据">二、数据</h3><p>数据来自FAO，考虑到可能有同学想要跟着尝试一下，这里给出用到的数据。</p><p><a href="https://github.com/Chen-XiaoLv/DemoGit/blob/master/yield.csv">作物产量</a></p><p><a href="https://github.com/Chen-XiaoLv/DemoGit/blob/master/Producer%20Prices.csv">作物价格</a></p><h4 id="2-1-数据探查">2.1 数据探查</h4><p>我们读取数据，并进行简单的统计量查看。如果要进一步深入研究数据分布及可视化，可以看看我的这篇<a href="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/blob/master/READEME.md">文章</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">path=<span class="string">r&quot;YourPath&quot;</span></span><br><span class="line"></span><br><span class="line">yield_=pd.read_csv(path+<span class="string">r&quot;\yield.csv&quot;</span>)</span><br><span class="line">pp_=pd.read_csv(path+<span class="string">r&quot;\Producer Prices.csv&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yield_.head()</span><br></pre></td></tr></table></figure><p><img src="/2023/08/18/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E4%B8%80%E7%BB%B4%E6%95%B0%E6%8D%AE%E6%89%A9%E5%B1%95/image-20230818164633501.png" alt="image-20230818164633501"></p><p>需要用到的属性只有<code>Item,Year,Unit,Value</code></p><p>所以我们做这样的处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yield_=yield_[[<span class="string">&quot;Item&quot;</span>,<span class="string">&quot;Year&quot;</span>,<span class="string">&quot;Unit&quot;</span>,<span class="string">&quot;Value&quot;</span>]]</span><br></pre></td></tr></table></figure><p>可以看到有些数据是从1961年开始的，太旧了就不用了，我们从2001年开始。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yield_=yield_[yield_[<span class="string">&quot;Year&quot;</span>]&gt;<span class="number">2000</span>]</span><br></pre></td></tr></table></figure><p>同样，我们来看看pp_的情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pp_.head()</span><br></pre></td></tr></table></figure><p><img src="/2023/08/18/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E4%B8%80%E7%BB%B4%E6%95%B0%E6%8D%AE%E6%89%A9%E5%B1%95/image-20230818165001703.png" alt="image-20230818165001703"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pp_=pp_[[<span class="string">&quot;Item&quot;</span>,<span class="string">&quot;Year&quot;</span>,<span class="string">&quot;Value&quot;</span>,<span class="string">&quot;Element&quot;</span>]]</span><br><span class="line">pp_=pp_[pp_[<span class="string">&quot;Year&quot;</span>]&gt;<span class="number">2000</span>]</span><br></pre></td></tr></table></figure><p>实际上，在这个数据里，产量已经没有问题了。我们只需要做一个简单的处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yield_.groupby(<span class="string">&quot;Item&quot;</span>).mean()[<span class="string">&quot;Value&quot;</span>]/<span class="number">10</span> <span class="comment">#转为千克</span></span><br></pre></td></tr></table></figure><p><img src="/2023/08/18/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E4%B8%80%E7%BB%B4%E6%95%B0%E6%8D%AE%E6%89%A9%E5%B1%95/image-20230818165519952.png" alt="image-20230818165519952"></p><p>便可拿到每种作物近二十年的平均产量。</p><p>好了现在大问题出现在价值上，我们从下往上看就知道了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pp_.tail(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><img src="/2023/08/18/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E4%B8%80%E7%BB%B4%E6%95%B0%E6%8D%AE%E6%89%A9%E5%B1%95/image-20230818165632557.png" alt="image-20230818165632557"></p><p>高粱只有2006年的，那有没有办法利用现成的数据将其扩展呢？</p><p>实际上，这类拟合问题有很多种解决方案，但是本问题涉及到时间，之前时间段的因子，以及可能的周期性，都会增加拟合的复杂性。所以，在这里我们采用LSTM来填充数据。</p><hr><h3 id="三、模型构建">三、模型构建</h3><p>在本小节，我们将比较传统一维CNN与RNN在结果上的异同。</p><p>一般做一维RNN时，可以指定一个<code>时间窗口</code>，比如用<code>2006,2007,2008</code>年的数据，推理<code>2009</code>年的数据，用<code>2007,2008,2009</code>年推理<code>2010</code>年。</p><p>我们现在要用之前处理好的<code>pp_c</code>数据中的玉米产量，来预测高粱产量。所以第一步就是将其转化为<code>torch</code>接受的格式。</p><p>别忘记导入模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> functional <span class="keyword">as</span> F</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x=pp_c[pp_c[<span class="string">&#x27;Item&#x27;</span>]==<span class="string">&quot;Maize (corn)&quot;</span>][<span class="string">&#x27;Value&#x27;</span>]</span><br><span class="line">x=torch.FloatTensor(x)</span><br></pre></td></tr></table></figure><p>之前写数据迭代器的时候，除了可以继承自<code>torch.utils.data.DataLoader</code>，也可以是任意的可迭代对象。这里我们可以简单的设置一个类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置迭代器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDataSet</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,seq,ws=<span class="number">6</span></span>):</span><br><span class="line">        <span class="comment"># ws是滑动窗口大小</span></span><br><span class="line">        self.ori=[i <span class="keyword">for</span> i <span class="keyword">in</span> seq[:ws]]</span><br><span class="line">        self.label=[i <span class="keyword">for</span> i <span class="keyword">in</span> seq[ws:]]</span><br><span class="line">        self.reset()</span><br><span class="line">        self.ws=ws</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set</span>(<span class="params">self,dpi</span>):</span><br><span class="line">        <span class="comment"># 添加数据</span></span><br><span class="line">        self.x.append(dpi)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        self.x=self.ori[:]</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,idx</span>):</span><br><span class="line">        <span class="keyword">return</span> self.x[idx:idx+self.ws],self.label[idx]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.x)</span><br></pre></td></tr></table></figure><p>哦这边提一下，有两种方式，一种是用原始数据做预测，一种是用预测数据做预测，可能有点抽象，下面举个例子。</p><p>假设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>=</mo><mo stretchy="false">[</mo><mi>a</mi><mn>1</mn><mo separator="true">,</mo><mi>a</mi><mn>2</mn><mo separator="true">,</mo><mi>a</mi><mn>3</mn><mo separator="true">,</mo><mi>a</mi><mn>4</mn><mo separator="true">,</mo><mi>a</mi><mn>5</mn><mo separator="true">,</mo><mi>a</mi><mn>6</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">A=[a1,a2,a3,a4,a5,a6]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">a</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord">6</span><span class="mclose">]</span></span></span></span>，时间窗口大小为3。</p><p>用原始数据做预测，那么输入值为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mn>1</mn><mo separator="true">,</mo><mi>a</mi><mn>2</mn><mo separator="true">,</mo><mi>a</mi><mn>3</mn></mrow><annotation encoding="application/x-tex">a1,a2,a3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">a</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord">3</span></span></span></span>，得到的结果将与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mn>4</mn></mrow><annotation encoding="application/x-tex">a4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord mathnormal">a</span><span class="mord">4</span></span></span></span>做比较。下一轮输入为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mn>2</mn><mo separator="true">,</mo><mi>a</mi><mn>3</mn><mo separator="true">,</mo><mi>a</mi><mn>4</mn></mrow><annotation encoding="application/x-tex">a2,a3,a4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">a</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord">4</span></span></span></span>，得到的结果将与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mn>5</mn></mrow><annotation encoding="application/x-tex">a5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord mathnormal">a</span><span class="mord">5</span></span></span></span>做比较。</p><p>而用预测的数据做预测，第一轮输入值为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mn>1</mn><mo separator="true">,</mo><mi>a</mi><mn>2</mn><mo separator="true">,</mo><mi>a</mi><mn>3</mn></mrow><annotation encoding="application/x-tex">a1,a2,a3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">a</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord">3</span></span></span></span>，得到的结果是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mn>4</mn></mrow><annotation encoding="application/x-tex">b4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span><span class="mord">4</span></span></span></span>，在与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mn>4</mn></mrow><annotation encoding="application/x-tex">a4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord mathnormal">a</span><span class="mord">4</span></span></span></span>做比较后，下一轮的输入为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mn>2</mn><mo separator="true">,</mo><mi>a</mi><mn>3</mn><mo separator="true">,</mo><mi>b</mi><mn>4</mn></mrow><annotation encoding="application/x-tex">a2,a3,b4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">a</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mord">4</span></span></span></span>，会出现如下情况：</p><p>输入数据为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mn>4</mn><mo separator="true">,</mo><mi>b</mi><mn>5</mn><mo separator="true">,</mo><mi>b</mi><mn>6</mn></mrow><annotation encoding="application/x-tex">b4,b5,b6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">b</span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mord">6</span></span></span></span>。</p><p>我们现在举的例子是用预测的数据做预测。当然，最后也会给出一个用原始数据做预测的版本，那个版本相对简单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ws=<span class="number">6</span> <span class="comment"># 全局时间窗口</span></span><br><span class="line">train_data=MyDataSet(x,ws)</span><br></pre></td></tr></table></figure><hr><p>网络的架构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net3</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,in_features=<span class="number">54</span>,n_hidden1=<span class="number">128</span>,n_hidden2=<span class="number">256</span>,n_hidden3=<span class="number">512</span>,out_features=<span class="number">7</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(Net3, self).__init__()</span><br><span class="line">        self.flatten=nn.Flatten()</span><br><span class="line">        self.hidden1=nn.Sequential(</span><br><span class="line">            nn.Linear(in_features,n_hidden1,<span class="literal">False</span>),</span><br><span class="line">           </span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line">        self.hidden2=nn.Sequential(</span><br><span class="line">            nn.Linear(n_hidden1,n_hidden2),</span><br><span class="line"></span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line">        self.hidden3=nn.Sequential(</span><br><span class="line">            nn.Linear(n_hidden2,n_hidden3),</span><br><span class="line"></span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line">        self.out=nn.Sequential(nn.Linear(n_hidden3,out_features))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x=self.flatten(x)</span><br><span class="line">        x=self.hidden2(self.hidden1(x))</span><br><span class="line">        x=self.hidden3(x)</span><br><span class="line">        <span class="keyword">return</span> self.out(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CNN</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, output_dim=<span class="number">1</span>,ws=<span class="number">6</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(CNN, self).__init__()</span><br><span class="line">        self.relu = nn.ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">        self.conv1 = nn.Conv1d(ws, <span class="number">64</span>, <span class="number">1</span>)</span><br><span class="line">        self.lr = nn.LeakyReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">        self.conv2 = nn.Conv1d(<span class="number">64</span>, <span class="number">128</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.bn1, self.bn2 = nn.BatchNorm1d(<span class="number">64</span>), nn.BatchNorm1d(<span class="number">128</span>)</span><br><span class="line">        self.bn3, self.bn4 = nn.BatchNorm1d(<span class="number">1024</span>), nn.BatchNorm1d(<span class="number">128</span>)</span><br><span class="line">        self.flatten = nn.Flatten()</span><br><span class="line">        self.lstm1 = nn.LSTM(<span class="number">128</span>, <span class="number">1024</span>)</span><br><span class="line">        self.lstm2 = nn.LSTM(<span class="number">1024</span>, <span class="number">256</span>)</span><br><span class="line">        self.lstm3=nn.LSTM(<span class="number">256</span>,<span class="number">512</span>)</span><br><span class="line">        self.fc = nn.Linear(<span class="number">512</span>, <span class="number">512</span>)</span><br><span class="line">        self.fc4=nn.Linear(<span class="number">512</span>,<span class="number">256</span>)</span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">256</span>, <span class="number">64</span>)</span><br><span class="line">        self.fc3 = nn.Linear(<span class="number">64</span>, output_dim)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reS</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> x.reshape(-<span class="number">1</span>, x.shape[-<span class="number">1</span>], x.shape[-<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.reS(x)</span><br><span class="line">        x = self.conv1(x) </span><br><span class="line">        x = self.lr(x)</span><br><span class="line"></span><br><span class="line">        x = self.conv2(x) </span><br><span class="line">        x = self.lr(x)</span><br><span class="line"></span><br><span class="line">        x = self.flatten(x)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># LSTM部分</span></span><br><span class="line">        x, h = self.lstm1(x)</span><br><span class="line">        x, h = self.lstm2(x)</span><br><span class="line">        x,h=self.lstm3(x)</span><br><span class="line">        x, _ = h</span><br><span class="line"></span><br><span class="line">        x = self.fc(x.reshape(-<span class="number">1</span>, ))</span><br><span class="line">        x = self.relu(x)</span><br><span class="line">        x = self.fc4(x)</span><br><span class="line">        x = self.relu(x)</span><br><span class="line">        x = self.fc1(x)</span><br><span class="line">        x = self.relu(x)</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Net3</code>主要是一维卷积，<code>CNN</code>加入了LSTM结构。至于名字，是随便取的…跟内容并无关系。</p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Train</span>(<span class="params">model,train_data,seed=<span class="number">1</span></span>):</span><br><span class="line">    device=<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span></span><br><span class="line">    model=model.to(device)</span><br><span class="line">    Mloss=<span class="number">100000</span></span><br><span class="line">    path=<span class="string">r&quot;YourPath\%s.pth&quot;</span>%seed</span><br><span class="line">    <span class="comment"># 设置损失函数,这里使用的是均方误差损失</span></span><br><span class="line">    criterion = nn.MSELoss()</span><br><span class="line">    <span class="comment"># 设置优化函数和学习率lr</span></span><br><span class="line">    optimizer=torch.optim.Adam(model.parameters(),lr=<span class="number">1e-5</span>,betas=(<span class="number">0.9</span>,<span class="number">0.99</span>),</span><br><span class="line">                               eps=<span class="number">1e-07</span>,weight_decay=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 设置训练周期</span></span><br><span class="line">    epochs =<span class="number">3000</span></span><br><span class="line">    criterion=criterion.to(device)</span><br><span class="line">    model.train()</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        total_loss=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)-ws):</span><br><span class="line">            <span class="comment"># 每次更新参数前都梯度归零和初始化</span></span><br><span class="line">            seq,y_train=train_data.get(i) <span class="comment"># 从我们的数据集中拿出数据</span></span><br><span class="line">            seq,y_train=torch.FloatTensor(seq),torch.FloatTensor([y_train])</span><br><span class="line">            seq=seq.unsqueeze(dim=<span class="number">0</span>)</span><br><span class="line">            seq,y_train=seq.to(device),y_train.to(device)</span><br><span class="line"></span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            <span class="comment"># 注意这里要对样本进行reshape，</span></span><br><span class="line">            <span class="comment"># 转换成conv1d的input size（batch size, channel, series length）</span></span><br><span class="line">            y_pred = model(seq)</span><br><span class="line">            loss = criterion(y_pred, y_train)</span><br><span class="line">            loss.backward()</span><br><span class="line">            train_data.<span class="built_in">set</span>(y_pred.to(<span class="string">&quot;cpu&quot;</span>).item()) <span class="comment"># 再放入预测数据</span></span><br><span class="line">            optimizer.step()</span><br><span class="line">            total_loss+=loss</span><br><span class="line"></span><br><span class="line">        train_data.reset()</span><br><span class="line">        <span class="keyword">if</span> total_loss.tolist()&lt;Mloss:</span><br><span class="line">            Mloss=total_loss.tolist()</span><br><span class="line">            torch.save(model.state_dict(),path)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Saving&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Epoch: <span class="subst">&#123;epoch+<span class="number">1</span>:<span class="number">2</span>&#125;</span> Mean Loss: <span class="subst">&#123;total_loss.tolist()/<span class="built_in">len</span>(train_data):<span class="number">10.8</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure><p>正常训练就OK</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d=CNN(ws=ws)</span><br><span class="line">Train(d,train_data,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p><img src="/2023/08/18/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E4%B8%80%E7%BB%B4%E6%95%B0%E6%8D%AE%E6%89%A9%E5%B1%95/image-20230818173024746.png" alt="image-20230818173024746"></p><p>平均损失在10点左右，还有很大优化空间。当然我们这里只是举个非常简单的例子，就是个<code>baseline</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">checkpoint=torch.load(<span class="string">r&quot;YourPath\4.pth&quot;</span>)</span><br><span class="line">d.load_state_dict(checkpoint) <span class="comment"># 加载最佳参数</span></span><br><span class="line">d.to(<span class="string">&quot;cpu&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="四、结果可视化">四、结果可视化</h3><p>我们这里用到<code>Pyechart</code>进行可视化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> CurrentConfig</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pre,ppre=[i.item() <span class="keyword">for</span> i <span class="keyword">in</span> x[:ws]],[]</span><br><span class="line"><span class="comment"># pre 是用原始数据做预测</span></span><br><span class="line"><span class="comment"># ppre 用预测数据做预测</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)-ws+<span class="number">1</span>):</span><br><span class="line">    ppre.append(d(torch.FloatTensor(x[i:i+ws]).unsqueeze(dim=<span class="number">0</span>)))</span><br><span class="line">    pre.append(d(torch.FloatTensor(pre[-ws:]).unsqueeze(dim=<span class="number">0</span>)).item())</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">l=Line()</span><br><span class="line">l.add_xaxis([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))])</span><br><span class="line">l.add_yaxis(<span class="string">&quot;Original Data&quot;</span>,x.tolist())</span><br><span class="line">l.add_yaxis(<span class="string">&quot;Pred Data(Using Raw Datas)&quot;</span>,x[:ws].tolist()+[i.item() <span class="keyword">for</span> i <span class="keyword">in</span> ppre])</span><br><span class="line">l.add_yaxis(<span class="string">&quot;Pred Data(Using Pred Datas)&quot;</span>,pre)</span><br><span class="line">l.set_series_opts(label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>))</span><br><span class="line">l.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;LSTM CNN&#x27;</span>))</span><br><span class="line"></span><br><span class="line">l.render_notebook()</span><br></pre></td></tr></table></figure><p>根据时间窗口的不同，可以得到不同的结果。</p><h4 id="ws-4">ws=4</h4><img src="/2023/08/18/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E4%B8%80%E7%BB%B4%E6%95%B0%E6%8D%AE%E6%89%A9%E5%B1%95/image-20230818173641683.png" alt="image-20230818173641683" style="zoom:50%;"><h4 id="ws-5">ws=5</h4><img src="/2023/08/18/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E4%B8%80%E7%BB%B4%E6%95%B0%E6%8D%AE%E6%89%A9%E5%B1%95/image-20230818173542749.png" alt="image-20230818173542749" style="zoom:50%;"><h4 id="ws-6">ws=6</h4><img src="/2023/08/18/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E4%B8%80%E7%BB%B4%E6%95%B0%E6%8D%AE%E6%89%A9%E5%B1%95/image-20230818173724244.png" alt="image-20230818173724244" style="zoom:50%;"><p>从结果上来看，时间窗口越大越好。但是这里我们只能到六了，再大就不礼貌了。(高粱只有六个节点的数据)。</p><p>至于验证，我们可以选<code>Rice</code>做验证：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">x=torch.FloatTensor(pp_c[pp_c[<span class="string">&#x27;Item&#x27;</span>]==<span class="string">&quot;Rice&quot;</span>][<span class="string">&#x27;Value&#x27;</span>].tolist())</span><br><span class="line">pre,ppre=[i.item() <span class="keyword">for</span> i <span class="keyword">in</span> x[:ws]],[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)-ws+<span class="number">1</span>):</span><br><span class="line">    ppre.append(d(torch.FloatTensor(x[i:i+ws]).unsqueeze(dim=<span class="number">0</span>)))</span><br><span class="line">    pre.append(d(torch.FloatTensor(pre[-ws:]).unsqueeze(dim=<span class="number">0</span>)).item())</span><br><span class="line">l=Line()</span><br><span class="line">l.add_xaxis([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))])</span><br><span class="line">l.add_yaxis(<span class="string">&quot;Original Data&quot;</span>,x.tolist())</span><br><span class="line">l.add_yaxis(<span class="string">&quot;Pred Data(Using Raw Datas)&quot;</span>,x[:ws].tolist()+[i.item() <span class="keyword">for</span> i <span class="keyword">in</span> ppre])</span><br><span class="line">l.add_yaxis(<span class="string">&quot;Pred Data(Using Pred Datas)&quot;</span>,pre)</span><br><span class="line">l.set_series_opts(label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>))</span><br><span class="line">l.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;LSTM CNN&#x27;</span>))</span><br><span class="line"></span><br><span class="line">l.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="/2023/08/18/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E4%B8%80%E7%BB%B4%E6%95%B0%E6%8D%AE%E6%89%A9%E5%B1%95/image-20230818174046726.png" alt="image-20230818174046726"></p><p>可以发现，用预测做预测的结果，基本上不会差太多，那也就意味着，我们可以对高粱进行预测啦！不过在这之前，我们可以看看用原始数据做训练的结果：</p><p><img src="/2023/08/18/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E4%B8%80%E7%BB%B4%E6%95%B0%E6%8D%AE%E6%89%A9%E5%B1%95/image-20230818174214014.png" alt="image-20230818174214014"></p><p>时间窗口一样为6，可以看到在黑线贴合的非常好，但是面对大量缺失的数据，精度就远不如用预测数据做预测的结果了。</p><p>此外，这是用CNN做的结果</p><p><img src="/2023/08/18/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E4%B8%80%E7%BB%B4%E6%95%B0%E6%8D%AE%E6%89%A9%E5%B1%95/image-20230818174436597.png" alt="image-20230818174436597"></p><p>我们可以发现LSTM的波动要比CNN好，CNN后面死水一潭，应该是梯度消失导致的，前面信息没有了，后面信息又是自个构造的，这就导致了到后面变成了线性情况。</p><p>那么最后的最后，就是预测高粱产量了：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pre_data=pp_c[pp_c[<span class="string">&#x27;Item&#x27;</span>]==<span class="string">&#x27;Sorghum&#x27;</span>][<span class="string">&#x27;Value&#x27;</span>].tolist()</span><br><span class="line">l=pre_data[:]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)-ws+<span class="number">1</span>):</span><br><span class="line">    l.append(d(torch.FloatTensor(l[-ws:]).unsqueeze(dim=<span class="number">0</span>)).item())</span><br><span class="line">L=Line()</span><br><span class="line">L.add_xaxis([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))])</span><br><span class="line">L.add_yaxis(<span class="string">&quot;Pred&quot;</span>,l)</span><br><span class="line">L.set_series_opts(label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>))</span><br><span class="line">L.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;sorghum production forecasts&#x27;</span>)</span><br><span class="line">                            </span><br><span class="line">                             )</span><br><span class="line"></span><br><span class="line">L.render_notebook()</span><br><span class="line">l.to_csv(<span class="string">&quot;path&quot;</span>)</span><br></pre></td></tr></table></figure><img src="/2023/08/18/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E4%B8%80%E7%BB%B4%E6%95%B0%E6%8D%AE%E6%89%A9%E5%B1%95/image-20230818174718747.png" alt="image-20230818174718747" style="zoom:50%;"><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">无聊</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="项目实践" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>扇贝英语单词扫盲</title>
    <link href="http://example.com/2023/08/06/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91%E6%89%87%E8%B4%9D%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D/"/>
    <id>http://example.com/2023/08/06/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91%E6%89%87%E8%B4%9D%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D/</id>
    <published>2023-08-06T12:35:50.213Z</published>
    <updated>2023-09-09T12:19:27.019Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Chapter-1">Chapter 1</h2><blockquote><p>consumption</p></blockquote><ul><li>这个词只能作名词，表示<code>消费，消耗，食用，引用</code>的意思，当然还有另外一个偏差比较大的：<code>肺痨</code></li><li>给一些例句：<code>I always take fuel consumption into consideration when buying a car</code></li><li><code>take into consideration</code>，<code>fuel consumption</code>，希望你能懂</li></ul><blockquote><p>accessory</p></blockquote><ul><li><code>access</code>表示路径，到达，访问，存取，微软的那个DBMS也叫Access</li><li>但是<code>accessory</code>并不是由<code>access</code>引申的，他作为形容词表示<code>辅助的，副的</code>，作为名词则表示<code>附件，配件，同谋，帮凶</code></li></ul><blockquote><p>premise</p></blockquote><ul><li>这玩意表示地基，房屋，以及最重要的<code>前提，假设</code></li><li><code>We should agree that our debate is based on the premise stated earlier.</code>这里<code>stated earlier</code>早先阐明的，修饰<code>the premise</code></li></ul><blockquote><p>vacate</p></blockquote><ul><li>表示<code>腾出，空出，还有离职，退位</code></li><li><code>We are requested to vacate our rooms by noon.</code></li></ul><blockquote><p>demanding</p></blockquote><ul><li>这表示<code>苛求的，难满足的，费力的，需求高的</code>，啊并不是需要的，而是难满足(需求)的</li><li><code>She doesn't have the ability to do this demanding job.</code></li></ul><blockquote><p>snap</p></blockquote><ul><li>突然折断，突然生气</li><li><code>The wind had snapped the tree in two.</code></li></ul><blockquote><p>barber</p></blockquote><ul><li><code>理发师</code>，没什么好说的，做动词就表示<code>为...理发</code></li></ul><blockquote><p>expel</p></blockquote><ul><li><code>排除，把...开除，喷出</code></li><li><code>She was expelled from school at 15.</code></li></ul><blockquote><p>autonomous</p></blockquote><ul><li>自治的，独立自主的</li></ul><blockquote><p>cater</p></blockquote><ul><li><code>满足...需求，迎合，提供饮食</code>，非常有意思的词语</li><li><code>He has to cater for his boss.</code> cater for 迎合XX</li></ul><blockquote><p>staff</p></blockquote><ul><li>职员</li></ul><blockquote><p>infrastructure</p></blockquote><ul><li><p>这个词啊，<code>structure</code>结构，词根<code>infra</code>表示在下，以下的意思，所以就是下层结构：<code>基础设施，基础结构</code></p></li><li><p><code>Improving the city's transport infrastructure is the governor's first step.</code></p></li></ul><hr><blockquote><p>conduct</p></blockquote><ul><li>表示名词，则为<code>举止，行为，处理，管理</code></li><li>动词表示<code>进行，组织，实施，处理，指挥</code>等等</li><li><code>to conduct an experiment</code></li></ul><blockquote><p>lease</p></blockquote><ul><li>名词表示<code>租约，租契</code></li><li>动词表示<code>租用，租借，出租</code></li></ul><blockquote><p>cereal</p></blockquote><ul><li>表示<code>谷物</code>，还有个类似的:<code>grain</code></li></ul><blockquote><p>versatile</p></blockquote><ul><li>形容词是多才多艺的，多方面的，多用途的</li><li><code>He's a versatile actor who has played a wide variety of parts.</code></li></ul><blockquote><p>dull</p></blockquote><ul><li><code>乏味的，单调的，迟钝的，阴沉昏暗</code>的</li><li><code>Life in a small town could be deadly dull.</code></li></ul><blockquote><p>cuisine</p></blockquote><ul><li>表示<code>烹饪，烹调法，烹调风格</code></li><li><code>The hotel restaurant is noted for its excellent cuisine.</code> 哦这里的<code>be noted for</code>，因…而出名</li></ul><blockquote><p>shred</p></blockquote><ul><li><code>碎片，细条，些许，少量</code></li><li><code>The paper was ripped to shreds and scattered on the floor.</code></li></ul><blockquote><p>specialize</p></blockquote><ul><li><code>专门从事，专门经营</code></li><li><code>The French restaurant specialized in seafood.</code> <code>specialize in</code> 专攻于…</li></ul><blockquote><p>spice</p></blockquote><ul><li><code>调味料，香料，调剂品</code>，表示动词就是<code>添加香料</code></li></ul><blockquote><p>incorporate</p></blockquote><ul><li><code>包含，并入，合并，吸纳</code></li><li><code>Many of your suggestions have been incorporated in the new plan.</code> 你的很多建议都已经被采纳进新计划中了</li></ul><blockquote><p>cultivate</p></blockquote><ul><li><code>耕作，种植，培养，结交</code></li><li><code>Most of the fertile land in the country has been cultivated.</code> 这个搭配很有意思，<code>fertile land</code> 肥沃的土地</li></ul><blockquote><p>puff</p></blockquote><ul><li>作动词表示<code>喘气，吸(烟),喷出，冒出</code>，做名词一般是<code>一小口烟，一缕，少量，吸烟</code>，甚至能表示<code>泡芙，吹捧的文章</code></li></ul><blockquote><p>consult</p></blockquote><ul><li>只能做动词，表示<code>咨询，查阅，商讨</code></li><li><code>Have you consulted your lawyer about this?</code> 你就此事咨询过你的律师吗</li></ul><hr><blockquote><p>sponge</p></blockquote><ul><li>作名词是<code>海绵，寄生虫</code></li><li>作动词是<code>用海绵擦</code></li></ul><blockquote><p>textile</p></blockquote><ul><li>表示<code>织物，纺织品，纺织业</code></li></ul><blockquote><p>absorb</p></blockquote><ul><li>表示<code>吸收，吸引...注意</code>，以及<code>使全神贯注</code></li><li><code>The cream is easily absorbed into the skin.</code></li></ul><blockquote><p>tube</p></blockquote><ul><li>表示<code>管子，管道</code></li></ul><blockquote><p>irrigate</p></blockquote><ul><li><code>灌溉，冲洗</code></li></ul><blockquote><p>weird</p></blockquote><ul><li><code>怪异的，神秘的</code></li><li><code>A series of weird things taht happened recently made people terrified.</code></li></ul><blockquote><p>odorous</p></blockquote><ul><li>顶级矛盾纠结体：<code>有气味的，难闻的，香味，芬芳的</code></li></ul><blockquote><p>relic</p></blockquote><ul><li><code>遗物，遗迹，遗风</code></li><li><code>Archaeologists found a beautiful mural in a relic from the Stone Age.</code>考古学家在一个石器时代的遗迹中发现了一幅精美壁画</li></ul><blockquote><p>excavation</p></blockquote><ul><li><code>挖掘，发掘，出土文物</code></li><li><code>The excavations are open to the public</code></li></ul><blockquote><p>affiliate</p></blockquote><ul><li>作名词表示<code>分公司，子公司</code>，做动词表示<code>使附属，接纳，加入，并入</code></li></ul><blockquote><p>pinpoint</p></blockquote><ul><li><code>精确定位，准确的，精确地</code></li></ul><blockquote><p>prominent</p></blockquote><ul><li><code>杰出的，显著的，突出的</code></li><li><code>As the leader, he played a prominent part in the team's victory.</code></li></ul><blockquote><p>distinctive</p></blockquote><ul><li>出色的，有特色的</li><li><code>I can recognize her from a mile away because she has a very distinctive voice.</code></li></ul><blockquote><p>grind</p></blockquote><ul><li>磨碎，折磨，压榨，反复灌输</li><li>当然做名词可以表示<code>磨光，苦干，苦学，苦差事</code></li></ul><blockquote><p>dwindle</p></blockquote><ul><li><code>减少，缩小</code></li><li><code>The country's population has dwindled to half of its former size</code></li></ul><blockquote><p>embody</p></blockquote><ul><li>具体表现，体现，代表</li><li><code>She embodies her principles in her behavior.</code></li></ul><blockquote><p>primitive</p></blockquote><ul><li>原始的，简陋的</li></ul><hr><blockquote><p>unearth</p></blockquote><ul><li>掘出，发掘，揭露</li></ul><blockquote><p>bronze</p></blockquote><ul><li>青铜，青铜色</li></ul><blockquote><p>cohesion</p></blockquote><ul><li>凝聚力，团结</li><li><code>The lack of cohesion within the team made them lose the game.</code></li></ul><blockquote><p>catalog</p></blockquote><ul><li>目录</li></ul><blockquote><p>exemplify</p></blockquote><ul><li>例证，是…的典型</li><li><code>This painting exemplifies the artist's early style.</code></li></ul><blockquote><p>spawn</p></blockquote><ul><li>产卵，产生，促成</li><li>卵</li></ul><blockquote><p>yield</p></blockquote><ul><li>产生，出产，生产，让位</li><li>产量，收益</li><li><code>Hard work yields good results</code></li></ul><blockquote><p>volatile</p></blockquote><ul><li>易挥发的，不稳定的</li></ul><blockquote><p>tender</p></blockquote><ul><li>温柔，柔软的，和善的，年轻的</li><li>投标，提出，交付</li></ul><blockquote><p>floral</p></blockquote><ul><li>花的，像花的</li></ul><blockquote><p>blossom</p></blockquote><ul><li>花</li><li>开花，长成</li></ul><blockquote><p>hail</p></blockquote><ul><li>出生地是，来自，招呼，呼喊，称颂</li><li>冰雹，一阵</li></ul><blockquote><p>qualify</p></blockquote><ul><li>合格，有资格，修饰，限定</li><li><code>We qualified for the final by beating Stanford in previous rounds</code></li></ul><blockquote><p>fragrant</p></blockquote><ul><li>香的</li></ul><blockquote><p>tutor</p></blockquote><ul><li>导师</li><li>教，任教</li></ul><blockquote><p>outrageously</p></blockquote><ul><li><code>令人不能容忍地，肆无忌惮地</code></li><li><code>The outrageously high prices astounded him</code></li></ul><blockquote><p>suspend</p></blockquote><ul><li>推迟，暂停，悬挂，取消</li><li><code>The school suspended the sports meeting</code></li></ul><hr><blockquote><p>braid</p></blockquote><ul><li>表示名词可以是<code>穗带，发带</code></li><li>表示动词可以是<code>编织</code>,与之相似的有<code>weave</code></li></ul><blockquote><p>aspire</p></blockquote><ul><li>有志于，向往</li><li><code>He loves painting, and aspires to be a world-famous artist.</code></li></ul><blockquote><p>stalk</p></blockquote><ul><li>潜行，跟踪</li><li>杆，柄</li></ul><blockquote><p>municipal</p></blockquote><ul><li>市政的，地方性的</li></ul><blockquote><p>craftsman</p></blockquote><ul><li>工匠，手艺人</li></ul><blockquote><p>adhere</p></blockquote><ul><li>粘附，附着，坚守，遵守</li><li><code>For ten months he adhered to a strict no-fat low-salt diet.</code></li></ul><blockquote><p>profound</p></blockquote><ul><li>深远的，深切的，深奥的，渊博的</li><li><code>The reports has profound implications for schools</code></li></ul><blockquote><p>scratch</p></blockquote><ul><li>划伤，取消</li></ul><hr><blockquote><p>guilty</p></blockquote><p>I felt guilt about not visiting my parents more often.</p><blockquote><p>convenience</p></blockquote><p>For convenience, the two groups have been treated as one in this report.</p><blockquote><p>fluid</p></blockquote><p>The political sitatution is so fluid that any thoughtless move could lead to military conflict.</p><blockquote><p>average</p></blockquote><p>an average rate/cost/price</p><blockquote><p>restrict</p></blockquote><p>We restrict the number of students per class to 10.</p><blockquote><p>revenue</p></blockquote><p>The goverment who gain about 12 billion dolor in tax revenues over 5 years.</p><blockquote><p>retail</p></blockquote><p>Could you tell me the retail prices of these shoes?</p><blockquote><p>anxious</p></blockquote><p>Parents are naturelly anxious for their children.</p><blockquote><p>lower</p></blockquote><p>Please lower your voice in the library.</p><blockquote><p>finance</p></blockquote><p>The fund has been used largely to finance schools.</p><blockquote><p>commerce</p></blockquote><p>Commerce between China and Africa reached a historic high last year.</p><blockquote><p>surge</p></blockquote><p>The unexpected surge in inflation put the country’s economy into crisis.</p><blockquote><p>sticky</p></blockquote><p>I have to take a shower before going out because the sweat had made my skin sticky.</p><blockquote><p>meridian</p></blockquote><p>A meridian is an imaginary line running from north to south.</p><blockquote><p>protein</p></blockquote><p>The doctor advised use to increase the intake of essential proteins to form muscles.</p><blockquote><p>beverage</p></blockquote><p>Alcoholic beverages can only be sold to adults according to the new law.</p><blockquote><p>potential</p></blockquote><p>the potential for change</p><blockquote><p>release</p></blockquote><p>The children were asked to release the butterflies they had caught into the wild.</p><blockquote><p>liquid</p></blockquote><blockquote><p>texture</p></blockquote><p>This gile likes the soft texture of silk, so most of her clothes are made of it.</p><blockquote><p>territory</p></blockquote><p>The mountain is in Chinese territory.</p><hr><blockquote><p>remains</p></blockquote><p>Take aways the remians of lunch in time and keep your desk clean.</p><blockquote><p>ripen</p></blockquote><p>The bananas ripen too quickly and begain to rot.</p><blockquote><p>jar</p></blockquote><p>a jar of coffee</p><blockquote><p>seasoning</p></blockquote><p>She cooked this dish with a variety of seasonings.</p><blockquote><p>portion</p></blockquote><p>A significant portion of the population speaks English.</p><blockquote><p>hint</p></blockquote><p>I won’t reply to you directly, but I can give you a hint about the answer.</p><blockquote><p>slice</p></blockquote><p>a slice of bread</p><blockquote><p>intense</p></blockquote><p>This work demains intense concentration.</p><blockquote><p>recommend</p></blockquote><p>Can you recommend a good hotel?</p><blockquote><p>superior</p></blockquote><p>Superior intellgence</p><blockquote><p>rinse</p></blockquote><p>冲洗，漂洗</p><p>Rinse the cooked pasta with boiling water.</p><blockquote><p>plump</p></blockquote><p>The teacher was a cheerful plump woman.</p><blockquote><p>noticeable</p></blockquote><p>The effect of the medisine is noticeable especially in young people.</p><blockquote><p>moisture</p></blockquote><p>A rich soil that retains moisture is needed for this kind of plants to glow.</p><blockquote><p>nutrition</p></blockquote><p>to study food science and nutrition</p><blockquote><p>amount</p></blockquote><p>You will receive a bill for the full amount.</p><blockquote><p>ongoing</p></blockquote><p>The negotiation is still ongoing since no agreement has been reached.</p><blockquote><p>generous</p></blockquote><p>to be generous with your time</p><blockquote><p>bland</p></blockquote><p>The expert just gave a few bland comments.</p><blockquote><p>aroma</p></blockquote><p>She was awoken by the aroma of coffee and frying eggs.</p><blockquote><p>stimulate</p></blockquote><p>The game has stimulated her interest in studying.</p><blockquote><p>chunk</p></blockquote><p>I often eat a chunk of bread for breakfast.</p><blockquote><p>sprinkle</p></blockquote><p>Sprinkle a little chesses over the pizza, and cut it into eight slices.</p><blockquote><p>refreshing</p></blockquote><p>The breeze after the rain is very refreshing.</p><hr><blockquote><p>concentration</p></blockquote><p>表示名词就是<code>专心、集中</code>的意思</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I lost my concentration during the long <span class="keyword">and</span> dull lecture.</span><br></pre></td></tr></table></figure><blockquote><p>organic</p></blockquote><p>表示形容词，<code>有机的、器官的、组织的、简单的</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Organic apples are much smaller.</span><br></pre></td></tr></table></figure><blockquote><p>float</p></blockquote><p>表示动词，就是<code>漂浮，漂流，浮动，提出，股票上市</code></p><p>表示名词，就是<code>零钱、漂浮物</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The boats were floating gently down the river.</span><br></pre></td></tr></table></figure><blockquote><p>dilute</p></blockquote><p>表示形容词，就是<code>稀释的，淡的，稀薄的，褪色的</code></p><p>表示动词，就是<code>稀释、冲淡、变淡</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dilute the fruit jucie <span class="keyword">with</span> about an equal amount of water.</span><br></pre></td></tr></table></figure><blockquote><p>metric</p></blockquote><p>表示名词，就是<code>米</code></p><p>表示形容词，就是<code>米制的，公制的</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Most high-tech industry have been using the metric system <span class="keyword">for</span> decade.</span><br></pre></td></tr></table></figure><blockquote><p>removeal</p></blockquote><p>表示名词，就是<code>移动，搬迁，除去</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">It<span class="string">&#x27;s just the removeal of a small lump, so you don&#x27;</span>t need to worry.</span><br></pre></td></tr></table></figure><blockquote><p>chamber</p></blockquote><p>表示名词，是<code>议会、会议、房间</code>的意思</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">They were have a meeting <span class="keyword">in</span> the council chamber.</span><br></pre></td></tr></table></figure><blockquote><p>mimic</p></blockquote><p>表示动词，<code>模仿，像</code></p><p>表示名词，<code>小丑，模仿者</code></p><p>表示形容词，<code>模仿的，模拟的</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The students could mimic the math teache<span class="string">r&#x27;s accents.</span></span><br></pre></td></tr></table></figure><blockquote><p>ventilation</p></blockquote><p>表名词，<code>通风设备</code>，<code>空气流通</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The factory had poor ventilation <span class="keyword">and</span> <span class="keyword">in</span> summer it became hot <span class="keyword">and</span> humid.</span><br></pre></td></tr></table></figure><blockquote><p>tend</p></blockquote><p>表动词，<code>倾向于，照料</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">When I<span class="string">&#x27;m tired, I tend to make mistakes.</span></span><br></pre></td></tr></table></figure><blockquote><p>flame</p></blockquote><p>表名词，<code>火焰，光芒，热情</code></p><p>表动词，<code>燃烧，爆发，激起</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The flame were growing higher <span class="keyword">and</span> higher.</span><br></pre></td></tr></table></figure><blockquote><p>solution</p></blockquote><p>表名词，<code>溶液，解答，应答</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Boosting tourism will provide a long-term soluntion to the city<span class="string">&#x27;s employment problems.</span></span><br></pre></td></tr></table></figure><blockquote><p>allergic</p></blockquote><p>表形容词，表示<code>过敏的，对...讨厌的</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A great number of people are born to be allergic to peanuts.</span><br></pre></td></tr></table></figure><blockquote><p>emit</p></blockquote><p>表动词，<code>发射，发出</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The new device can emit bright <span class="keyword">and</span> powerful lights.</span><br></pre></td></tr></table></figure><blockquote><p>ailment</p></blockquote><p>表名词，<code>小病</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Your cold <span class="keyword">is</span> just a minor ailment <span class="keyword">and</span> you neen<span class="string">&#x27;t go to hosipital.</span></span><br></pre></td></tr></table></figure><blockquote><p>quality</p></blockquote><p>表名词，<code>质量，品质，特性</code></p><p>表形容词，<code>优秀的，优质的</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">goods of a high quality</span><br></pre></td></tr></table></figure><blockquote><p>factor</p></blockquote><p>表名词，<code>因素，因子</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The deciding factor of the competition between top players <span class="keyword">is</span> their state of mind.</span><br></pre></td></tr></table></figure><blockquote><p>category</p></blockquote><p>表名词，<code>种类</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">We are divided into sev category by grades.</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">针对扇贝英语单词印象不深的做一个记录。</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="英语" scheme="http://example.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>【GEE】GEE中文食用说明书！</title>
    <link href="http://example.com/2023/07/23/%E3%80%90GEE%E3%80%91GEE%E4%B8%AD%E6%96%87%E9%A3%9F%E7%94%A8%E8%AF%B4%E6%98%8E%E4%B9%A6%EF%BC%81/"/>
    <id>http://example.com/2023/07/23/%E3%80%90GEE%E3%80%91GEE%E4%B8%AD%E6%96%87%E9%A3%9F%E7%94%A8%E8%AF%B4%E6%98%8E%E4%B9%A6%EF%BC%81/</id>
    <published>2023-07-23T12:43:08.603Z</published>
    <updated>2023-07-23T12:45:24.281Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>详见 <a href="https://chen-xiaolv.github.io/GeeDocumentC/">https://chen-xiaolv.github.io/GeeDocumentC/</a></p></blockquote><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">正在施工中！</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="GIS" scheme="http://example.com/tags/GIS/"/>
    
    <category term="RS" scheme="http://example.com/tags/RS/"/>
    
    <category term="GEE" scheme="http://example.com/tags/GEE/"/>
    
  </entry>
  
  <entry>
    <title>【GEE】GeeMap食用说明书</title>
    <link href="http://example.com/2023/07/17/%E3%80%90GEE%E3%80%91GeeMap/"/>
    <id>http://example.com/2023/07/17/%E3%80%90GEE%E3%80%91GeeMap/</id>
    <published>2023-07-17T12:28:33.343Z</published>
    <updated>2023-07-23T12:44:12.547Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>纪念一下我装了半个下午终于装上的环境</p></blockquote><p>GEE是吴秋生博士为GEE开发的一套可视化Python模块，这个模块集成了诸多可视化工具和算法，能够助力GEE Python API的开发。目前已经在Github上获得2.8k stars了。</p><img src="/2023/07/17/%E3%80%90GEE%E3%80%91GeeMap/image-20230717203655539.png" alt="image-20230717203655539" style="zoom:50%;"><blockquote><p>吴老师是美国田纳西大学地理系的助理教授</p></blockquote><hr><h3 id="Chapter-1-GeeMap安装">Chapter 1 GeeMap安装</h3><p>保证conda环境下，我们按照如下步骤安装：</p><blockquote><p>这个是否一定是3.8不好说，反正我3.9是出问题了</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">conda create -n gee python=<span class="number">3.8</span></span><br><span class="line"></span><br><span class="line">conda activate gee</span><br><span class="line"></span><br><span class="line">conda install geemap -c conda-forge</span><br><span class="line"></span><br><span class="line">conda install geopandas</span><br><span class="line"></span><br><span class="line">conda install mamba -c conda-forge</span><br><span class="line"></span><br><span class="line">mamba install geemap xarray_leaflet -c conda-forge</span><br></pre></td></tr></table></figure><p>然后我们打开Jupyter：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">activate gee</span><br><span class="line"></span><br><span class="line">jupyter lab</span><br></pre></td></tr></table></figure><p>输入以下代码进行测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ee</span><br><span class="line"><span class="keyword">import</span> geemap</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">geemap.set_proxy(port=<span class="number">7890</span>)</span><br><span class="line"></span><br><span class="line">ee.Authenticate() <span class="comment"># 这一步是需要Google账号授权，按照步骤来填入tokens就行啦</span></span><br><span class="line"></span><br><span class="line">ee.Initialize() <span class="comment"># 初始化(实例化)</span></span><br><span class="line"></span><br><span class="line">Map=geemap.Map()</span><br><span class="line">Map</span><br></pre></td></tr></table></figure><p>当出现下图时，说明安装成功啦：</p><img src="/2023/07/17/%E3%80%90GEE%E3%80%91GeeMap/image-20230717204659590.png" alt="image-20230717204659590" style="zoom:50%;"><p>当然，这里指不定会爆出一些有的没的的问题，比如DLL找不到模块什么的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pillow --upgrade</span><br></pre></td></tr></table></figure><p>或者是SSL Error:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.environ[<span class="string">&#x27;HTTP_PROXY&#x27;</span>] = <span class="string">&#x27;http://127.0.0.1:7890&#x27;</span></span><br><span class="line">os.environ[<span class="string">&#x27;HTTPS_PROXY&#x27;</span>] = <span class="string">&#x27;https://127.0.0.1:7890&#x27;</span></span><br></pre></td></tr></table></figure><p>将其设置为全局代理就行。</p><img src="/2023/07/17/%E3%80%90GEE%E3%80%91GeeMap/image-20230717210225282.png" alt="image-20230717210225282" style="zoom:33%;"><p>代理可能要开TUN Model <a href="https://docs.cfw.lbyczf.com/contents/tun.html#windows">说明</a></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">~没有简介！</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="GIS" scheme="http://example.com/tags/GIS/"/>
    
    <category term="RS" scheme="http://example.com/tags/RS/"/>
    
    <category term="GEE" scheme="http://example.com/tags/GEE/"/>
    
  </entry>
  
  <entry>
    <title>【Typora】常用公式查询</title>
    <link href="http://example.com/2023/07/14/%E3%80%90Typora%E3%80%91%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F%E6%9F%A5%E8%AF%A2/"/>
    <id>http://example.com/2023/07/14/%E3%80%90Typora%E3%80%91%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F%E6%9F%A5%E8%AF%A2/</id>
    <published>2023-07-14T02:13:41.525Z</published>
    <updated>2023-09-12T06:25:32.742Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>其实之前整过这一类，但是好像在本地没有存档，这边就重新记录一下</p></blockquote><h4 id="绘制花括号函数">绘制花括号函数</h4><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnspacing="1em"><mtr><mtd class="mtr-glue"></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mo fence="true" lspace="0em" rspace="0em">{</mo></mstyle></mtd><mtd class="mtr-glue"></mtd><mtd class="mml-eqn-num"></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{equation}\left\{\right.\end{equation}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span></span></span><span class="tag"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-2.85em;"><span class="pstrut" style="height:2.84em;"></span><span class="eqn-num"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnspacing="1em"><mtr><mtd class="mtr-glue"></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo fence="true">{</mo><mtable rowspacing="0.16em" columnalign="left right" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>=</mo><mfrac><mrow><mn>3</mn><mi mathvariant="normal">/</mi><mi>p</mi><mi>i</mi></mrow><mn>2</mn></mfrac><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mn>2</mn><mi>t</mi><mo stretchy="false">)</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mfrac><mrow><mn>3</mn><mi mathvariant="normal">/</mi><mi>p</mi><mi>i</mi></mrow><mn>2</mn></mfrac><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mn>2</mn><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mo>=</mo><mi>s</mi><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo>≤</mo><mi>s</mi><mo>≤</mo><mi>L</mi><mo separator="true">,</mo><mi mathvariant="normal">∣</mi><mi>t</mi><mi mathvariant="normal">∣</mi><mo>≤</mo><mn>1.</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>z</mi><mo>=</mo><mfrac><mrow><mn>3</mn><mi mathvariant="normal">/</mi><mi>p</mi><mi>i</mi></mrow><mn>2</mn></mfrac><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mn>2</mn><mi>t</mi><mo stretchy="false">)</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mfrac><mrow><mn>3</mn><mi mathvariant="normal">/</mi><mi>p</mi><mi>i</mi></mrow><mn>2</mn></mfrac><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mn>2</mn><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo separator="true">,</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mstyle></mtd><mtd class="mtr-glue"></mtd><mtd class="mml-eqn-num"></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{equation}\left\{\begin{array}{lr}x=\frac{3/pi}{2}(1+2t)cos(\frac{3/pi}{2}(1+2t)),\\y=s, &amp; 0\le s \le L, |t|\le 1.\\z=\frac{3/pi}{2}(1+2t)sin(\frac{3/pi}{2}(1+2t)),\end{array}\right.\end{equation}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.94em;vertical-align:-1.72em;"></span><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.22em;"><span style="top:-4.22em;"><span class="pstrut" style="height:4.22em;"></span><span class="mord"><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-2.5em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.492em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.016em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.016em" style="width:0.8889em" viewbox="0 0 888.89 16" preserveaspectratio="xMinYMin"><path d="M384 0 H504 V16 H384z M384 0 H504 V16 H384z"/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.016em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.016em" style="width:0.8889em" viewbox="0 0 888.89 16" preserveaspectratio="xMinYMin"><path d="M384 0 H504 V16 H384z M384 0 H504 V16 H384z"/></svg></span></span><span style="top:-4.3em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.22em;"><span style="top:-4.22em;"><span class="pstrut" style="height:3.01em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3/</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mord mathnormal">cos</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3/</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span><span class="mord mathnormal">t</span><span class="mclose">))</span><span class="mpunct">,</span></span></span><span style="top:-3.02em;"><span class="pstrut" style="height:3.01em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">s</span><span class="mpunct">,</span></span></span><span style="top:-1.65em;"><span class="pstrut" style="height:3.01em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3/</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3/</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span><span class="mord mathnormal">t</span><span class="mclose">))</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.72em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">L</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord mathnormal">t</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1.</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.72em;"><span></span></span></span></span></span></span></span><span class="tag"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.22em;"><span style="top:-4.22em;"><span class="pstrut" style="height:4.22em;"></span><span class="eqn-num"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.72em;"><span></span></span></span></span></span></span></span></span></p><h4 id="分段函数">分段函数</h4><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>y</mi><mo>=</mo><mtable rowspacing="0.16em" columnspacing="1em"><mtr><mtd class="mtr-glue"></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo fence="true">{</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>≤</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>&gt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mstyle></mtd><mtd class="mtr-glue"></mtd><mtd class="mml-eqn-num"></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">y=    \begin{equation}\left\{    \begin{array}{c}        x-1,&amp; x \le 0\\            x+1, &amp; x&gt;0            \end{array}    \right.    \end{equation}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.45em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">,</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span><span class="tag"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.45em;"><span class="pstrut" style="height:3.45em;"></span><span class="eqn-num"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>F</mi><mrow><mi>n</mi><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><mtable rowspacing="0.16em" columnspacing="1em"><mtr><mtd class="mtr-glue"></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo fence="true">{</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>P</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>∗</mo><msub><mi>F</mi><mrow><mi>n</mi><mn>1</mn></mrow></msub><mtext> </mtext><mi>o</mi><mi>r</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>R</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>∗</mo><msub><mi>F</mi><mrow><mi>n</mi><mn>2</mn></mrow></msub><mtext> </mtext><mi>o</mi><mi>r</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>S</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>∗</mo><msub><mi>F</mi><mrow><mi>n</mi><mn>2</mn></mrow></msub></mrow></mstyle></mtd></mtr></mtable></mrow></mstyle></mtd><mtd class="mtr-glue"></mtd><mtd class="mml-eqn-num"></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">F_{nij}=\begin{equation}\left\{\begin{array}{c}P_{ij}*F_{n1} \ or\\R_{ij}*F_{n2} \ or\\S_{ij}*F_{n2}\end{array}\right.\end{equation}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">nij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:4.05em;"></span><span class="mord"><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-2.5em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.492em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.016em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.016em" style="width:0.8889em" viewbox="0 0 888.89 16" preserveaspectratio="xMinYMin"><path d="M384 0 H504 V16 H384z M384 0 H504 V16 H384z"/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.016em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.016em" style="width:0.8889em" viewbox="0 0 888.89 16" preserveaspectratio="xMinYMin"><path d="M384 0 H504 V16 H384z M384 0 H504 V16 H384z"/></svg></span></span><span style="top:-4.3em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="tag"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:4.05em;"></span><span class="eqn-num"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">记录一些常用的数学公式</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>【数据分析实践】森林覆盖类型预测</title>
    <link href="http://example.com/2023/07/13/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%A3%AE%E6%9E%97%E8%A6%86%E7%9B%96%E7%B1%BB%E5%9E%8B%E9%A2%84%E6%B5%8B/"/>
    <id>http://example.com/2023/07/13/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%A3%AE%E6%9E%97%E8%A6%86%E7%9B%96%E7%B1%BB%E5%9E%8B%E9%A2%84%E6%B5%8B/</id>
    <published>2023-07-13T00:56:04.243Z</published>
    <updated>2023-07-13T00:57:10.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kaggle-竞赛-Forest-Cover-Type-Prediction-森林覆盖类型预测">Kaggle 竞赛 Forest Cover Type Prediction 森林覆盖类型预测</h2><p><img src="https://raw.githubusercontent.com/Chen-XiaoLv/ML-in-Geochemistry/master/READEME/image-20230701114337359.png" alt="image-20230701114337359"></p><hr><h3 id="Description">Description</h3><p>在这个比赛中，你被要求从严格的地图变量（相对于遥感数据）中预测森林覆盖类型（主要的树木覆盖种类）。一个给定的30×30米单元的实际森林覆盖类型是由美国森林服务局（USFS）第二区域资源信息系统数据确定的。然后从美国地质调查局和美国林业局获得的数据中得出独立变量。数据为原始形式（未按比例），包含定性自变量的二进制列数据，如荒野地区和土壤类型。</p><p>本研究区包括位于科罗拉多州北部罗斯福国家森林的四个荒野地区。这些地区代表了人为干扰最小的森林，因此，现有的森林覆盖类型更多的是生态过程的结果，而不是森林管理实践。</p><h3 id="Requirement">Requirement</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">numpy==1.23.3</span><br><span class="line">pandas==1.4.4</span><br><span class="line">pyecharts=2.0.1</span><br><span class="line">sklearn==1.1.3</span><br><span class="line">seaborn==0.11.2</span><br><span class="line">torch==1.12.0+cu116</span><br><span class="line">xgboost==1.7.1</span><br><span class="line">lightgbm==3.3.3</span><br></pre></td></tr></table></figure><hr><p>项目的流程图如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    id1(问题建模)--&gt;id2(数据探索)</span><br><span class="line">    id2--&gt;id3(特征工程)</span><br><span class="line">    id3--&gt;id4(模型训练)</span><br><span class="line">    id4--&gt;id5(模型融合)</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>我们将从这五个部分介绍本赛题。</p><hr><h2 id="一-赛题理解">一 赛题理解</h2><h3 id="1-背景">1 背景</h3><p>本次竞赛使用了美国森林服务局(US Forest Service)提供的30x30m分辨率的森林覆盖类型区域，包括一个训练集和一个测试集。要求采用训练集的数据对测试集的森林覆盖类型进行预测。</p><h3 id="2-数据">2 数据</h3><p>该数据集一共有十三个属性，包括高程、坡度、坡向、到水文地物的垂直距离、水平距离、到道路的水平距离等，主要包括整形的定量数据和one-hot编码过的定名数据</p><h3 id="3-评价指标">3 评价指标</h3><p>赛题中并未给出，由于模型是一个多分类问题，我们选择采用多分类交叉熵和R2系数来进行评价。</p><p>交叉熵</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>L</mi><mi>o</mi><mi>s</mi><mi>s</mi><mo>=</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>c</mi><mo>−</mo><mn>1</mn></mrow></munderover><msub><mi>y</mi><mi>i</mi></msub><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>p</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Loss=-\sum^{c-1}_{i=0}y_i\log (p_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal">oss</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.0788em;vertical-align:-1.2777em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>R2系数</p><p>R2系数又称决定系数，反映因变量的全部变异能通过回归关系被自变量解释的比例</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>R</mi><mn>2</mn></msup><mo>=</mo><mn>1</mn><mo>−</mo><mfrac><mrow><mi>M</mi><mi>S</mi><mi>E</mi></mrow><mrow><mi>V</mi><mi>A</mi><mi>R</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">R^2=1-\frac{MSE}{VAR}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">MSE</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>S</mi><mi>E</mi></mrow><annotation encoding="application/x-tex">MSE</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">MSE</span></span></span></span>表示均方误差，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">VAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>表示方差，值得注意的是，均方误差代表与真实值的偏差，而方差则是与平均值的偏差。</p><p>本项目的主要流程如下：</p><p><img src="https://raw.githubusercontent.com/Chen-XiaoLv/ML-in-Geochemistry/7f3240dd46093a5db3cd81fb7026384e9a27b6ac/READEME/%E6%9C%AA%E5%91%BD%E5%90%8D%E7%BB%98%E5%9B%BE.drawio.svg" alt="未命名绘图.drawio"></p><hr><h2 id="二-数据探索性分析">二 数据探索性分析</h2><p>在本阶段，主要工作是对数据有一个简单的认识，以及对数据进行一定的预处理。</p><h3 id="1-前期准备与数据读取">1 前期准备与数据读取</h3><h4 id="1-1-模块导入">1.1 模块导入</h4><p>本次使用的模块如下：</p><p><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703000609508.png" alt="image-20230703000609508"></p><p>直接先导进去吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> power_transform</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> CurrentConfig</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler,MinMaxScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> torch </span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> alive_progress</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader,Dataset</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> KFold</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">import</span> xgboost <span class="keyword">as</span> xgb</span><br><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> plot_importance, plot_tree</span><br><span class="line"><span class="keyword">import</span> lightgbm <span class="keyword">as</span> lgb</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><h4 id="1-2-绘图模块">1.2 绘图模块</h4><p>由于需要不停地调用可视化模块接口，这里我搞了些函数方便调用，不装<code>pyecharts</code>的话也没关系，完全可以用<code>matplotlib</code>代替的，这里只是为了美观些🌟</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">DrawBox</span>(<span class="params">x,y_data</span>):</span><br><span class="line">    box_plot = Boxplot()</span><br><span class="line">    box_plot = (</span><br><span class="line">        box_plot.add_xaxis(xaxis_data=[i <span class="keyword">for</span> i <span class="keyword">in</span> x])</span><br><span class="line">            .add_yaxis(series_name=<span class="string">&quot;箱线图&quot;</span>, y_axis=box_plot.prepare_data(y_data))</span><br><span class="line">            .set_global_opts(</span><br><span class="line">            title_opts=opts.TitleOpts(</span><br><span class="line">                pos_left=<span class="string">&quot;left&quot;</span>, title=<span class="string">&quot;数值数据分布情况&quot;</span></span><br><span class="line">            ),</span><br><span class="line">            xaxis_opts=opts.AxisOpts(</span><br><span class="line">                type_=<span class="string">&quot;category&quot;</span>,</span><br><span class="line">                boundary_gap=<span class="literal">True</span>,</span><br><span class="line">                splitline_opts=opts.SplitLineOpts(is_show=<span class="literal">True</span>),  <span class="comment"># 分割线显示与否</span></span><br><span class="line">            ),</span><br><span class="line">            yaxis_opts=opts.AxisOpts(  <span class="comment"># y轴</span></span><br><span class="line">                type_=<span class="string">&quot;value&quot;</span>,</span><br><span class="line">                splitarea_opts=opts.SplitAreaOpts(</span><br><span class="line">                    is_show=<span class="literal">True</span>, areastyle_opts=opts.AreaStyleOpts(opacity=<span class="number">1</span>)  <span class="comment"># 横向分割</span></span><br><span class="line">                ),</span><br><span class="line">            ),</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> box_plot</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Draw</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,x,y,ylabel,title,xname,yname</span>):</span><br><span class="line">        self.x=x</span><br><span class="line">        self.y=y</span><br><span class="line">        self.ylabel=ylabel</span><br><span class="line">        self.title=title</span><br><span class="line">        self.xname=xname</span><br><span class="line">        self.yname=yname</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self,tool</span>):</span><br><span class="line">        tool.add_xaxis(self.x)</span><br><span class="line">        <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.y):</span><br><span class="line">            tool.add_yaxis(self.ylabel[i], j)</span><br><span class="line"></span><br><span class="line">        tool.set_series_opts(markpoint_opts=opts.MarkPointOpts(</span><br><span class="line">            data=[opts.MarkPointItem(type_=<span class="string">&quot;max&quot;</span>, name=<span class="string">&quot;最大值&quot;</span>),  <span class="comment">##设置最大值 标记</span></span><br><span class="line">                  opts.MarkPointItem(type_=<span class="string">&quot;min&quot;</span>, name=<span class="string">&quot;最小值&quot;</span>),  <span class="comment"># 设置最小值标记</span></span><br><span class="line">                  ], symbol=<span class="string">&#x27;diamond&#x27;</span>, symbol_size=<span class="number">45</span>), markline_opts=opts.MarkLineOpts(</span><br><span class="line">            data=[opts.MarkLineItem(type_=<span class="string">&quot;average&quot;</span>, name=<span class="string">&quot;平均值&quot;</span>)]</span><br><span class="line">        ))</span><br><span class="line">        tool.set_global_opts(title_opts=opts.TitleOpts(title=self.title)</span><br><span class="line">                             , toolbox_opts=opts.ToolboxOpts()</span><br><span class="line">                             )</span><br><span class="line">        <span class="keyword">return</span> tool</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DrawBar</span>(<span class="title class_ inherited__">Draw</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,x,y,ylabel,title,xname,yname</span>):</span><br><span class="line">        <span class="built_in">super</span>(DrawBar, self).__init__(x,y,ylabel,title,xname,yname)</span><br><span class="line">        tool=Bar()</span><br><span class="line">        self.d=self.draw(tool)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">render</span>(<span class="params">self,path</span>):</span><br><span class="line">        self.d.render(path)</span><br><span class="line"><span class="comment"># 折线图</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DrawLine</span>(<span class="title class_ inherited__">Draw</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,x,y,ylabel,title,xname,yname</span>):</span><br><span class="line">        <span class="built_in">super</span>(DrawLine, self).__init__(x,y,ylabel,title,xname,yname)</span><br><span class="line">        tool=Line()</span><br><span class="line">        self.d=self.draw(tool)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">render</span>(<span class="params">self,path</span>):</span><br><span class="line">        self.d.render(path)</span><br></pre></td></tr></table></figure><h3 id="2-数据分布情况">2 数据分布情况</h3><p>好了结束了前期准备后，我们就可以对数据进行探索啦！这里简单举个栗子，本项目主要学习的是方法啦。数据可以在这里下载：<a href="https://www.kaggle.com/competitions/forest-cover-type-prediction/code">这里</a></p><p>读取数据并进行初步的统计量探索</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">path=<span class="string">r&quot;YourWorkSpace&quot;</span></span><br><span class="line">train,test=pd.read_csv(path+<span class="string">r&quot;/train.csv&quot;</span>),pd.read_csv(path+<span class="string">r&quot;/test.csv&quot;</span>)</span><br><span class="line">ori=copy.deepcopy(train)</span><br><span class="line">label=train[<span class="string">&#x27;Cover_Type&#x27;</span>]</span><br></pre></td></tr></table></figure><p>查看数据表的话，用<code>df.head(n)</code>就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train.head()</span><br></pre></td></tr></table></figure><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703001232959.png" alt="image-20230703001232959" style="zoom:50%;"><p>接着是统计量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train.describe()</span><br></pre></td></tr></table></figure><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703001302406.png" alt="image-20230703001302406" style="zoom:50%;"><p>数据的维度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">train.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># (15120,56)</span></span><br></pre></td></tr></table></figure><p>这个数据从第十一维特征<code>Wilderness_Area1</code>开始就全是名义数据(定名数据)了，因而我们在分析其分布情况时，需要分开进行。</p><p>别忘了看看数据有没有缺失值!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> train.columns:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">any</span>(train[i].isnull()):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> test.columns:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">any</span>(test[i].isnull()):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>上面这种方式可以将带有缺失值的列获取出来，根据列特征的不同数据格式选择不同的方法进行处理。然后接下来要对样本标签的分布进行查看，如果样本分布不均衡，很可能会影响模型的训练结果。一般来说，针对分布不均衡情况，可以进行的操作有：</p><ul><li>降采样</li><li>上采样</li><li>生成式模型(自动编码机、受限玻尔兹曼机、对抗生成网络、扩散模型等)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d=train.groupby(<span class="string">&quot;Cover_Type&quot;</span>)[<span class="string">&quot;Id&quot;</span>].count()</span><br><span class="line"><span class="comment"># 通过上面的探索，我们发现实际上`Id`这一列是没有用的，那么就删除啦</span></span><br><span class="line">train_x,label=train.iloc[:,<span class="number">1</span>:-<span class="number">1</span>],train.iloc[:,-<span class="number">1</span>]</span><br><span class="line">train.drop([<span class="string">&#x27;Id&#x27;</span>,<span class="string">&#x27;Cover_Type&#x27;</span>],axis=<span class="number">1</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">test.drop(<span class="string">&#x27;Id&#x27;</span>,axis=<span class="number">1</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">DrawBar([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">8</span>)],[d.tolist()],[<span class="string">&quot;count&quot;</span>],<span class="string">&quot;标签均衡&quot;</span>,<span class="string">&quot;cover_type&quot;</span>,<span class="string">&quot;count&quot;</span>).d.render_notebook()</span><br></pre></td></tr></table></figure><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703002051796.png" alt="image-20230703002051796" style="zoom:50%;"><p>这个数据集已经做过采样了，所以我们不需要在样本分布上做文章。</p><h4 id="2-1-数值数据分布情况">2.1 数值数据分布情况</h4><p>本数据集中，数值型数据刚好是前十列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numeric_col=train.columns[:<span class="number">10</span>]</span><br><span class="line">categorical_col=train.columns[<span class="number">10</span>:]</span><br></pre></td></tr></table></figure><p>利用<code>seaborn</code>的<code>histplot(data,kde=True)</code>可以在绘制数据分箱直方图的同时，绘制密度分布图，帮助我们更好的分析数据的情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">16</span>,<span class="number">12</span>),dpi=<span class="number">200</span>)</span><br><span class="line"><span class="keyword">for</span> idx,col <span class="keyword">in</span> <span class="built_in">enumerate</span>(numeric_col):</span><br><span class="line">    plt.subplot(<span class="number">5</span>,<span class="number">2</span>,idx+<span class="number">1</span>)</span><br><span class="line">    sns.histplot(train[col],kde=<span class="literal">True</span>)</span><br><span class="line">    plt.xlabel(col)</span><br><span class="line">plt.tight_layout() <span class="comment"># 调整分布</span></span><br></pre></td></tr></table></figure><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703002544091.png" style="zoom:50%;"><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703002559197.png" alt="image-20230703002559197" style="zoom:50%;"><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703002613434.png" alt="image-20230703002613434" style="zoom:50%;"><p>可以发现每种数据的分布都不相同，理论上为了方便我们的计算工作，需要将其转化为正态分布。</p><p><strong>♨️ 数据相关性分析</strong></p><p>这部分主要探索数字数据之间的相关性，反映出数据分布之间的潜在联系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num=train[numeric_col]</span><br><span class="line">Standarder=StandardScaler()</span><br><span class="line">num_std=Standarder.fit_transform(num)</span><br><span class="line">num_std.mean(axis=<span class="number">0</span>),num_std.std(axis=<span class="number">0</span>)</span><br><span class="line">plt.figure(figsize=(<span class="number">14</span>,<span class="number">12</span>))</span><br><span class="line">sns.heatmap(num.corr(),annot=<span class="literal">True</span>,fmt=<span class="string">&quot;.2f&quot;</span>,cmap=<span class="string">&quot;coolwarm&quot;</span>)</span><br></pre></td></tr></table></figure><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703002757865.png" alt="image-20230703002757865" style="zoom:50%;"><p>可以看到的是，坡度与山体阴影呈负相关关系，像元到水文特征的垂直距离和水平距离之间具有较强的相关性。</p><h4 id="2-2-名义数据分布情况">2.2 名义数据分布情况</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">DrawCategoricalData</span>(<span class="params">x</span>):</span><br><span class="line">    d=ori.groupby([x,<span class="string">&quot;Cover_Type&quot;</span>])[<span class="string">&quot;Id&quot;</span>].count()</span><br><span class="line">    b=Bar()</span><br><span class="line">    b.add_xaxis([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">8</span>)])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        c=np.array([<span class="number">0</span>]*<span class="number">8</span>)</span><br><span class="line">        c[d[i].index]=d[i]</span><br><span class="line">        b.add_yaxis(</span><br><span class="line">            <span class="string">f&quot;Val <span class="subst">&#123;i&#125;</span>&quot;</span>,c[<span class="number">1</span>:].tolist(),stack=<span class="string">&quot;1&quot;</span></span><br><span class="line">        )</span><br><span class="line">    b.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;%s 数据分布情况&quot;</span>%x))</span><br><span class="line">    <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categorical_col=train.columns[<span class="number">10</span>:]</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">DrawCategoricalData(categorical_col[i]).render_notebook()</span><br></pre></td></tr></table></figure><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703003036357.png" style="zoom:50%;"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i+=<span class="number">1</span></span><br><span class="line">DrawCategoricalData(categorical_col[i]).render_notebook()</span><br></pre></td></tr></table></figure><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703003104247.png" style="zoom:50%;"><p>通过柱状堆叠图，我们可以发现，Wilderness_Area这个字段数据也是十分均衡，而且有些字段取1时，对结果取值有较大的影响，该数据的信息熵较大。</p><h4 id="3-数据清洗">3 数据清洗</h4><p>此阶段主要针对三类情况：</p><ul><li>缺失值</li><li>噪声</li><li>数据不一致问题</li></ul><p>我们在第二阶段已经探查过了，该数据不存在缺失值，数据不一致问题实际上也不存在，那么剩下的就是噪声数据的处理</p><p>下面这段代码是调用上面写的绘图函数的，用来绘制箱线图，可以直接跳过，这边做个简单展示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">0</span></span><br><span class="line">DrawBox([numeric_col[i]],[train[numeric_col[i]]]).render_notebook()</span><br></pre></td></tr></table></figure><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703003233783.png" alt="image-20230703003233783" style="zoom:50%;"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DrawBox(numeric_col[:<span class="number">3</span>],num_std[:<span class="number">3</span>]).render_notebook()</span><br></pre></td></tr></table></figure><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703003300042.png" style="zoom:50%;"><p>我们可以直接用<code>pandas</code>的绘图接口：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">16</span>,<span class="number">9</span>),dpi=<span class="number">300</span>)</span><br><span class="line">pd.DataFrame(num_std).boxplot()</span><br></pre></td></tr></table></figure><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703003358841.png" style="zoom:50%;"><p>可以看到，有很多类都有一些异常值。这些异常值是通过百分位数极差计算的：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mi>Q</mi><mi>R</mi><mo>=</mo><msub><mi>Q</mi><mn>3</mn></msub><mo>−</mo><msub><mi>Q</mi><mn>1</mn></msub><mspace linebreak="newline"></mspace><mi>I</mi><mi>Q</mi><msub><mi>R</mi><mi>b</mi></msub><mo>=</mo><msub><mi>Q</mi><mn>1</mn></msub><mo>−</mo><mn>1.5</mn><mo>∗</mo><mi>I</mi><mi>Q</mi><mi>R</mi><mspace linebreak="newline"></mspace><mi>I</mi><mi>Q</mi><msub><mi>R</mi><mi>u</mi></msub><mo>=</mo><mi>Q</mi><mn>3</mn><mo>+</mo><mn>1.5</mn><mo>∗</mo><mi>I</mi><mi>Q</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">IQR=Q_3-Q_1\\IQR_b=Q_1-1.5*IQR\\IQR_u=Q3+1.5*IQR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">QR</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">Q</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1.5</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">QR</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">Q</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1.5</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">QR</span></span></span></span></span></p><p>然后我们现在就想把这些异常点去掉，有一个比较简单的方式，就是利用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mi>α</mi></mrow><annotation encoding="application/x-tex">3\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>法则</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Outlier</span>(<span class="params">x</span>):</span><br><span class="line">    blidx=(x.mean()-<span class="number">3</span>*x.std()&gt;x)|(x.mean()+<span class="number">3</span>*x.std()&lt;x)</span><br><span class="line">    idx=np.arange(x.shape[<span class="number">0</span>])[blidx]</span><br><span class="line">    outlier=x.iloc[idx]</span><br><span class="line">    <span class="keyword">return</span> outlier</span><br><span class="line">c=num.apply(Outlier,axis=<span class="number">0</span>)</span><br><span class="line">c.count()</span><br></pre></td></tr></table></figure><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703003706613.png" alt="image-20230703003706613" style="zoom:50%;"><p>可以看到，总共有<code>1130</code>个数据属于异常值。</p><p>当然，是否删除离群点还需要考虑实际情况，譬如这个离群点是由什么原因造成的？是否是采集过程中造成的，还是数据本身的特性导致的？</p><p>如果是后者，其实不建议进行处理。适当的保留噪声会提高模型的泛化能力</p><p>至此，我们已经简单完成了EDA阶段的工作。</p><p>下一个阶段是特征工程(Feature Engineering)</p><hr><h2 id="三-特征工程">三 特征工程</h2><p>在机器学习中，特征工程阶段的好坏往往决定了最终结果的好坏，而深度学习实际上没有这种烦恼，我们将尝试传统机器学习树模型和深度学习模型，分析并比较不同模型的结果，当然，这里会选择一份做了特征工程的数据和一份不做特征工程的数据进行比对，但由于树模型和深度学习模型都带有不确定性，最终的评价不一定准确，考虑到服务器性能，也不做大数据统计了，仅仅做一些简单的工作</p><p>特征工程的主要任务包括数据预处理、特征变换、特征提取和特征选择，在之前的工作中，我们已经做过部分预处理了，包括：</p><ul><li>剔除异常值</li><li>删除不需要的列</li><li>分析数据的分布</li></ul><h3 id="1-特征变换">1 特征变换</h3><p>可以通过幂律变换<code>sklearn.preprogressing.power_transform</code>对数据进行转换，当然要求数据不能为非正数。本数据存在负数，因而我们的考量是：</p><ul><li>先做归一化去除负数影响</li><li>添加极小项避免零值影响</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据转为正态分布</span></span><br><span class="line">t_x_d,t_y_d=train_drop_outlier.iloc[:,<span class="number">1</span>:-<span class="number">1</span>],train_drop_outlier.iloc[:,-<span class="number">1</span>]</span><br><span class="line">col_td=t_x_d[numeric_col]</span><br><span class="line">mmS=MinMaxScaler()</span><br><span class="line">col_td=mmS.fit_transform(col_td)</span><br><span class="line">col_td+=<span class="number">1e-5</span></span><br><span class="line">c_d_p=power_transform(col_td,method=<span class="string">&#x27;box-cox&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分布</span></span><br><span class="line">t_x_d[numeric_col]=c_d_p</span><br><span class="line">t_x_d.head()</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>,<span class="number">12</span>),dpi=<span class="number">200</span>)</span><br><span class="line"><span class="keyword">for</span> idx,col <span class="keyword">in</span> <span class="built_in">enumerate</span>(numeric_col):</span><br><span class="line">    plt.subplot(<span class="number">5</span>,<span class="number">2</span>,idx+<span class="number">1</span>)</span><br><span class="line">    sns.histplot(t_x_d[col],kde=<span class="literal">True</span>)</span><br><span class="line">    plt.xlabel(col)</span><br><span class="line">plt.tight_layout()</span><br></pre></td></tr></table></figure><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703004217364.png" alt="image-20230703004217364" style="zoom:50%;"><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703004232612.png" alt="image-20230703004232612" style="zoom:50%;"><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703004242720.png" alt="image-20230703004242720" style="zoom:50%;"><p>可以看到，此时之前的长尾分布基本上都被转化为近似正态了。</p><p>当然，这组数据做不做正态影响不大，起码对于信息熵没有增益，那么我们就不做了，省的数据区间出错，那么现在就轮到<code>特征提取</code>或者说<code>特征构造</code>阶段了</p><h3 id="2-特征提取">2 特征提取</h3><p>主要构造的特征有：</p><ul><li>高程坡向比</li><li>高程坡度比</li><li>坡度坡向比</li><li>水文特征切比雪夫距离</li><li>水文特征闵可夫斯基距离(p=1,p=2)</li><li>高程水文欧氏距离比</li><li>高程公路欧氏距离比</li><li>坡度公路比</li><li>水文公路比</li><li>山体阴影几何平均值</li><li>山体阴影平均值</li><li>山体阴影标准差</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">distance</span>(<span class="params">x,y,p=<span class="number">2</span></span>):</span><br><span class="line">    <span class="keyword">return</span> (x**p+y**p)**(<span class="number">1</span>/p)</span><br><span class="line">x_t_o,l_o=train_drop_outlier.iloc[:,<span class="number">1</span>:-<span class="number">1</span>],train_drop_outlier.iloc[:,-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">x_t_o[<span class="string">&quot;v1&quot;</span>]=x_t_o[<span class="string">&quot;Elevation&quot;</span>]/x_t_o[<span class="string">&#x27;Aspect&#x27;</span>]</span><br><span class="line">x_t_o[<span class="string">&quot;v2&quot;</span>]=x_t_o[<span class="string">&quot;Elevation&quot;</span>]/x_t_o[<span class="string">&#x27;Slope&#x27;</span>]</span><br><span class="line">x_t_o[<span class="string">&quot;v3&quot;</span>]=x_t_o[<span class="string">&quot;Aspect&quot;</span>]/x_t_o[<span class="string">&#x27;Slope&#x27;</span>]</span><br><span class="line">x_t_o[<span class="string">&quot;v4&quot;</span>]=distance(x_t_o[<span class="string">&quot;Horizontal_Distance_To_Hydrology&quot;</span>],x_t_o[<span class="string">&#x27;Vertical_Distance_To_Hydrology&#x27;</span>])</span><br><span class="line">x_t_o[<span class="string">&#x27;v5&#x27;</span>]=distance(x_t_o[<span class="string">&quot;Horizontal_Distance_To_Hydrology&quot;</span>],x_t_o[<span class="string">&#x27;Vertical_Distance_To_Hydrology&#x27;</span>],<span class="number">1</span>)</span><br><span class="line">x_t_o[<span class="string">&#x27;v6&#x27;</span>]=x_t_o[<span class="string">&#x27;Elevation&#x27;</span>]/x_t_o[<span class="string">&#x27;v4&#x27;</span>]</span><br><span class="line">x_t_o[<span class="string">&#x27;v7&#x27;</span>]=x_t_o[<span class="string">&#x27;Elevation&#x27;</span>]/x_t_o[<span class="string">&#x27;Horizontal_Distance_To_Roadways&#x27;</span>]</span><br><span class="line">x_t_o[<span class="string">&#x27;v8&#x27;</span>]=(x_t_o[<span class="string">&#x27;Hillshade_9am&#x27;</span>]+x_t_o[<span class="string">&#x27;Hillshade_Noon&#x27;</span>]+x_t_o[<span class="string">&#x27;Hillshade_3pm&#x27;</span>]).mean()</span><br><span class="line">x_t_o[<span class="string">&#x27;v9&#x27;</span>]=(x_t_o[<span class="string">&#x27;Hillshade_9am&#x27;</span>]+x_t_o[<span class="string">&#x27;Hillshade_Noon&#x27;</span>]+x_t_o[<span class="string">&#x27;Hillshade_3pm&#x27;</span>]).std()</span><br><span class="line">x_t_o[<span class="string">&#x27;v10&#x27;</span>]=(x_t_o[<span class="string">&#x27;Hillshade_9am&#x27;</span>]**<span class="number">2</span>+x_t_o[<span class="string">&#x27;Hillshade_Noon&#x27;</span>]**<span class="number">2</span>+x_t_o[<span class="string">&#x27;Hillshade_3pm&#x27;</span>]**<span class="number">2</span>)**<span class="number">0.5</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>OK现在我们就有一些奇奇怪怪的特征了。</p><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703031337694.png" alt="image-20230703031337694" style="zoom:50%;"><p>啊实际上有些特征不能用，因为发生了除零错误。</p><h3 id="3-特征选择">3 特征选择</h3><p>特征选择的方式有很多，我们现在介绍一些降维的工具：</p><ul><li>通过流形学习的非线性降维方式<code>T-SNE</code>对数据进行降维，避免数据之间冗余度过高以及可能带来的维灾害(虽然特征工程就没构建几个特征)</li><li>PCA</li><li>LDA</li><li>LLE</li></ul><p>这边的话，由于特征较少，时间有限，就没有做降维了，简单给个栗子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line">pca=PCA(n_components=<span class="number">10</span>)</span><br><span class="line">x=standarder.fit_transform(x_t_o)</span><br><span class="line">x=pca.fit_transform(x)</span><br></pre></td></tr></table></figure><hr><h2 id="四-模型训练">四 模型训练</h2><h3 id="1-准备工作">1 准备工作</h3><h4 id="1-1-数据拆分">1.1 数据拆分</h4><p>拆分喽</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x_train,x_val,y_train,y_val=train_test_split(train,label,test_size=<span class="number">0.3</span>)</span><br><span class="line">x_train.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># (10584, 54)</span></span><br></pre></td></tr></table></figure><h4 id="1-2-标准化去除量纲影响">1.2 标准化去除量纲影响</h4><p>实际上我们之前做过一次，但是不碍事，再做一次体验一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x_train_scale=Standarder.fit_transform(x_train)</span><br><span class="line">x_val_scale=Standarder.fit_transform(x_val)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">accuracy</span>(<span class="params">y_pre,y</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(y_pre==y)/<span class="built_in">len</span>(y) <span class="comment"># 这东西用来计算预测准确度的</span></span><br></pre></td></tr></table></figure><h3 id="2-机器学习模型">2 机器学习模型</h3><h4 id="2-1-树模型">2.1 树模型</h4><p><strong>随机森林🌳</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rf=RandomForestClassifier(max_features=<span class="string">&#x27;auto&#x27;</span>,oob_score=<span class="literal">True</span>,random_state=<span class="number">2023</span>,n_jobs=-<span class="number">1</span>)</span><br><span class="line">rf.fit(x_train_scale,y_train)</span><br><span class="line">rf.score(x_val_scale,y_val)</span><br><span class="line"><span class="comment"># 0.857583774250441</span></span><br></pre></td></tr></table></figure><p><strong>XGboost🌲</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 算法参数</span></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="comment"># 通用参数</span></span><br><span class="line">    <span class="string">&#x27;booster&#x27;</span>: <span class="string">&#x27;gbtree&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;nthread&#x27;</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="comment"># &#x27;num_feature&#x27;: 5,  # Boosting过程中用到的特征维数，设置为特征个数，xgboost会自动设置，无需人为设置。</span></span><br><span class="line">    <span class="string">&#x27;seed&#x27;</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="comment"># 任务参数</span></span><br><span class="line">    <span class="string">&#x27;objective&#x27;</span>: <span class="string">&#x27;multi:softmax&#x27;</span>,  <span class="comment"># 多分类问题</span></span><br><span class="line">    <span class="string">&#x27;num_class&#x27;</span>: <span class="number">7</span>,  <span class="comment">#类别总数，与multi softmax并用 6</span></span><br><span class="line">    <span class="comment"># 提升参数</span></span><br><span class="line">    <span class="string">&#x27;gamma&#x27;</span>: <span class="number">0.1</span>,</span><br><span class="line">    <span class="string">&#x27;max_depth&#x27;</span>: <span class="number">11</span>,</span><br><span class="line">    <span class="string">&#x27;lambda&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;subsample&#x27;</span>: <span class="number">0.7</span>,</span><br><span class="line">    <span class="string">&#x27;colsample_bytree&#x27;</span>: <span class="number">0.7</span>,</span><br><span class="line">    <span class="string">&#x27;min_child_weight&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">&#x27;eta&#x27;</span>: <span class="number">0.1</span>,</span><br><span class="line">    <span class="comment"># &#x27;eval_metric&#x27;: &#x27;auc&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 注意多分类xgboost需要修改label映射</span></span><br><span class="line">y_train_xg=y_train-<span class="number">1</span></span><br><span class="line">y_val_xg=y_val-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">dtrain=xgb.DMatrix(data=x_train_scale,label=y_train_xg)</span><br><span class="line">dtest=xgb.DMatrix(data=x_val_scale,label=y_val_xg)</span><br><span class="line">watchlist=[(dtrain,<span class="string">&quot;train&quot;</span>),(dtest,<span class="string">&quot;valid_data&quot;</span>)]</span><br><span class="line">model=xgb.train(params,dtrain,num_boost_round=<span class="number">2023</span>,evals=watchlist,early_stopping_rounds=<span class="number">200</span>,verbose_eval=<span class="number">500</span>)</span><br><span class="line">accuracy(model.predict(dtest),y_val_xg)</span><br><span class="line"></span><br><span class="line"><span class="comment">#0.8507495590828924 </span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xgb.plot_importance(model,height=<span class="number">0.8</span>,title=<span class="string">&#x27;Influence Ranking&#x27;</span>, ylabel=<span class="string">&#x27;Feature&#x27;</span>,max_num_features=<span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>查看特征影响得分：</p><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703005437156.png" alt="image-20230703005437156" style="zoom:50%;"><p><strong>LightGBM🌴</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">params=&#123;<span class="string">&#x27;num_leaves&#x27;</span>:<span class="number">54</span>,<span class="string">&#x27;objective&#x27;</span>: <span class="string">&#x27;multi:softmax&#x27;</span>,<span class="string">&#x27;max_depth&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;learning_rate&#x27;</span>:<span class="number">0.01</span>,<span class="string">&#x27;boosting&#x27;</span>:<span class="string">&#x27;gbdt&#x27;</span>&#125;</span><br><span class="line">model=lgb.LGBMClassifier(**params,n_estimators=<span class="number">2000</span>,nthread=<span class="number">4</span>,n_jobs=-<span class="number">1</span>)</span><br><span class="line">model.fit(x_train_scale,y_train,verbose=<span class="number">200</span>)</span><br><span class="line">accuracy(model.predict(x_val_scale,num_iteration=model.best_iteration_),y_val)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0.8630952380952381</span></span><br></pre></td></tr></table></figure><h4 id="2-2-支持向量机">2.2 支持向量机</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line">param_grid=&#123;</span><br><span class="line">    <span class="string">&quot;gamma&quot;</span>:[<span class="number">0.05</span>*i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">13</span>)],</span><br><span class="line">    <span class="string">&quot;C&quot;</span>:[<span class="number">0.1</span>*i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>)]</span><br><span class="line">&#125;</span><br><span class="line">cl=svm.SVC(kernel=<span class="string">&#x27;poly&#x27;</span>,gamma=<span class="number">0.1</span>,decision_function_shape=<span class="string">&#x27;ovo&#x27;</span>,C=<span class="number">1.0</span>)</span><br><span class="line">search=GridSearchCV(cl,param_grid=param_grid,cv=<span class="number">5</span>,n_jobs=-<span class="number">1</span>, scoring=<span class="string">&quot;accuracy&quot;</span>)</span><br><span class="line">search.fit(x_train_scale,y_train)</span><br><span class="line">cl=search.best_estimator_</span><br><span class="line">z=cl.predict(x_val_scale)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0.8167989417989417</span></span><br></pre></td></tr></table></figure><h4 id="2-3-优化">2.3 优化</h4><p>讲到调优，机器学习的两大工作一个是特征工程，一个就是调参了，努力成为一名优秀的调参侠吧(笑)</p><p>我们通过<code>GridSearchCV</code>模块进行调参，以决策树和XGboost为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">param_grid=&#123;</span><br><span class="line">    <span class="string">&#x27;n_estimators&#x27;</span>:[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>,<span class="number">20</span>)],</span><br><span class="line">    <span class="string">&#x27;max_depth&#x27;</span>:[i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)],</span><br><span class="line">    <span class="string">&#x27;criterion&#x27;</span>:[<span class="string">&#x27;entropy&#x27;</span>,<span class="string">&#x27;gini&#x27;</span>],</span><br><span class="line">&#125;</span><br><span class="line">rf=RandomForestClassifier(max_features=<span class="string">&#x27;auto&#x27;</span>,oob_score=<span class="literal">True</span>,random_state=<span class="number">2023</span>,n_jobs=-<span class="number">1</span>)</span><br><span class="line">clf=GridSearchCV(estimator=rf,param_grid=param_grid,scoring=<span class="string">&#x27;accuracy&#x27;</span>,cv=<span class="number">5</span>,n_jobs=-<span class="number">1</span>)</span><br><span class="line">clf.fit(x_train_scale,y_train)</span><br><span class="line">lr=clf.best_estimator_</span><br><span class="line">lr.fit(x_train_scale,y_train)</span><br><span class="line">m1=lr.predict(x_val_scale)</span><br><span class="line">accuracy(m1,y_val)</span><br></pre></td></tr></table></figure><p>通过格网搜索与交叉验证，寻找模型的最优参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pipe = Pipeline(</span><br><span class="line">        steps=[ (<span class="string">&quot;classifier&quot;</span>, XGBClassifier())]</span><br><span class="line">    )</span><br><span class="line">param_grid = &#123;</span><br><span class="line">        <span class="string">&quot;classifier__n_estimators&quot;</span>: [<span class="number">50</span>,<span class="number">100</span>,<span class="number">150</span>,<span class="number">200</span>,<span class="number">300</span>], <span class="comment"># 多少棵树</span></span><br><span class="line">        <span class="string">&quot;classifier__eta&quot;</span>: [<span class="number">0.05</span>, <span class="number">0.1</span>, <span class="number">0</span>,<span class="number">2</span>, <span class="number">0.3</span>], <span class="comment"># 学习率</span></span><br><span class="line">        <span class="string">&quot;classifier__max_depth&quot;</span>: [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>], <span class="comment"># 树的最大深度</span></span><br><span class="line">        <span class="string">&quot;classifier__colsample_bytree&quot;</span>: [<span class="number">0.4</span>,<span class="number">0.6</span>,<span class="number">0.8</span>,<span class="number">1</span>], <span class="comment"># 选择多少列构建一个树</span></span><br><span class="line">        <span class="string">&quot;classifier__min_child_weight&quot;</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] <span class="comment"># 叶子节点最小样本数目</span></span><br><span class="line">    &#125;</span><br><span class="line">search = GridSearchCV(pipe, param_grid, n_jobs=-<span class="number">1</span>, scoring=<span class="string">&quot;roc_auc&quot;</span>, cv=<span class="number">5</span>)</span><br><span class="line">search.fit(x_train_scale,y_train_xg)</span><br><span class="line">search.best_params</span><br><span class="line">search.score(x_val_scale,y_val_xg)</span><br></pre></td></tr></table></figure><p>这个过程十分吃服务器性能，而且可能费时不太好，需要一定的心理准备。</p><p>最终的结果如下(具有一定的优化空间，我这边基本上没怎么做调参)</p><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703020017641.png" alt="image-20230703020017641" style="zoom:50%;"><h3 id="3-深度学习模型">3 深度学习模型</h3><h4 id="3-1-构建数据集">3.1 构建数据集</h4><p>首先我们要有一个数据集，或者一个可迭代的容器存放我们的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyDataSet</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,x,label</span>):</span><br><span class="line">        self.x,self.label=x,label</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        <span class="keyword">return</span> self.x[idx],self.label[idx]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.x)</span><br></pre></td></tr></table></figure><p>然后是将数据转化为<code>tensor</code>格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x_t_tensor=torch.from_numpy(x_train_scale).<span class="built_in">float</span>()</span><br><span class="line">y_t_tensor=torch.LongTensor(y_train_xg.to_numpy()).reshape(-<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">y_t_tensor=torch.zeros(y_t_tensor.shape[<span class="number">0</span>],<span class="number">7</span>).scatter_(<span class="number">1</span>, y_t_tensor, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">x_v_tensor=torch.from_numpy(x_val_scale).<span class="built_in">float</span>()</span><br><span class="line">y_v_tensor=torch.torch.LongTensor(y_val_xg.to_numpy()).reshape(-<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">y_v_tensor=torch.zeros(y_v_tensor.shape[<span class="number">0</span>],<span class="number">7</span>).scatter_(<span class="number">1</span>, y_v_tensor, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>再者是将这些放到数据容器中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">train_DataLoader=DataLoader(</span><br><span class="line">    dataset=MyDataSet(x_t_tensor,y_t_tensor),</span><br><span class="line">    batch_size=<span class="number">64</span>,</span><br><span class="line">    shuffle=<span class="literal">True</span>,</span><br><span class="line">    drop_last=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_DataLoader=DataLoader(</span><br><span class="line">    dataset=MyDataSet(x_v_tensor,y_v_tensor),</span><br><span class="line">    batch_size=<span class="number">64</span>,</span><br><span class="line">    shuffle=<span class="literal">True</span>,</span><br><span class="line">    drop_last=<span class="literal">True</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="3-2-模型选择">3.2 模型选择</h4><p>目前，我们已经获得了七个简单的网络。值得注意的是，在简单的一维数据中，多层感知机理论上可以拟合任意的函数，但如果加大层数，用一些高维数据的tricks，反而不太能得到好的结果。这是因为复杂的网络其容量也会增大，想要在函数域中找到最优函数变得更加复杂，可能陷入局部最优解</p><p>再有，一维卷积神经网络的性能实际上在小样本上会略低于全连接层，也不太适合做Attention</p><p>网络的性能除却跟网络结构本身有关系外，主要还是与数据挂钩。吴恩达在CS229中说过，模型只是去逼近数据潜在的上限，目前，我们拿出来做深度学习的数据仅仅做过几个简单的处理，实际上后续可以考虑将做过特征工程的数据进行训练</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,in_features=<span class="number">54</span>,n_hidden1=<span class="number">128</span>,n_hidden2=<span class="number">256</span>,out_features=<span class="number">7</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(Net, self).__init__()</span><br><span class="line">        self.flatten=nn.Flatten()</span><br><span class="line">        self.hidden1=nn.Sequential(</span><br><span class="line">            nn.Linear(in_features,n_hidden1,<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm1d(n_hidden1),</span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line">        self.hidden2=nn.Sequential(</span><br><span class="line">            nn.Linear(n_hidden1,n_hidden2),</span><br><span class="line">            nn.BatchNorm1d(n_hidden2),</span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line">        self.out=nn.Sequential(nn.Linear(n_hidden2,out_features))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x=self.flatten(x)</span><br><span class="line">        x=self.hidden2(self.hidden1(x))</span><br><span class="line">        <span class="keyword">return</span> F.softmax(self.out(x),dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicConv1d</span>(nn.Module):</span><br><span class="line">    <span class="comment"># 一个Conv+Bn+ReLU</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,in_channel,out_channel,kernel,stride,padding=<span class="number">0</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(BasicConv1d, self).__init__()</span><br><span class="line">        self.cbr=nn.Sequential(</span><br><span class="line">            nn.Conv1d(in_channels=in_channel,out_channels=out_channel,kernel_size=kernel,stride=stride,</span><br><span class="line">                      padding=padding),</span><br><span class="line">            nn.BatchNorm1d(out_channel,eps=<span class="number">0.001</span>,momentum=<span class="number">0.1</span>,affine=<span class="literal">True</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">False</span>)</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="keyword">return</span> self.cbr(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个简单的Inception模块</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mixed_5b</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Mixed_5b, self).__init__()</span><br><span class="line">        self.branch0=BasicConv1d(<span class="number">54</span>,<span class="number">96</span>,kernel=<span class="number">1</span>,stride=<span class="number">1</span>)</span><br><span class="line">        self.branch1=nn.Sequential(</span><br><span class="line">            BasicConv1d(<span class="number">54</span>,<span class="number">48</span>,kernel=<span class="number">1</span>,stride=<span class="number">1</span>),</span><br><span class="line">            BasicConv1d(<span class="number">48</span>,<span class="number">64</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">        )</span><br><span class="line">        self.branch2=nn.Sequential(</span><br><span class="line">            BasicConv1d(<span class="number">54</span>,<span class="number">64</span>,kernel=<span class="number">1</span>,stride=<span class="number">1</span>),</span><br><span class="line">            BasicConv1d(<span class="number">64</span>,<span class="number">96</span>,kernel=<span class="number">3</span>,stride=<span class="number">1</span>,padding=<span class="number">1</span>),</span><br><span class="line">            BasicConv1d(<span class="number">96</span>,<span class="number">96</span>,kernel=<span class="number">3</span>,stride=<span class="number">1</span>,padding=<span class="number">1</span>)</span><br><span class="line">        )</span><br><span class="line">        self.branch3=nn.Sequential(</span><br><span class="line">            BasicConv1d(<span class="number">54</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.linear=nn.Sequential(</span><br><span class="line">            nn.BatchNorm1d(<span class="number">320</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Dropout(<span class="number">0.5</span>),</span><br><span class="line">            nn.Linear(<span class="number">320</span>,<span class="number">256</span>),</span><br><span class="line">            nn.BatchNorm1d(<span class="number">256</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">256</span>,<span class="number">7</span>),</span><br><span class="line">            nn.Softmax(dim=<span class="number">1</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>),x.size(<span class="number">1</span>),<span class="number">1</span>)</span><br><span class="line">        x0=self.branch0(x)</span><br><span class="line">        x1=self.branch1(x)</span><br><span class="line">        x2=self.branch2(x)</span><br><span class="line">        x3=self.branch3(x)</span><br><span class="line">        out=torch.cat((x0,x1,x2,x3),<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> self.linear(out)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Block35</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,scale=<span class="number">1.0</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(Block35,self).__init__()</span><br><span class="line">        self.scale=scale</span><br><span class="line">        self.branch0=BasicConv1d(<span class="number">54</span>,<span class="number">32</span>,kernel=<span class="number">1</span>,stride=<span class="number">1</span>)</span><br><span class="line">        self.branch1=nn.Sequential(</span><br><span class="line">            BasicConv1d(<span class="number">54</span>,<span class="number">32</span>,<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">            BasicConv1d(<span class="number">32</span>,<span class="number">32</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        )</span><br><span class="line">        self.branch2=nn.Sequential(</span><br><span class="line">            BasicConv1d(<span class="number">54</span>,<span class="number">32</span>,<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">            BasicConv1d(<span class="number">32</span>,<span class="number">48</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">            BasicConv1d(<span class="number">48</span>,<span class="number">64</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        )</span><br><span class="line">        self.conv1d=nn.Conv1d(<span class="number">128</span>,<span class="number">54</span>,kernel_size=<span class="number">1</span>,stride=<span class="number">1</span>)</span><br><span class="line">        self.relu=nn.ReLU(inplace=<span class="literal">False</span>)</span><br><span class="line">        self.Linear=nn.Sequential(</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(<span class="number">54</span>,<span class="number">256</span>,<span class="number">1</span>),</span><br><span class="line">            nn.BatchNorm1d(<span class="number">256</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">256</span>,<span class="number">7</span>,<span class="number">1</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>),x.size(<span class="number">1</span>),<span class="number">1</span>)</span><br><span class="line">        x0,x1,x2=self.branch0(x),self.branch1(x),self.branch2(x)</span><br><span class="line">        out=torch.cat((x0,x1,x2),<span class="number">1</span>)</span><br><span class="line">        out=self.conv1d(out)</span><br><span class="line">        out=out*self.scale+x</span><br><span class="line">        out=self.relu(out)</span><br><span class="line">        <span class="keyword">return</span> F.softmax(self.Linear(out),dim=<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net2</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Net2, self).__init__()</span><br><span class="line">        self.conv1=nn.Conv1d(<span class="number">54</span>,<span class="number">128</span>,<span class="number">1</span>)</span><br><span class="line">        self.conv2=nn.Conv1d(<span class="number">54</span>,<span class="number">128</span>,<span class="number">1</span>)</span><br><span class="line">        self.conv3=nn.Conv1d(<span class="number">54</span>,<span class="number">128</span>,<span class="number">1</span>)</span><br><span class="line">        self.re=nn.ReLU()</span><br><span class="line">        self.bn1=nn.BatchNorm1d(<span class="number">128</span>)</span><br><span class="line">        </span><br><span class="line">        self.Conv=nn.Sequential(</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Conv1d(<span class="number">128</span>, <span class="number">164</span>,<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">            nn.BatchNorm1d(<span class="number">164</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Conv1d(<span class="number">164</span>, <span class="number">128</span>,<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">            nn.Dropout(<span class="number">0.5</span>),</span><br><span class="line">            nn.BatchNorm1d(<span class="number">128</span>),</span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line">        self.fl=nn.Flatten()</span><br><span class="line">        self.Linear=nn.Sequential(</span><br><span class="line"></span><br><span class="line">            nn.Linear(<span class="number">128</span>, <span class="number">256</span>),</span><br><span class="line">            nn.Dropout(<span class="number">0.5</span>),</span><br><span class="line">            nn.BatchNorm1d(<span class="number">256</span>),</span><br><span class="line">            nn.LeakyReLU(),</span><br><span class="line">            nn.Linear(<span class="number">256</span>, <span class="number">128</span>),</span><br><span class="line">            nn.BatchNorm1d(<span class="number">128</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">128</span>, <span class="number">7</span>),</span><br><span class="line">            nn.Softmax(dim=<span class="number">1</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>),x.size(<span class="number">1</span>),<span class="number">1</span>)</span><br><span class="line">        x1=self.conv1(x)</span><br><span class="line">        x3=self.conv3(x)</span><br><span class="line">        x2=self.conv2(x)</span><br><span class="line">        x=self.re(self.bn1(x1+x2+x3))</span><br><span class="line">        x=self.Conv(x)</span><br><span class="line">        x=self.fl(x)</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> self.Linear(x)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net3</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,in_features=<span class="number">54</span>,n_hidden1=<span class="number">128</span>,n_hidden2=<span class="number">256</span>,n_hidden3=<span class="number">512</span>,out_features=<span class="number">7</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(Net3, self).__init__()</span><br><span class="line">        self.flatten=nn.Flatten()</span><br><span class="line">        self.hidden1=nn.Sequential(</span><br><span class="line">            nn.Linear(in_features,n_hidden1,<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm1d(n_hidden1),</span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line">        self.hidden2=nn.Sequential(</span><br><span class="line">            nn.Linear(n_hidden1,n_hidden2),</span><br><span class="line">            nn.BatchNorm1d(n_hidden2),</span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line">        self.hidden3=nn.Sequential(</span><br><span class="line">            nn.Linear(n_hidden2,n_hidden3),</span><br><span class="line">            nn.BatchNorm1d(n_hidden3),</span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line">        self.out=nn.Sequential(nn.Linear(n_hidden3,out_features))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x=self.flatten(x)</span><br><span class="line">        x=self.hidden2(self.hidden1(x))</span><br><span class="line">        x=self.hidden3(x)</span><br><span class="line">        <span class="keyword">return</span> F.softmax(self.out(x),dim=<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net4</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,in_features=<span class="number">54</span>,n_hidden1=<span class="number">128</span>,n_hidden2=<span class="number">256</span>,n_hidden3=<span class="number">512</span>,out_features=<span class="number">7</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(Net4, self).__init__()</span><br><span class="line">        self.flatten=nn.Flatten()</span><br><span class="line">        self.hidden1=nn.Sequential(</span><br><span class="line">            nn.Linear(in_features,n_hidden1,<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm1d(n_hidden1),</span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line">        self.hidden2=nn.Sequential(</span><br><span class="line">            nn.Linear(in_features,n_hidden2),</span><br><span class="line">            nn.BatchNorm1d(n_hidden2),</span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line">        self.hidden3=nn.Sequential(</span><br><span class="line">            nn.Linear(n_hidden1+n_hidden2,n_hidden3),</span><br><span class="line">            nn.BatchNorm1d(n_hidden3),</span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line">        self.out=nn.Sequential(nn.Linear(n_hidden3,out_features))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x=self.flatten(x)</span><br><span class="line">        x1=self.hidden1(x)</span><br><span class="line">        x2=self.hidden2(x)</span><br><span class="line">        x=self.hidden3(torch.concat([x1,x2],dim=<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> F.softmax(self.out(x),dim=<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net5</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,in_features=<span class="number">54</span>,n_hidden1=<span class="number">54</span>,n_hidden2=<span class="number">256</span>,n_hidden3=<span class="number">512</span>,out_features=<span class="number">7</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(Net5, self).__init__()</span><br><span class="line">        self.flatten=nn.Flatten()</span><br><span class="line">        self.hidden1=nn.Sequential(</span><br><span class="line">            nn.Linear(in_features,n_hidden1,<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm1d(n_hidden1),</span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line">        self.hidden2=nn.Sequential(</span><br><span class="line">            nn.Linear(in_features,n_hidden2),</span><br><span class="line">            nn.BatchNorm1d(n_hidden2),</span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line">        self.hidden3=nn.Sequential(</span><br><span class="line">            nn.Linear(n_hidden2,n_hidden2),</span><br><span class="line">            nn.BatchNorm1d(n_hidden2),</span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line">        self.hidden4=nn.Sequential(</span><br><span class="line">            nn.Linear(n_hidden2,n_hidden3),</span><br><span class="line">            nn.BatchNorm1d(n_hidden3),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line"></span><br><span class="line">        )</span><br><span class="line">        self.out=nn.Sequential(nn.Linear(n_hidden3,out_features))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x=self.flatten(x)</span><br><span class="line">        x1=self.hidden1(x)</span><br><span class="line">        x2=self.hidden2(x+x1)</span><br><span class="line">        x3=self.hidden3(x2)</span><br><span class="line">        o=self.hidden4(x3+x2)</span><br><span class="line">        <span class="keyword">return</span> F.softmax(self.out(o),dim=<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net6</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,in_features=<span class="number">54</span>,n_hidden1=<span class="number">54</span>,n_hidden2=<span class="number">512</span>,n_hidden3=<span class="number">1024</span>,out_features=<span class="number">7</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(Net6, self).__init__()</span><br><span class="line">        self.flatten=nn.Flatten()</span><br><span class="line">        self.hidden1=nn.Sequential(</span><br><span class="line">            nn.Linear(in_features,n_hidden1,<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm1d(n_hidden1),</span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line">        self.hidden2=nn.Sequential(</span><br><span class="line">            nn.Linear(in_features,n_hidden1),</span><br><span class="line">            nn.Dropout(<span class="number">0.5</span>),</span><br><span class="line">            nn.BatchNorm1d(n_hidden1),</span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line">        self.hidden3=nn.Sequential(</span><br><span class="line">            nn.Linear(in_features,n_hidden2),</span><br><span class="line">            nn.BatchNorm1d(n_hidden2),</span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line">        self.hidden5=nn.Sequential(</span><br><span class="line">            nn.Linear(n_hidden2,n_hidden3),</span><br><span class="line">            nn.BatchNorm1d(n_hidden3),</span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line">        self.out=nn.Sequential(nn.Linear(n_hidden3,out_features))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x=self.flatten(x)</span><br><span class="line">        x1=self.hidden1(x)</span><br><span class="line">        x2=self.hidden2(x)</span><br><span class="line">        x3=self.hidden3(x2+x1+x)</span><br><span class="line"></span><br><span class="line">        o=self.hidden5(x3)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> F.softmax(self.out(o),dim=<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-3-训练阶段">3.3 训练阶段</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">Net_train_loss=[]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">model,seed,epoch=<span class="number">200</span></span>):</span><br><span class="line">    <span class="keyword">global</span> Net_train_loss</span><br><span class="line">    <span class="comment"># 这边统一用交叉熵和自适应距估计优化器</span></span><br><span class="line">    path=<span class="string">r&quot;YourPath\%s.pth&quot;</span>%seed</span><br><span class="line">    criterion=nn.CrossEntropyLoss()</span><br><span class="line">    optimizer=torch.optim.Adam(model.parameters(),lr=<span class="number">1e-4</span>,betas=(<span class="number">0.9</span>,<span class="number">0.99</span>),</span><br><span class="line">                               eps=<span class="number">1e-08</span>,weight_decay=<span class="number">0</span>)</span><br><span class="line">    device=<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span></span><br><span class="line">    model.to(device)</span><br><span class="line">    criterion.to(device)</span><br><span class="line">    Loss=[]</span><br><span class="line">    Acc=[]</span><br><span class="line">    ELoss=[]</span><br><span class="line">    EAcc=[]</span><br><span class="line">    BEST_ACC=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(epoch):</span><br><span class="line">        train_loss = <span class="number">0</span></span><br><span class="line">        train_acc=<span class="number">0</span></span><br><span class="line">        model.train()</span><br><span class="line">        <span class="keyword">with</span> alive_progress.alive_bar(<span class="built_in">len</span>(train_DataLoader),force_tty=<span class="literal">True</span>) <span class="keyword">as</span> bar:</span><br><span class="line">            <span class="keyword">for</span> idx,(x,y) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_DataLoader):</span><br><span class="line">                x,y=x.to(device),y.to(device)</span><br><span class="line">                y_pre=model(x)</span><br><span class="line"></span><br><span class="line">                optimizer.zero_grad()</span><br><span class="line">                loss=criterion(y,y_pre)</span><br><span class="line">                loss.backward()</span><br><span class="line">                optimizer.step()</span><br><span class="line"></span><br><span class="line">                train_loss+=loss.item()</span><br><span class="line">                _,pre=y_pre.<span class="built_in">max</span>(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">                num_correct=(pre.to(<span class="string">&quot;cpu&quot;</span>)==np.argmax(y.to(<span class="string">&quot;cpu&quot;</span>),axis=<span class="number">1</span>)).<span class="built_in">sum</span>().item()</span><br><span class="line">                acc=num_correct/x.shape[<span class="number">0</span>]</span><br><span class="line">                train_acc+=acc</span><br><span class="line">                bar()</span><br><span class="line">        <span class="keyword">if</span> (k:=train_acc/<span class="built_in">len</span>(train_DataLoader))&gt;BEST_ACC:</span><br><span class="line">            BEST_ACC=k</span><br><span class="line">            </span><br><span class="line">            state = &#123;</span><br><span class="line">                <span class="string">&#x27;epoch&#x27;</span>: e,</span><br><span class="line">                <span class="string">&#x27;best_acc&#x27;</span>: k,</span><br><span class="line">                <span class="string">&#x27;model_state_dict&#x27;</span>: model.state_dict(),</span><br><span class="line">                <span class="string">&#x27;optimizer_state_dict&#x27;</span>: optimizer.state_dict(),</span><br><span class="line">            &#125;</span><br><span class="line">            torch.save(state, path)</span><br><span class="line">        Loss.append(train_loss/<span class="built_in">len</span>(train_DataLoader))</span><br><span class="line">        Acc.append(train_acc/<span class="built_in">len</span>(train_DataLoader))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;epoch : <span class="subst">&#123;e+<span class="number">1</span>&#125;</span> / <span class="subst">&#123;epoch&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Train Loss : <span class="subst">&#123;train_loss/<span class="built_in">len</span>(train_DataLoader)&#125;</span>, Train Acc : <span class="subst">&#123;train_acc/<span class="built_in">len</span>(train_DataLoader)&#125;</span>&quot;</span>)</span><br><span class="line">    Net_train_loss.append(Acc)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">net1=Net()</span><br><span class="line">train(net1,<span class="string">&quot;Net1&quot;</span>)</span><br><span class="line"></span><br><span class="line">net2=Mixed_5b()</span><br><span class="line">train(net2,<span class="string">&quot;Net2&quot;</span>)</span><br><span class="line"></span><br><span class="line">net3=Net3()</span><br><span class="line">train(net3,<span class="string">&quot;Net3&quot;</span>)</span><br><span class="line"></span><br><span class="line">net4=Block35()</span><br><span class="line">train(net4,<span class="string">&quot;Net4&quot;</span>)</span><br><span class="line"></span><br><span class="line">net5=Net4()</span><br><span class="line">train(net5,<span class="string">&quot;Net5&quot;</span>)</span><br><span class="line"></span><br><span class="line">net6=Net5()</span><br><span class="line">train(net6,<span class="string">&quot;Net6&quot;</span>)</span><br><span class="line"></span><br><span class="line">net7=Net6()</span><br><span class="line">train(net7,<span class="string">&quot;Net7&quot;</span>)</span><br></pre></td></tr></table></figure><p>训练结束后，我们就可以载入模型的参数和结果啦。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载最优参数</span></span><br><span class="line">Nets=[net1,net2,net3,net4,net5,net6,net7]</span><br><span class="line">BestAcc=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">8</span>):</span><br><span class="line">    checkpoint=torch.load(<span class="string">r&quot;YourPath\Net%s.pth&quot;</span>%i)</span><br><span class="line">    Nets[i-<span class="number">1</span>].load_state_dict(checkpoint[<span class="string">&quot;model_state_dict&quot;</span>])</span><br><span class="line">    BestAcc.append(checkpoint[<span class="string">&quot;best_acc&quot;</span>])</span><br></pre></td></tr></table></figure><p>我们用训练好的模型去计算在验证集上的结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pre=[]</span><br><span class="line">eval_acc=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Nets:</span><br><span class="line">    i.<span class="built_in">eval</span>()</span><br><span class="line">    i.to(<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">    net_pre=i(x_v_tensor)</span><br><span class="line">    eval_acc.append(accuracy(torch.<span class="built_in">max</span>(net_pre,<span class="number">1</span>)[<span class="number">1</span>],y_v_tensor.argmax(<span class="number">1</span>)).item())</span><br><span class="line">    <span class="keyword">if</span> pre==[]:</span><br><span class="line">        pre=net_pre</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pre+=net_pre</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看验证集和训练集精度变化情况</span></span><br><span class="line">b=Bar()</span><br><span class="line">b.add_xaxis([<span class="string">&quot;Net%i&quot;</span>%i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">8</span>)])</span><br><span class="line">b.add_yaxis(<span class="string">&quot;Train Acc&quot;</span>,[<span class="built_in">round</span>(i,<span class="number">3</span>) <span class="keyword">for</span> i <span class="keyword">in</span> BestAcc])</span><br><span class="line">b.add_yaxis(<span class="string">&quot;Val Acc&quot;</span>,[<span class="built_in">round</span>(i,<span class="number">3</span>) <span class="keyword">for</span> i <span class="keyword">in</span> eval_acc])</span><br><span class="line">b.set_series_opts(markpoint_opts=opts.MarkPointOpts(</span><br><span class="line">        data=[opts.MarkPointItem(type_=<span class="string">&quot;max&quot;</span>, name=<span class="string">&quot;最大值&quot;</span>),  <span class="comment">##设置最大值 标记</span></span><br><span class="line">              opts.MarkPointItem(type_=<span class="string">&quot;min&quot;</span>, name=<span class="string">&quot;最小值&quot;</span>),  <span class="comment"># 设置最小值标记</span></span><br><span class="line">              ], symbol=<span class="string">&#x27;pin&#x27;</span>, symbol_size=<span class="number">60</span>), markline_opts=opts.MarkLineOpts(</span><br><span class="line">        data=[opts.MarkLineItem(type_=<span class="string">&quot;average&quot;</span>, name=<span class="string">&quot;平均值&quot;</span>)]</span><br><span class="line">    ))</span><br><span class="line">b.render_notebook()</span><br></pre></td></tr></table></figure><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703010331579.png" alt="image-20230703010331579" style="zoom:50%;"><p>可以看到，在验证集上，模型的性能有所下降，这是由于原本的模型对于训练集发生了过拟合现象。Net1实际上是最简单的二层全连接层，尽管它的训练速度最快，参数最少，在训练集上表现良好，但其泛化能力远不如其他模型。而Net2则对验证集的表现良好。</p><p>总体来说，模型在验证集上的平均精度略微下降。</p><h2 id="五-模型融合">五 模型融合</h2><p>模型融合通过提升特征多样性、样本多样性和模态多样性，可以进一步增加模型的泛化能力和鲁棒性。</p><p>根据方法的不同，可以分为过程融合和结果融合。</p><p><strong>过程融合🍉</strong></p><p>过程融合最基本的有Bagging和Boosting，Bagging就是多个弱分类器堆叠在一起，Boosting就是基于弱分类器分错的结果输入后一个分类器中，从而实现弱模型媲美强模型的过程。</p><p><strong>结果融合🍌</strong></p><p>主要有以下几种方法</p><ul><li>加权法</li><li>stacking</li><li>Blending</li></ul><p>我们这边使用结果融合，通过尝试直接叠加法、软投票法和Stacking方式，分析并给出一个相对较好的结果</p><h3 id="1-线性融合">1 线性融合</h3><h4 id="1-1-投票法">1.1 投票法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z_1=accuracy(torch.<span class="built_in">max</span>(pre,<span class="number">1</span>)[<span class="number">1</span>],y_v_tensor.argmax(<span class="number">1</span>)).item() <span class="comment"># 直接投票</span></span><br></pre></td></tr></table></figure><h4 id="2-2-加权投票">2.2 加权投票</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 结果加权投票</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vote</span>(<span class="params">weight</span>):</span><br><span class="line">    pre_1=[]</span><br><span class="line">    <span class="keyword">for</span> _,i <span class="keyword">in</span> <span class="built_in">enumerate</span>(Nets):</span><br><span class="line">        i.<span class="built_in">eval</span>()</span><br><span class="line">        i.to(<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">        net_pre=i(x_v_tensor)*weight[_]</span><br><span class="line">        <span class="keyword">if</span> pre_1==[]:</span><br><span class="line">            pre_1=net_pre</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pre_1+=net_pre</span><br><span class="line">    <span class="keyword">return</span> pre_1</span><br><span class="line"></span><br><span class="line">z_2=accuracy(torch.<span class="built_in">max</span>(vote(eval_acc),<span class="number">1</span>)[<span class="number">1</span>],y_v_tensor.argmax(<span class="number">1</span>)).item()</span><br></pre></td></tr></table></figure><h4 id="2-3-软投票">2.3 软投票</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于Softmax投票</span></span><br><span class="line">k=<span class="built_in">sum</span>([np.exp(i) <span class="keyword">for</span> i <span class="keyword">in</span> eval_acc])</span><br><span class="line">sm=[np.exp(i)/k <span class="keyword">for</span> i <span class="keyword">in</span> eval_acc]</span><br><span class="line">z_3=accuracy(torch.<span class="built_in">max</span>(vote(sm),<span class="number">1</span>)[<span class="number">1</span>],y_v_tensor.argmax(<span class="number">1</span>)).item()</span><br></pre></td></tr></table></figure><h3 id="2-Stacking">2 Stacking</h3><p>将多个分类器的概率结果作为一个简单分类器的输入，经过该分类器进行输出，我们这边执行两种方法：</p><ul><li>数值叠加</li><li>特征叠加</li></ul><p>简单分类器选择一个简单的NN</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NN</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,in_channel=<span class="number">7</span>,out_channel=<span class="number">7</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(NN, self).__init__()</span><br><span class="line">        self.hidden=nn.Sequential(</span><br><span class="line">            nn.Linear(in_channel,<span class="number">128</span>),</span><br><span class="line">            nn.BatchNorm1d(<span class="number">128</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">128</span>,<span class="number">256</span>),</span><br><span class="line">            nn.BatchNorm1d(<span class="number">256</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">256</span>,<span class="number">648</span>),</span><br><span class="line">            nn.BatchNorm1d(<span class="number">648</span>),</span><br><span class="line">            nn.Dropout(<span class="number">0.2</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">648</span>,<span class="number">7</span>)</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="keyword">return</span> F.softmax(self.hidden(x))</span><br></pre></td></tr></table></figure><h4 id="2-1-数值叠加">2.1 数值叠加</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数值叠加</span></span><br><span class="line">input_data=[]</span><br><span class="line"><span class="keyword">for</span> _,i <span class="keyword">in</span> <span class="built_in">enumerate</span>(Nets):</span><br><span class="line">    i.<span class="built_in">eval</span>()</span><br><span class="line">    i.to(<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">    net_pre=i(x_t_tensor)</span><br><span class="line">    <span class="keyword">if</span> input_data==[]:</span><br><span class="line">        input_data=net_pre</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        input_data+=net_pre</span><br><span class="line">x=input_data.tolist()</span><br><span class="line">input_data=torch.tensor(x)</span><br><span class="line">input_data.shape</span><br></pre></td></tr></table></figure><p>值得注意的是，这里通过<code>tolist()</code>来回转换变换内存地址，否则<code>torch</code>在反向传播执行计算图时会把上面那段代码也算进去，导致报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据集</span></span><br><span class="line">stackingData=DataLoader(MyDataSet(input_data.<span class="built_in">float</span>(),y_t_tensor),batch_size=<span class="number">64</span>,shuffle=<span class="literal">True</span>,drop_last=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 模型</span></span><br><span class="line">net_s_1=NN(<span class="number">7</span>,<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 训练</span></span><br><span class="line">train(net_s_1,<span class="string">&quot;Net_S_1&quot;</span>,n=stackingData,epoch=<span class="number">50</span>)</span><br><span class="line"><span class="comment"># 载入</span></span><br><span class="line">net_s_1.load_state_dict(torch.load(<span class="string">r&quot;YourPath\Net_S_1.pth&quot;</span>)[<span class="string">&quot;model_state_dict&quot;</span>])</span><br><span class="line">net_s_1.to(<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"><span class="comment"># 预测结果</span></span><br><span class="line">z_4=accuracy(torch.<span class="built_in">max</span>(net_s_1(pre),<span class="number">1</span>)[<span class="number">1</span>],y_v_tensor.<span class="built_in">max</span>(<span class="number">1</span>)[<span class="number">1</span>]).item()</span><br></pre></td></tr></table></figure><h4 id="2-2-特征叠加">2.2 特征叠加</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 特征叠加</span></span><br><span class="line">input_data=[]</span><br><span class="line"><span class="keyword">for</span> _,i <span class="keyword">in</span> <span class="built_in">enumerate</span>(Nets):</span><br><span class="line">    i.<span class="built_in">eval</span>()</span><br><span class="line">    i.to(<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">    net_pre=i(x_t_tensor)</span><br><span class="line">    <span class="keyword">if</span> input_data==[]:</span><br><span class="line">        input_data=net_pre</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        input_data=torch.concat([input_data,net_pre],<span class="number">1</span>)</span><br><span class="line">x=input_data.tolist()</span><br><span class="line">input_data=torch.tensor(x)</span><br><span class="line">input_data.shape</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stackingData=DataLoader(MyDataSet(input_data.<span class="built_in">float</span>(),y_t_tensor),batch_size=<span class="number">64</span>,shuffle=<span class="literal">True</span>,drop_last=<span class="literal">True</span>)</span><br><span class="line">net_s_2=NN(<span class="number">49</span>,<span class="number">7</span>)</span><br><span class="line">train(net_s_2,<span class="string">&quot;Net_S_2&quot;</span>,n=stackingData,epoch=<span class="number">200</span>)</span><br><span class="line">net_s_2.load_state_dict(torch.load(<span class="string">r&quot;YourPath\Net_S_2.pth&quot;</span>)[<span class="string">&quot;model_state_dict&quot;</span>])</span><br><span class="line">net_s_2.to(<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">z_5=accuracy(torch.<span class="built_in">max</span>(net_s_1(pre),<span class="number">1</span>)[<span class="number">1</span>],y_v_tensor.<span class="built_in">max</span>(<span class="number">1</span>)[<span class="number">1</span>]).item()</span><br></pre></td></tr></table></figure><h3 id="3-结果分析">3 结果分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b=Line()</span><br><span class="line">b.add_xaxis([<span class="string">&quot;直接投票&quot;</span>,<span class="string">&quot;结果分配投票&quot;</span>,<span class="string">&quot;Softmax软投票&quot;</span>,<span class="string">&quot;数据叠加&quot;</span>,<span class="string">&quot;特征叠加&quot;</span>])</span><br><span class="line">b.add_yaxis(<span class="string">&quot;结果精度&quot;</span>,[<span class="built_in">round</span>(i,<span class="number">5</span>) <span class="keyword">for</span> i <span class="keyword">in</span> [z_1,z_2,z_3,z_4,z_5]])</span><br><span class="line">b.set_global_opts(yaxis_opts=opts.AxisOpts(min_=<span class="string">&quot;dataMin&quot;</span>,max_=<span class="string">&quot;dataMax&quot;</span>))</span><br><span class="line">b.render_notebook()</span><br></pre></td></tr></table></figure><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703011113022.png" alt="image-20230703011113022" style="zoom:50%;"><p>之前单模在验证集上最高的0.888，平均是0.86，特征叠加的结果会优于之前单模最好结果。</p><p>值得一提的是，特征叠加的方法在训练集上最高性能达到了0.93，这个结果远超之前单模的最好结果0.894。当然，用深度学习网络作为输出分类器，高收益的同时也带来了高风险，根据输出分类器的性能，最终结果也会上下浮动。为了避免这种情况，我们其实可以使用Ridge回归、Lasso回归、简单随机森林等模型作为输出模型。</p><hr><h2 id="六-结果分析">六 结果分析</h2><p><strong>以下是各模型的分类性能</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">b=Bar()</span><br><span class="line">b.add_xaxis([i <span class="keyword">for</span> i <span class="keyword">in</span> ML_PRE.keys()]+[<span class="string">&quot;Net%s&quot;</span>%i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">7</span>)])</span><br><span class="line">b.add_yaxis(<span class="string">&quot;机器学习准确率&quot;</span>,[<span class="built_in">round</span>(i[<span class="number">1</span>],<span class="number">3</span>) <span class="keyword">for</span> i <span class="keyword">in</span> ML_PRE.values()],markpoint_opts=opts.MarkPointOpts(</span><br><span class="line">            data=[opts.MarkPointItem(type_=<span class="string">&quot;min&quot;</span>, name=<span class="string">&quot;最小值&quot;</span>),opts.MarkPointItem(type_=<span class="string">&quot;max&quot;</span>,name=<span class="string">&quot;最大值&quot;</span>)],symbol=<span class="string">&#x27;pin&#x27;</span>, symbol_size=<span class="number">55</span>))</span><br><span class="line">b.add_yaxis(<span class="string">&quot;深度学习准确率&quot;</span>,[<span class="literal">None</span>]*<span class="number">4</span>+[<span class="built_in">round</span>(i,<span class="number">3</span>) <span class="keyword">for</span> i <span class="keyword">in</span> eval_acc],markpoint_opts=opts.MarkPointOpts(</span><br><span class="line">            data=[opts.MarkPointItem(type_=<span class="string">&quot;min&quot;</span>, name=<span class="string">&quot;最小值&quot;</span>),opts.MarkPointItem(type_=<span class="string">&quot;max&quot;</span>,name=<span class="string">&quot;最大值&quot;</span>)],symbol=<span class="string">&#x27;arrow&#x27;</span>, symbol_size=<span class="number">55</span>))</span><br><span class="line">b.set_global_opts(xaxis_opts=opts.AxisOpts(axislabel_opts=opts.LabelOpts(rotate=-<span class="number">15</span>)),</span><br><span class="line">                     title_opts=opts.TitleOpts(title=<span class="string">&quot;模型准确率&quot;</span>))</span><br><span class="line">b.render_notebook()</span><br></pre></td></tr></table></figure><img src="/2023/07/13/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E6%A3%AE%E6%9E%97%E8%A6%86%E7%9B%96%E7%B1%BB%E5%9E%8B%E9%A2%84%E6%B5%8B/image-20230703021324827.png" alt="image-20230703021324827" style="zoom:50%;"><p>在小样本跟少量特征的情况下，机器学习模型的性能与深度学习模型的性能差距不大，当然这里的深度学习模型只是一些非常简单的模型。</p><p><strong>以下是性能最强的两个深度学习模型与两个最强的机器学习模型进行融合的结果</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Net3 Net6</span></span><br><span class="line">net3,net6=Nets[<span class="number">2</span>],Nets[-<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 做个最简单的线性加权</span></span><br><span class="line">z1=torch.<span class="built_in">max</span>(net3(x_v_tensor),<span class="number">1</span>)[<span class="number">1</span>]+<span class="number">1</span></span><br><span class="line">z2=torch.<span class="built_in">max</span>(net6(x_v_tensor),<span class="number">1</span>)[<span class="number">1</span>]+<span class="number">1</span></span><br><span class="line">z3=ML_PRE[<span class="string">&#x27;LightGBM&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">z4=ML_PRE[<span class="string">&#x27;RF&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">z=torch.concat([z1.reshape(z1.shape[<span class="number">0</span>],<span class="number">1</span>),z2.reshape(z1.shape[<span class="number">0</span>],<span class="number">1</span>),torch.Tensor(z3).reshape(z1.shape[<span class="number">0</span>],<span class="number">1</span>),torch.Tensor(z4).reshape(z1.shape[<span class="number">0</span>],<span class="number">1</span>)],dim=<span class="number">1</span>)</span><br><span class="line">e=pd.DataFrame(z.numpy())</span><br><span class="line"><span class="comment"># 后处理</span></span><br><span class="line"><span class="comment"># 一般在提交的时候整的</span></span><br><span class="line"><span class="comment"># 取众数就好了</span></span><br><span class="line">ans=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(e.shape[<span class="number">0</span>]):</span><br><span class="line">    ans.append(e.iloc[i].mode().values[<span class="number">0</span>])</span><br><span class="line">accuracy(ans,y_val)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0.8838183421516755</span></span><br></pre></td></tr></table></figure><p>emm，这个性能略好于Net6，大于机器学习模型，小于Net3。</p><p>值得注意的是，在后处理过程中，模型投票产生的结果可能是：</p><ul><li>四票全中</li><li>三票A一票B</li><li>两票A两票B</li><li>两票A一票B一票C</li><li>ABCD各一票</li></ul><p>由于这里是把结果拿出来了而不是概率(概率请参考深度学习融合)，所以我们规定：三票四票的直接就是输出标签，两票A两票B选择创建分支，两票A一票B一票C选择A，ABCD各一票则随机选。</p><p>举个简单的后处理栗子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">ans=[]</span><br><span class="line">ans2=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(e.shape[<span class="number">0</span>]):</span><br><span class="line">    v=[<span class="number">0</span>]*<span class="number">8</span></span><br><span class="line">    fir=<span class="literal">True</span></span><br><span class="line">    c=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(e.shape[<span class="number">1</span>]):</span><br><span class="line">        v[<span class="built_in">int</span>(e.iloc[i,j])]+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> idx,_ <span class="keyword">in</span> <span class="built_in">enumerate</span>(v):</span><br><span class="line">        <span class="keyword">if</span> _==<span class="number">4</span> <span class="keyword">or</span> _==<span class="number">3</span>:</span><br><span class="line">            ans.append(idx)</span><br><span class="line">            ans2.append(idx)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> _==<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">if</span> fir:</span><br><span class="line">                ans.append(idx)</span><br><span class="line">                ans2.append(idx)</span><br><span class="line">                fir=<span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ans2[-<span class="number">1</span>]=idx</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> _==<span class="number">1</span>:</span><br><span class="line">            c+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> c==<span class="number">4</span>:</span><br><span class="line">        ans.append(e.iloc[i,<span class="number">0</span>])</span><br><span class="line">        ans2.append(e.iloc[i,<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>这段代码是我在半夜三点神志不清的时候写的，难免像坨屎，应该有很大的优化空间。但不管怎么说，这种后处理方式确实拿到了更好的结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">accuracy(ans,y_val) <span class="comment"># 0.8833774250440917</span></span><br><span class="line">accuracy(ans2,y_val) <span class="comment"># 0.8893298059964727</span></span><br></pre></td></tr></table></figure><p>这个结果超过了之前单模最好结果Net3，算是有提升吧。</p><p>实际上，我们对深度学习模型的融合也需要进行后处理，这样也能提高些分数。</p><p>就不做Stacking了，大概就是这样</p><p><strong>以下是特征工程对于机器学习模型的提升</strong></p><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703032934826.png" alt="image-20230703032934826" style="zoom:50%;"><p>这个图不太直观啊，我们逐个来看看是否有提升：</p><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703033627960.png" alt="image-20230703033627960" style="zoom:50%;"><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703033803478.png" alt="image-20230703033803478" style="zoom:50%;"><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703033914021.png" alt="image-20230703033914021" style="zoom:50%;"><img src="https://github.com/Chen-XiaoLv/ML-in-Geochemistry/raw/master/READEME/image-20230703033954456.png" alt="image-20230703033954456" style="zoom:50%;"><p>这里面仅仅构建了几个简单的特征，剔除了异常值，结果得到了明显的提升。但是相应的，异常值会带来泛化能力的提高，模型鲁棒性增强，需要根据具体情况决定是否对异常值进行剔除。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">基于ML+DL融合的森林覆盖类型预测</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="项目实践" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/07/07/Docker%20Web%20%E7%8E%AF%E5%A2%83/"/>
    <id>http://example.com/2023/07/07/Docker%20Web%20%E7%8E%AF%E5%A2%83/</id>
    <published>2023-07-07T07:16:45.275Z</published>
    <updated>2023-07-07T09:42:58.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-Web-环境">Docker Web 环境</h2><p>涉及到的技术栈：</p><ul><li>Linux</li><li>MySQL</li><li>Docker</li><li>Flask</li></ul><p>本文将分为两部分，第一部分是一些基础知识，第二部分则是整个操作过程。</p><hr><h1>前置知识</h1><h2 id="一、Linux基础">一、Linux基础</h2><blockquote><p>与Windows系统相比：</p><ul><li>可以不安装图形界面，只用命令行操作，灵活性更强</li><li>模块可以随意增减(硬件设备)</li><li>命令行对网络带宽要求不高，方便远程操作</li><li>Linux比Windows更加稳定(卡死)</li><li>授权更便宜</li><li>硬件要求更低</li><li>Linux的用户管理和权限管理更强，因而比Windows更加安全</li></ul></blockquote><h3 id="1-1-SSH远程连接">1.1 SSH远程连接</h3><p>Secure Shell 是一种网络安全协议，通过加密和认证机制实现安全的访问和文件传输业务。我们这里通过SSH远程链接命令行的方式与Linux系统进行交互。</p><p>我们这里采用的SSH客户端是<code>MobaXterm</code>，免费版本最多只能同时创建两个SSH连接，下载网址为：<a href="https://mobaxterm.mobatek.net/download.html">https://mobaxterm.mobatek.net/download.html</a></p><p>这个就是MobaXterm的客户端啦：</p><img src="/2023/07/07/Docker%20Web%20%E7%8E%AF%E5%A2%83/image-20230707154854126.png" alt="image-20230707154854126" style="zoom:50%;"><img src="/2023/07/07/Docker%20Web%20%E7%8E%AF%E5%A2%83/image-20230707160321392.png" alt="image-20230707160321392" style="zoom:50%;"><p>这边可以远程输入端口。但是还记得之前打开的wsl服务吗，可以直接连接到本机的WSL服务。</p><img src="/2023/07/07/Docker%20Web%20%E7%8E%AF%E5%A2%83/image-20230707170901189.png" alt="image-20230707170901189" style="zoom:50%;"><p>在SFTP进行上传，直接拖进去，或者右键都可以。</p><img src="/2023/07/07/Docker%20Web%20%E7%8E%AF%E5%A2%83/image-20230707171211281.png" alt="image-20230707171211281" style="zoom:50%;"><p>这样就有了捏。</p><img src="/2023/07/07/Docker%20Web%20%E7%8E%AF%E5%A2%83/image-20230707171231385.png" alt="image-20230707171231385" style="zoom:50%;"><p>运行一下试试：</p><img src="/2023/07/07/Docker%20Web%20%E7%8E%AF%E5%A2%83/image-20230707171313755.png" alt="image-20230707171313755" style="zoom:50%;"><h3 id="1-2-Linux知识">1.2 Linux知识</h3><img src="/2023/07/07/Docker%20Web%20%E7%8E%AF%E5%A2%83/image-20230707160846355.png" alt="image-20230707160846355" style="zoom:33%;"><h3 id="1-3-Linux操作">1.3 Linux操作</h3><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>mkdir</code> school</td><td style="text-align:center">创建一个文件夹</td></tr><tr><td style="text-align:center"><code>cd</code> school</td><td style="text-align:center">转移到路径下</td></tr><tr><td style="text-align:center"><code>touch</code> demo.txt</td><td style="text-align:center">创建一个文件</td></tr><tr><td style="text-align:center"><code>cd</code> …</td><td style="text-align:center">返回上级</td></tr><tr><td style="text-align:center"><code>rm -rf</code> school</td><td style="text-align:center">移除文件</td></tr><tr><td style="text-align:center"><code>vim</code> demo.txt</td><td style="text-align:center">编写文件(Ins键更换输入模式)</td></tr><tr><td style="text-align:center">esc+:w</td><td style="text-align:center">在vim下保存写入</td></tr><tr><td style="text-align:center">:q</td><td style="text-align:center">退出vim</td></tr><tr><td style="text-align:center"><code>tar -cvf</code> school.tar school</td><td style="text-align:center">压缩，可以保留文件权限信息</td></tr><tr><td style="text-align:center"><code>tar -xvf</code> school.tar</td><td style="text-align:center">xvf解压缩，cvf压缩</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>部分参数意义</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center"><code>-r</code></td><td style="text-align:center">递归操作</td></tr><tr><td style="text-align:center"><code>-f</code></td><td style="text-align:center">强制</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><h2 id="二、Flask基础">二、Flask基础</h2><blockquote><p>轻量级的网络框架，可以通过第三方扩展增加功能</p></blockquote><p>Flask支持MVC模式(Model-View-Controller)，兼容多种数据库、模板；Flask的路由以及路由函数由修饰器设定，开发人员不需要其他文档匹配。</p><p>一个特点就是，要用到啥安装啥。</p><h4 id="MVC模式">MVC模式</h4><p>将一个复杂的软件系统抽象成模型层(Model)、视图层(View)、控制器层(Controller)，划分出明确的职责。</p><img src="/2023/07/07/Docker%20Web%20%E7%8E%AF%E5%A2%83/image-20230707174042982.png" alt="image-20230707174042982" style="zoom:50%;"><p>模型层：与代码有关</p><p>视图层：与界面有关，比如三件套</p><p>控制器层：链接模型层和视图层</p><h2 id="三、Docker基础">三、Docker基础</h2><hr><h1>创建Python容器、部署Flask项目</h1><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Docker-Web-环境&quot;&gt;Docker Web 环境&lt;/h2&gt;
&lt;p&gt;涉及到的技术栈：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Flask&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文将分为两部</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【数据分析实践】猫十二分类</title>
    <link href="http://example.com/2023/05/20/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E7%8C%AB%E5%8D%81%E4%BA%8C%E5%88%86%E7%B1%BB/"/>
    <id>http://example.com/2023/05/20/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E7%8C%AB%E5%8D%81%E4%BA%8C%E5%88%86%E7%B1%BB/</id>
    <published>2023-05-20T07:12:17.287Z</published>
    <updated>2023-05-25T15:16:07.152Z</updated>
    
    <content type="html"><![CDATA[<h1>【数据科学项目实践】基于ResNet和Inception v3的猫十二分类迁移学习</h1><h2 id="一、项目背景">一、项目背景</h2><p>本项目来源于飞浆平台的图像分类学习赛。<a href="https://aistudio.baidu.com/aistudio/competition/detail/136/0/introduction">指路链接</a></p><ul><li>代码和结果来源于我的小组同学，没有做任何的改动，我这边仅做一个总结归纳，以便学习和复盘</li></ul><p>简单把赛题Copy一下：</p><blockquote><p>本场比赛要求参赛选手对十二种猫进行分类，属于CV方向经典的图像分类任务。图像分类任务作为其他图像任务的基石，可以让大家更快上手计算机视觉。</p></blockquote><p><strong>数据集</strong></p><p>比赛数据集包含12种猫的图片，并划分为训练集与测试集。</p><p><strong>训练集：</strong> 提供高清彩色图片以及图片所属的分类，共有2160张猫的图片，含标注文件。</p><p><strong>测试集：</strong> 仅提供彩色图片，共有240张猫的图片，不含标注文件。</p><h2 id="二、Baseline">二、Baseline</h2><h3 id="2-1-准备阶段">2.1 准备阶段</h3><p>主要是导入一些要用到的模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> models,transforms</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader,Dataset</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torch.optim <span class="keyword">import</span> lr_scheduler</span><br><span class="line"><span class="keyword">import</span> copy</span><br></pre></td></tr></table></figure><h3 id="2-2-数据读取阶段">2.2 数据读取阶段</h3><p>这个阶段就是如何将数据读取到模型中来，由于猫猫是图像数据，所以这边将其读取成数字图像一般是通过数组来存在内存中的，考虑到中间过程的可视化，我们通过<code>PIL</code>来读取<code>Image</code>类型的数据。这步可以写作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x=np.fromfile(imgPath,dtype=np.float32) <span class="comment"># 读取成ndarray</span></span><br><span class="line">x=cv2.imdecode(x,<span class="number">1</span>) <span class="comment"># 将区间转化为[0,255]</span></span><br><span class="line">img=PIL.Image.fromarray(x) <span class="comment"># 读取成Image对象</span></span><br></pre></td></tr></table></figure><img src="/2023/05/20/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E7%8C%AB%E5%8D%81%E4%BA%8C%E5%88%86%E7%B1%BB/image-20230525222735963.png" alt="image-20230525222735963" style="zoom:50%;"><p>上图中，左边的是Image类型的数据，右边是cv读取的数据，可以发现发生了颜色通道的调换。实际上，读取到cv这部分就好了，可以调用多窗口的<code>imshow</code>进行数据可视化。</p><p>我们现在拿到了猫猫图像！那么接下来就要拿到猫猫的标签啦，一般情况下，我们会将数据跟标签记录在一个文档里，每一行对应一个数据(图片)路径和一个标签：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件标签</span></span><br><span class="line">filelist=<span class="string">r&quot;data_split_list.txt&quot;</span></span><br><span class="line">imgs,labels=[],[] <span class="comment"># 存储列表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filelist) <span class="keyword">as</span> f:</span><br><span class="line">    lines=[_.strip() <span class="keyword">for</span> _ <span class="keyword">in</span> f] <span class="comment"># 去除空白</span></span><br><span class="line">    np.random.shuffle(lines) <span class="comment"># 随机打乱</span></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> lines:</span><br><span class="line">        img_path,label=l.split(<span class="string">&#x27;\t&#x27;</span>) <span class="comment"># 获取图片路径和标签</span></span><br><span class="line">        img=Image.fromarray(cv2.imdecode(np.fromfile(img_path,np.float32),<span class="number">1</span>))</span><br><span class="line">        imgs.append(img)</span><br><span class="line">        labels.append(label)</span><br></pre></td></tr></table></figure><p>我们将这部分工作封装成一个函数，就可以实现数据的读取了。</p><p>接下来的工作，就是将数据转化为<code>PyTorch</code>接受的格式啦。众所周知，<code>PyTorch</code>的模型训练跟推理一般是通过迭代一个<code>DataLoader</code>对象来进行的，而<code>DataLoader</code>对象的数据集是一个<code>DataSet</code>类。所以这里我们需要构建一个<code>Dataset</code>类啦：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myData</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(myData,self).__init__()</span><br><span class="line">        self.data=[]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="keyword">return</span> self.data[x]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.data)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>嗯，把上面三个函数填完就阔以啦。</p><p>对于图像数据，我们需要应用一个<code>transforms</code>，这里做最简单的变换：<code>转为Tensor，尺寸裁剪，标准化</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">self.transform=transforms.Compose(</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    transforms.Resize((<span class="number">299</span>,<span class="number">299</span>)),</span><br><span class="line">    transforms.Normalize((<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>),(<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>最终的Dataset如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myData</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,kind</span>):</span><br><span class="line">        <span class="built_in">super</span>(myData, self).__init__()</span><br><span class="line">        self.mode=kind</span><br><span class="line">        self.transform=transforms.Compose(</span><br><span class="line">            transforms.ToTensor(),</span><br><span class="line">            transforms.Resize((<span class="number">299</span>,<span class="number">299</span>)),</span><br><span class="line">            transforms.Normalize((<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>),(<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>))</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> kind==<span class="string">&quot;test&quot;</span>:</span><br><span class="line">            self.imgs=self.load_origin_data()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.imgs,self.labels=self.load_origin_data()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="keyword">if</span> self.mode==<span class="string">&quot;test&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> self.transform(self.imgs[item])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.transform(self.imgs[item]),torch.tensor(self.labels[item])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.imgs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_origin_data</span>(<span class="params">self</span>):</span><br><span class="line">        filelist = <span class="string">&#x27;./data/%s_split_list.txt&#x27;</span> % self.mode</span><br><span class="line">        imgs,labels=[],[]</span><br><span class="line">        data_dir=os.getcwd()+<span class="string">&quot;/data&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.mode==<span class="string">&#x27;train&#x27;</span> <span class="keyword">or</span> self.mode==<span class="string">&#x27;val&#x27;</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(filelist) <span class="keyword">as</span> f:</span><br><span class="line">                lines=[_.strip() <span class="keyword">for</span> _ <span class="keyword">in</span> f]</span><br><span class="line">                <span class="keyword">if</span> self.mode==<span class="string">&#x27;train&#x27;</span>:</span><br><span class="line">                    np.random.shuffle(lines)</span><br><span class="line">                    <span class="keyword">for</span> l <span class="keyword">in</span> lines:</span><br><span class="line">                        img_path,label=l.split(<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">                        img_path=os.path.join(data_dir,img_path)</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            img=Image.fromarray(cv2.imdecode(np.fromfile(img_path,dtype=np.float32),<span class="number">1</span>))</span><br><span class="line">                            imgs.append(img)</span><br><span class="line">                            labels.append(<span class="built_in">int</span>(label))</span><br><span class="line">                        <span class="keyword">except</span> Exception(<span class="string">&quot;The path %s&quot;</span>%img_path+<span class="string">&quot; may be wrong&quot;</span>) <span class="keyword">as</span> e:</span><br><span class="line">                            <span class="built_in">print</span>(e)</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">return</span> imgs,labels</span><br><span class="line">                <span class="keyword">elif</span> self.mode==<span class="string">&quot;test&quot;</span>:</span><br><span class="line">                    full_lines = os.listdir(<span class="string">&#x27;data/cat_12_test/&#x27;</span>)</span><br><span class="line">                    lines = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> full_lines]</span><br><span class="line">                    <span class="keyword">for</span> img_path <span class="keyword">in</span> lines:</span><br><span class="line">                        img_path = os.path.join(data_dir, <span class="string">&quot;cat_12_test/&quot;</span>, img_path)</span><br><span class="line">                        img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">                        imgs.append(img)</span><br><span class="line">                    <span class="keyword">return</span> imgs</span><br></pre></td></tr></table></figure><h3 id="2-3-模型训练">2.3 模型训练</h3><p>我们刚刚说<code>PyTorch</code>的模型训练跟推理一般是通过迭代一个<code>DataLoader</code>对象来进行的，现在就是需要构建这个东西啦：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_Dataloader</span>():</span><br><span class="line">    img_datasets = &#123;x: myData(x) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;val&#x27;</span>, <span class="string">&#x27;test&#x27;</span>]&#125;</span><br><span class="line">    dataset_sizes = &#123;x: <span class="built_in">len</span>(img_datasets[x]) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;val&#x27;</span>, <span class="string">&#x27;test&#x27;</span>]&#125;</span><br><span class="line"></span><br><span class="line">    train_loader = DataLoader(</span><br><span class="line">        dataset=img_datasets[<span class="string">&#x27;train&#x27;</span>],</span><br><span class="line">        batch_size=<span class="number">24</span>,</span><br><span class="line">        shuffle=<span class="literal">True</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    val_loader = DataLoader(</span><br><span class="line">        dataset=img_datasets[<span class="string">&#x27;val&#x27;</span>],</span><br><span class="line">        batch_size=<span class="number">1</span>,</span><br><span class="line">        shuffle=<span class="literal">False</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    test_loader = DataLoader(</span><br><span class="line">        dataset=img_datasets[<span class="string">&#x27;test&#x27;</span>],</span><br><span class="line">        batch_size=<span class="number">1</span>,</span><br><span class="line">        shuffle=<span class="literal">False</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    dataloaders = &#123;</span><br><span class="line">        <span class="string">&#x27;train&#x27;</span>: train_loader,</span><br><span class="line">        <span class="string">&#x27;val&#x27;</span>: val_loader,</span><br><span class="line">        <span class="string">&#x27;test&#x27;</span>: test_loader</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dataset_sizes,dataloaders</span><br></pre></td></tr></table></figure><p>接下来就是单纯的训练过程了。步骤总结如下：</p><ul><li>参数设置阶段<ul><li>设置GPU</li><li>设置优化器、损失函数、学习策略</li></ul></li><li>训练过程<ul><li>迭代DataLoader</li><li>优化器梯度清零</li><li>模型推理</li><li>误差计算</li><li>反向传播</li><li>更新优化器、学习率</li></ul></li><li>模型评估<ul><li>计算每轮的误差累计值、精度</li><li>选择最优精度并进行模型保存</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Train</span>(<span class="params">model,criterion,optimizer,scheduler,num_epoches=<span class="number">25</span></span>):</span><br><span class="line">    dataset_sizes,dataloaders=get_Dataloader()</span><br><span class="line">    device=torch.device(<span class="string">&quot;cuda:0&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">    best_model_wts=copy.deepcopy(model.state_dict())</span><br><span class="line">    best_acc=<span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epoches):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Epoch &#123;&#125;/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(epoch+<span class="number">1</span>,num_epoches))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> phase <span class="keyword">in</span> [<span class="string">&#x27;train&#x27;</span>,<span class="string">&#x27;val&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> phase==<span class="string">&quot;train&quot;</span>:</span><br><span class="line">                model.train()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">            trian_loss=<span class="number">0.0</span></span><br><span class="line">            train_corrects=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> inputs,labels <span class="keyword">in</span> dataloaders[phase]:</span><br><span class="line">                inputs,labels=inputs.to(device),labels.to(device)</span><br><span class="line">                optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">                <span class="keyword">with</span> torch.set_grad_enabled(phase==<span class="string">&quot;train&quot;</span>):</span><br><span class="line">                    <span class="comment"># 上下文管理器，参数是Bool，用于确定是否对Block内的语句进行求导</span></span><br><span class="line">                    y_pre=model(inputs)</span><br><span class="line">                    _,y_pre=torch.<span class="built_in">max</span>(y_pre,<span class="number">1</span>)</span><br><span class="line">                    loss=criterion(y_pre,labels)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> phase==<span class="string">&quot;train&quot;</span>:</span><br><span class="line">                        loss.backward()</span><br><span class="line">                        optimizer.step()</span><br><span class="line"></span><br><span class="line">                trian_loss+=loss.item()*inputs.size(<span class="number">0</span>)</span><br><span class="line">                train_corrects+=torch.<span class="built_in">sum</span>(y_pre==labels)</span><br><span class="line">            <span class="keyword">if</span> phase==<span class="string">&quot;train&quot;</span>:</span><br><span class="line">                scheduler.step()</span><br><span class="line"></span><br><span class="line">            epoch_loss=trian_loss/dataset_sizes[phase]</span><br><span class="line">            epoch_acc=train_corrects.<span class="built_in">float</span>()/dataset_sizes[phase]</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; Loss :&#123;:.4f&#125; Acc &#123;:.4&#125;&quot;</span>.<span class="built_in">format</span>(phase,epoch_loss,epoch_acc))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> phase==<span class="string">&quot;val&quot;</span> <span class="keyword">and</span> epoch_acc&gt;best_acc:</span><br><span class="line">                best_acc=epoch_acc</span><br><span class="line">                best_model_wts=copy.deepcopy(model.state_dict())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Best val Acc : &#123;:4f&#125;&quot;</span>.<span class="built_in">format</span>(best_acc))</span><br><span class="line">    model.load_state_dict(best_model_wts)</span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure><h2 id="三、迁移学习">三、迁移学习</h2><p>迁移学习(Transfer Learning)就是利用预训练好的大模型参数去学习其他数据的分布。</p><p>这个过程我们一般不希望原始模型参数改变，因而一般需要做如下工作:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> model.parameters():</span><br><span class="line">    param.requires_grad=<span class="literal">False</span></span><br></pre></td></tr></table></figure><p>然后，我们需要构架最后一层全连接层，用来学习新的数据集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.fc=nn.Linear(<span class="number">2048</span>,num_classes)</span><br></pre></td></tr></table></figure><p>也就是最后需要训练的就是这个全连接层了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Inception</span>(<span class="params">device</span>):</span><br><span class="line">    <span class="comment"># 用训练好的模型进行迁移</span></span><br><span class="line">    model_ft=models.inception_v3(pretrained=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># model_ft=models.resnet50(pretrained=True)</span></span><br><span class="line">    <span class="comment"># model_ft=models.alexnet(pretrained=True)</span></span><br><span class="line"></span><br><span class="line">    num_ftrs=model_ft.fc.in_features</span><br><span class="line">    model_ft.fc=nn.Linear(num_ftrs,<span class="number">12</span>) <span class="comment"># 设置全连接层最终结果</span></span><br><span class="line">    </span><br><span class="line">    model_ft=model_ft.to(device)</span><br><span class="line"></span><br><span class="line">    cirterion=nn.CrossEntropyLoss()</span><br><span class="line">    optimizer_ft=torch.optim.SGD(model_ft.parameters(),lr=<span class="number">0.001</span>,momentum=<span class="number">0.9</span>)</span><br><span class="line">    exp_lr_scheduler=lr_scheduler.StepLR(optimizer_ft,step_size=<span class="number">5</span>,gamma=<span class="number">0.1</span>)</span><br><span class="line">    model_ft=Train(model_ft,cirterion,optimizer_ft,exp_lr_scheduler,num_epoches=<span class="number">30</span>)</span><br></pre></td></tr></table></figure><h2 id="四、结果分析">四、结果分析</h2><ul><li><p>Inception</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Epoch 30/30</span><br><span class="line">train Loss: 0.1065 Acc: 0.9858</span><br><span class="line">val Loss: 0.3026 Acc: 0.8983</span><br><span class="line">Best val Acc: 0.918336</span><br></pre></td></tr></table></figure></li><li><p>AlexNet</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Epoch 30/30</span><br><span class="line">train Loss: 0.1403 Acc: 0.9601</span><br><span class="line">val Loss: 0.6815 Acc: 0.7750</span><br><span class="line">Best val Acc: 0.779661</span><br></pre></td></tr></table></figure></li><li><p>ResNet50</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Epoch 30/30</span><br><span class="line">train Loss: 0.0480 Acc: 0.9973</span><br><span class="line">val Loss: 0.3157 Acc: 0.9060</span><br><span class="line">Best val Acc: 0.909091</span><br></pre></td></tr></table></figure></li></ul><p>中间部分特征图的结果如下：</p><img src="/2023/05/20/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E7%8C%AB%E5%8D%81%E4%BA%8C%E5%88%86%E7%B1%BB/image-20230525231256607.png" alt="image-20230525231256607" style="zoom:33%;"><p>特征图嘛，主打的就是一个抽象。可以发现同一张图经过不同的卷积核作用后，有了全新的高维特征，这些特征也主打的就是一个难以解释，反正就看个乐。</p><img src="/2023/05/20/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E3%80%91%E7%8C%AB%E5%8D%81%E4%BA%8C%E5%88%86%E7%B1%BB/image-20230525231541473.png" alt="image-20230525231541473" style="zoom:50%;"><p>基本上7个epoch就收敛了。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">基于ResNet的猫十二分类迁移学习</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="项目实践" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/05/10/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91GNN/"/>
    <id>http://example.com/2023/05/10/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91GNN/</id>
    <published>2023-05-09T18:02:46.083Z</published>
    <updated>2023-05-09T18:04:11.640Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GNN_Core</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,A,inC,outC</span>):</span><br><span class="line">        <span class="built_in">super</span>(GNN_Core, self).__init__()</span><br><span class="line">        <span class="comment"># Features Matrix X: [N,D]</span></span><br><span class="line">        <span class="comment"># Adjacent Matrix A: [N,D]</span></span><br><span class="line">        N=A.shape[<span class="number">0</span>]</span><br><span class="line">        self.self_adjecent=nn.Sequential(</span><br><span class="line">            nn.Linear(N,<span class="number">64</span>),</span><br><span class="line">            nn.BatchNorm1d(<span class="number">64</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">64</span>,N)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.adjacent=nn.Sequential(</span><br><span class="line">            nn.Linear(inC,<span class="number">32</span>),</span><br><span class="line">            nn.BatchNorm1d(<span class="number">32</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">32</span>,outC)</span><br><span class="line">        )</span><br><span class="line">        self.A=A</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x,w</span>):</span><br><span class="line">        <span class="comment"># By the way, there is a small knowledge which about Diag</span></span><br><span class="line">        <span class="comment"># We can get Diag by torch.diag(M) and rebuild the dimension by torch.diag_embed(x)</span></span><br><span class="line">        <span class="comment"># by this approach, we also can easily make diag to 0.</span></span><br><span class="line">        <span class="comment"># Ori-torch.diag_embed(torch.diag(Ori)</span></span><br><span class="line">        sA=self.self_adjecent(torch.diag(x)) <span class="comment"># Only need to train the diag of matrix</span></span><br><span class="line">        A=self.adjacent(torch.bmm(self.A,x)) <span class="comment"># simulate the multiplication between A and X</span></span><br><span class="line">        A=w*A <span class="comment"># w means normalization function</span></span><br><span class="line">        <span class="comment"># A [B,N,O]</span></span><br><span class="line">        <span class="comment"># sA [N]</span></span><br><span class="line">        <span class="keyword">return</span> (A.T+sA).T</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GNN</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,A,hidden_num,hidden_out</span>):</span><br><span class="line">        <span class="built_in">super</span>(GNN, self).__init__()</span><br><span class="line">        self.hiddens=nn.Sequential()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(hidden_num):</span><br><span class="line">            self.hiddens.append(GNN_Core(A,hidden_out[i],hidden_out[i+<span class="number">1</span>]))</span><br><span class="line">            <span class="keyword">if</span> i&lt;hidden_num-<span class="number">1</span>:</span><br><span class="line">                self.hiddens.append(nn.BatchNorm1d(hidden_out[i+<span class="number">1</span>]))</span><br><span class="line">                self.hiddens.append(nn.ReLU())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x=self.hiddens(x)</span><br><span class="line">        <span class="keyword">return</span> F.softmax(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Loss</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Loss, self).__init__()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x,y</span>):</span><br><span class="line">        <span class="keyword">return</span> torch.<span class="built_in">sum</span>(y*np.log(x)+(<span class="number">1</span>-y)*np.log(<span class="number">1</span>-x))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>():</span><br><span class="line">    model=GNN(<span class="literal">None</span>,<span class="number">3</span>,<span class="number">128</span>)</span><br><span class="line">    loss_func=Loss()</span><br><span class="line"></span><br><span class="line">    optimizer=torch.optim.SGD()</span><br><span class="line">    data=<span class="literal">None</span></span><br><span class="line">    y=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 简单模拟下</span></span><br><span class="line">    y_pre=model(data)</span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    loss=loss_func(y_pre,y)</span><br><span class="line">    loss.backward()</span><br><span class="line">    optimizer.step()</span><br><span class="line"></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>English Essay</title>
    <link href="http://example.com/2023/05/09/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91English%20Essay/"/>
    <id>http://example.com/2023/05/09/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91English%20Essay/</id>
    <published>2023-05-08T16:00:00.000Z</published>
    <updated>2023-07-31T14:18:33.954Z</updated>
    
    <content type="html"><![CDATA[<h3 id="The-Dissertation-Revision-Trap">The Dissertation Revision Trap</h3><blockquote><p>Imagine this common scenario: You’ve put your heart, blood, and time into creating and submitting an initial dissertation prospectus, concept paper, or dissertation proposal – only to receive a request for revision.</p></blockquote><p>想象一下这个常见的场景:你投入了心血和时间来创作和提交一份初步的论文大纲、概念论文或论文提案，结果却收到了修改的请求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">put your heart, blood, <span class="keyword">and</span> time into : 投身于</span><br></pre></td></tr></table></figure><blockquote><p>Now, it’s up to you to revise this thing and return it to your chair and/or committee members such that you can move forward. You make the revisions based upon your understanding of the requests being made. You resubmit. Then, it happens: You receive more request for revision.</p></blockquote><p>现在，由你来修改这个东西，并把它还给你的主席和/或委员会成员，以便你能继续前进。你根据你对所提要求的理解进行修改。你重新提交。然后，事情发生了： 你收到更多的修改要求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it<span class="string">&#x27;s up to ：取决于</span></span><br><span class="line"><span class="string">such that ： 如此...以至于</span></span><br><span class="line"><span class="string">based upon : 取决于</span></span><br></pre></td></tr></table></figure><blockquote><p>It’s at this point where most candidates get stuck. It’s from this point that so many candidates will never advance. Such candidates are forever caught in the cycle of what I call “The Dissertation Revision Trap.”</p></blockquote><p>正是在这一点上，大多数候选人被卡住了。正是从这一点出发，许多候选人将永远无法前进。这些候选人永远陷入了我称之为 &quot;论文修改陷阱 &quot;的循环之中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">at this point : 在这时，在此处</span><br><span class="line">It<span class="string">&#x27;s at this point where ..... : xxx在这个地方</span></span><br><span class="line"><span class="string">get stuck : 卡住了</span></span><br><span class="line"><span class="string">be forever caught in the cycle of : 陷入循环</span></span><br></pre></td></tr></table></figure><blockquote><p>Here are reasons that candidates get stuck in this trap:</p><p>POISON #1 : They submit their work far too early.</p><p>Candidates sometimes submit their “draft” before it’s fully ready for chair and committee eyes. While checking in with one’s chair, asking for feedback about specific elements of one’s draft, and asking specific questions about executing specific section of one’s draft are great strategies to writing a great dissertation, submitting an all-out draft before you know that is fully meets the expectations of a finished draft is pretty unwise.</p></blockquote><p>以下是候选人陷入这个陷阱的原因：</p><p>POISON1：他们过早地提交了他们的工作。</p><p>候选人有时会在自己的 &quot;草稿 &quot;完全准备好供主席和委员会审阅之前就提交。虽然向主席了解情况，就草案的具体内容征求反馈意见，并就草案的具体部分提出具体问题，是写出一篇好论文的好策略，但在你知道完全满足完成草案的期望之前就提交一份全面的草案是非常不明智的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">specific : 特定的，明确的</span><br><span class="line">pretty unwise : 及其不明智</span><br></pre></td></tr></table></figure><blockquote><p>POISON #2 : They only address the revision request.</p><p>When you receive a request from a committee member, it’s natural to want to satisfy that revision. However, satisfying that revision request alone is not enough. Often you have to adjust other elements of your draft to satisfy the revision request AND address any paper-wide changes required to accommodate the request.</p><p>The antidote: Make the requested revision and examine how the draft needs to change around the revision. Carefully check your line of logic to make sure that it still holds with the new revision. In the event you don’t understand the revision request, call the requester on the phone or meet face-to-face to ask some questions.</p></blockquote><p>POISON2:它们只处理修改请求。</p><p>当你收到一个委员会成员的请求时，想要满足这个修改是很自然的。然而，仅仅满足修改要求是不够的。通常，你必须调整草稿的其他元素以满足修改要求，并处理为适应要求而需要进行的所有纸张更改。</p><p>解决方法:进行要求的修改，并检查草稿需要如何围绕修改进行更改。仔细检查你的逻辑线，以确保它仍然适用于新的修订。如果你不明白修改请求，打电话给请求者或面对面地问一些问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">address : 也有修订的意思</span><br><span class="line">accommodate : 容纳，满足，迁就</span><br><span class="line">it<span class="string">&#x27;s natural to do : 自然而然做</span></span><br><span class="line"><span class="string">antidote : 解毒药(矫正方法)</span></span><br><span class="line"><span class="string">make sure : 确保</span></span><br><span class="line"><span class="string">In the event : 假如，倘若</span></span><br></pre></td></tr></table></figure><blockquote><p>POISON #3: They go overboard in their revisions.</p><p>Sometimes, rarely, candidates will change their draft more than required. For example, if a revision request was made to augment a minute element of a single sentence and the candidate made unnecessary global changes to one’s literature review based upon that single request, that would be an overreaction.</p><p>The antidote: Ask careful questions to the person requesting the revision. Understand the extent of the change before you make it.</p></blockquote><p>POISON3:他们在修改中做得太过火了。</p><p>有时，很少，候选人会修改他们的草稿超过要求。例如，如果一个修改请求是为了增加一个句子的一个微小元素，而候选人根据这个请求对他的文献综述进行了不必要的全面修改，这将是反应过度。</p><p>解决方法:向要求修改的人仔细提问。在做出改变之前，要了解改变的程度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go overboard <span class="keyword">in</span> : 太过火了</span><br><span class="line">rarely : 很少</span><br><span class="line">the extent of : 程度</span><br></pre></td></tr></table></figure><hr><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;The-Dissertation-Revision-Trap&quot;&gt;The Dissertation Revision Trap&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Imagine this common scenario: You’ve put your he</summary>
      
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="英语" scheme="http://example.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>【OpenCV】OpenCV基本操作</title>
    <link href="http://example.com/2023/03/21/%E3%80%90OpenCV%E3%80%91OpenCV%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2023/03/21/%E3%80%90OpenCV%E3%80%91OpenCV%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2023-03-21T09:32:51.556Z</published>
    <updated>2023-03-21T16:38:41.557Z</updated>
    
    <content type="html"><![CDATA[<h1>OpenCV基本操作</h1><hr><p>OpenCV本质上还是C/C++架构，只不过我们可以通过Python的接口来调用底层代码。其中的模块大致如下：</p><img src="/2023/03/21/%E3%80%90OpenCV%E3%80%91OpenCV%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20230321173939350.png" alt="image-20230321173939350" style="zoom:50%;"><p><img src="/2023/03/21/%E3%80%90OpenCV%E3%80%91OpenCV%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20230321174122542.png" alt="image-20230321174122542"></p><img src="/2023/03/21/%E3%80%90OpenCV%E3%80%91OpenCV%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20230321174217314.png" alt="image-20230321174217314" style="zoom:50%;"><hr><h2 id="3-1-图像输入与输出">3.1 图像输入与输出</h2><p>处理图像之前，需要将图像文件从磁盘上读取到内存，处理完毕后再保存到内存。<code>imgproc</code>模块提供了这些全局函数，用来读取或保存图像文件。</p><h3 id="3-1-1-读取图像">3.1.1  读取图像</h3><p>函数<code>imread</code>用于读取图像文件或加载图像文件。其声明如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv.imread(filename[, flags])-&gt;retval</span><br></pre></td></tr></table></figure><p>这个<code>flags</code>参数表示读取模式，输入是一组枚举数据，取值如下：</p><ul><li><code>cv.IMREAD_ANYDEPTH:2</code>,若输入的图像深度是<code>16</code>或者<code>32</code>，就返回对应深度的图像，否则转换为<code>8</code>位图像返回。</li><li><code>cv.IMREAD_COLOR:1</code>，将输入图像转化为三通道彩色图像</li><li><code>cv.IMREAD_GRAYSCALE:0</code>，将图像转为一通道灰度图</li><li><code>cv.IMREAD_UNCHANGED:-1</code>，原封不动读取原图</li></ul><p>如果这个函数没有读取成功，则会返回<code>None</code>。值得注意的是，读取的结果是一个<code>Ndarray</code>数组，可以通过<code>Numpy</code>的方法对其进行处理。</p><p>除却<code>imread</code>外，我们还可以通过<code>imdecode</code>从缓存中读取图像。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv.imdecode(np.fromfile(imgpath,dtype=np.unint8),flag)</span><br></pre></td></tr></table></figure><h3 id="3-2-2-保存图像">3.2.2  保存图像</h3><p>我们现在用函数<code>imwrite</code>来保存图像。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imwrite(filename,img[.params])-&gt;retval</span><br></pre></td></tr></table></figure><p>好了，我们直接来看一个例子吧，<strong>读取并保存图像</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取一张图像</span></span><br><span class="line">img=cv.imread(<span class="string">&quot;./Files/img1.png&quot;</span>,cv.IMREAD_GRAYSCALE)</span><br><span class="line"><span class="comment"># 在namewindow(GUI)显示图像</span></span><br><span class="line">cv.imshow(<span class="string">&quot;window1&quot;</span>,img)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.imwrite(<span class="string">&quot;./Files/img4.jpg&quot;</span>,img)</span><br><span class="line">cv.destroyWindow(<span class="string">&quot;window1&quot;</span>)</span><br></pre></td></tr></table></figure><p>当然除了通过namewindow显示图像外，我们也可以调用matplotlib的接口：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">img=cv.imread(<span class="string">&quot;./Files/img1.png&quot;</span>,cv.IMREAD_GRAYSCALE)</span><br><span class="line">plt.imshow(img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>如果我们手上有两幅图像，可以通过线性加和的方式将其<strong>混合</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 图像混合</span></span><br><span class="line">alpha=<span class="number">0.5</span></span><br><span class="line">img1=cv.imread(<span class="string">&quot;./Files/img2.png&quot;</span>)</span><br><span class="line">img2=cv.imdecode(np.fromfile(<span class="string">&quot;./Files/img3.png&quot;</span>,dtype=np.uint8),-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> img1 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    sys.exit(<span class="string">&quot;Could not read the image1&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> img2 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    sys.exit(<span class="string">&quot;Could not read the image2&quot;</span>)</span><br><span class="line">img2=cv.resize(img2,(img1.shape[<span class="number">1</span>],img1.shape[<span class="number">0</span>]),interpolation=cv.INTER_LINEAR)</span><br><span class="line">i1,i2,i3=img2[:,:,<span class="number">0</span>],img2[:,:,<span class="number">1</span>],img2[:,:,<span class="number">2</span>]</span><br><span class="line">img2=cv.merge((i1,i2,i3))</span><br><span class="line">beta=(<span class="number">1.0</span>-alpha)</span><br><span class="line">dst=cv.addWeighted(img1,alpha,img2,beta,<span class="number">0.0</span>,<span class="number">0</span>)</span><br><span class="line">cv.imshow(<span class="string">&quot;result&quot;</span>,dst)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>这段代码需要注意的是，有一个<code>cv.resize(img,(newH,newW),method)</code>方法，可以通过插值的方式对图像重新采样。不同通道的图像可以通过<code>ndarray</code>索引的方式进行拆分，并通过<code>cv.merge()</code>方法进行堆叠。</p><p><code>merge</code>方法等价于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataset=[np.random.randn(<span class="number">4</span>,<span class="number">3</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line">np.stack(dataset,axis=-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>然后图像线性加和函数<code>addWeighted(img,alpha,img,alpha,0.0,0)</code>，实际上也类似于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D=img1*alpha+img2*beta</span><br><span class="line">D=D.astype(<span class="built_in">int</span>)</span><br><span class="line">dst1=np.clip(D,<span class="number">0</span>,<span class="number">255</span>)</span><br></pre></td></tr></table></figure><p>我们再来看一个栗子，对多幅图像进行<strong>拼接</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多幅图像</span></span><br><span class="line">img1=cv.resize(img1,(<span class="number">100</span>,<span class="number">100</span>),interpolation=cv.INTER_LINEAR)</span><br><span class="line">img2=cv.resize(img2,(<span class="number">100</span>,<span class="number">100</span>),interpolation=cv.INTER_LINEAR)</span><br><span class="line">img=np.hstack((img1,img2))</span><br><span class="line">Img=np.vstack((img1,img2))</span><br><span class="line">cv.imshow(<span class="string">&quot;01&quot;</span>,img)</span><br><span class="line">cv.waitKey(<span class="number">0</span>) <span class="comment"># 0不自动退出，否则正数代表毫秒</span></span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>这边值得注意的是，<code>hstack</code>和<code>vstack</code>分别会在<code>dim=0</code>和<code>dim=1</code>上操作。</p><p>如果想要<strong>调整GUI窗口大小</strong>，可以这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个窗口并调整大小</span></span><br><span class="line">cv.namedWindow(<span class="string">&quot;02&quot;</span>,cv.WINDOW_NORMAL)</span><br><span class="line">cv.resizeWindow(<span class="string">&quot;02&quot;</span>,Img.shape[<span class="number">1</span>],Img.shape[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># resizeWindow的逻辑顺序应该在imshow之前</span></span><br><span class="line"></span><br><span class="line">cv.imshow(<span class="string">&quot;02&quot;</span>,Img)</span><br><span class="line"></span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="3-2-3-鼠标事件">3.2.3  鼠标事件</h3><p>这里我们要介绍<strong>回调函数</strong>(call back function)，一般情况下应用程序会通过应用编程接口调用系统库的函数，但有些库函数却要求应用程序传回一个函数，这样具有极大的灵活性。</p><p>OpenCV提供了<code>setMousecallback</code>接口，用来预先设置好回调函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetMouseCallback(WindowName,onMouse,param=<span class="literal">None</span>)-&gt;<span class="literal">None</span></span><br></pre></td></tr></table></figure><p>我们可以定义自己的回调函数，请注意，这个函数继承自<code>event</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">MouseCallback</span>(<span class="params">event,x,y,flags,param</span>)</span><br></pre></td></tr></table></figure><p><code>event</code>的枚举类型有：</p><table><thead><tr><th style="text-align:center">Name</th><th style="text-align:center">Value</th><th style="text-align:center">Meaning</th></tr></thead><tbody><tr><td style="text-align:center">EVENT_MOUSEMOVE</td><td style="text-align:center">0</td><td style="text-align:center">滑动</td></tr><tr><td style="text-align:center">EVENT_LBUTTONDOWN</td><td style="text-align:center">1</td><td style="text-align:center">左键点击</td></tr><tr><td style="text-align:center">EVENT_RBUTTONDOWN</td><td style="text-align:center">2</td><td style="text-align:center">右键点击</td></tr><tr><td style="text-align:center">EVENT_MBUTTONDOWN</td><td style="text-align:center">3</td><td style="text-align:center">中键点击</td></tr><tr><td style="text-align:center">EVENT_LBUTTONUP</td><td style="text-align:center">4</td><td style="text-align:center">左键放开</td></tr><tr><td style="text-align:center">EVENT_RBUTTONUP</td><td style="text-align:center">5</td><td style="text-align:center">右键放开</td></tr><tr><td style="text-align:center">EVENT_MBUTTONUP</td><td style="text-align:center">6</td><td style="text-align:center">中键放开</td></tr><tr><td style="text-align:center">EVENT_LBUTTONBLCLK</td><td style="text-align:center">7</td><td style="text-align:center">左键双击</td></tr><tr><td style="text-align:center">EVENT_RBUTTONBLCLK</td><td style="text-align:center">8</td><td style="text-align:center">右键双击</td></tr><tr><td style="text-align:center">EVENT_MBUTTONBLCLK</td><td style="text-align:center">9</td><td style="text-align:center">中键双击</td></tr></tbody></table><p><code>flags</code>的类型有</p><table><thead><tr><th style="text-align:center">Name</th><th style="text-align:center">Value</th><th style="text-align:center">Meaning</th></tr></thead><tbody><tr><td style="text-align:center">EVENT_FLAG_LBUTTON</td><td style="text-align:center">1</td><td style="text-align:center">左键拖拽</td></tr><tr><td style="text-align:center">EVENT_FLAG_RBUTTON</td><td style="text-align:center">2</td><td style="text-align:center">右键拖拽</td></tr><tr><td style="text-align:center">EVENT_FLAG_MBUTTON</td><td style="text-align:center">4</td><td style="text-align:center">中键拖拽</td></tr><tr><td style="text-align:center">EVENT_FLAG_CTRLKEY</td><td style="text-align:center">8</td><td style="text-align:center">ctr</td></tr><tr><td style="text-align:center">EVENT_FLAG_SHIFTKEY</td><td style="text-align:center">16</td><td style="text-align:center">shift</td></tr><tr><td style="text-align:center">EVENT_FLAG_ALTKEY</td><td style="text-align:center">32</td><td style="text-align:center">alt</td></tr></tbody></table><p>现在我们来看个栗子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">img=np.zeros((<span class="number">500</span>,<span class="number">500</span>))</span><br><span class="line"><span class="comment"># 定义回调函数</span></span><br><span class="line">nx,ny=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_circle</span>(<span class="params">event,x,y,flags,param</span>):</span><br><span class="line">    <span class="keyword">global</span> nx,ny</span><br><span class="line">    <span class="keyword">if</span> event==cv.EVENT_LBUTTONDOWN:</span><br><span class="line">        <span class="comment"># 绘制圆</span></span><br><span class="line">        nx,ny=x,y</span><br><span class="line">    <span class="keyword">if</span> event==cv.EVENT_LBUTTONUP:</span><br><span class="line">        cv.circle(img,(nx,ny),<span class="built_in">int</span>(math.sqrt((x-nx)**<span class="number">2</span>+(y-ny)**<span class="number">2</span>)),<span class="number">255</span>,-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">cv.namedWindow(<span class="string">&quot;IMG&quot;</span>)</span><br><span class="line">cv.setMouseCallback(<span class="string">&#x27;IMG&#x27;</span>,draw_circle)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    cv.imshow(<span class="string">&#x27;IMG&#x27;</span>,img)</span><br><span class="line">    n=cv.waitKey(<span class="number">5</span>) <span class="comment"># 获取键盘输入</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> n==<span class="built_in">ord</span>(<span class="string">&#x27;s&#x27;</span>):</span><br><span class="line">        <span class="comment"># 保存</span></span><br><span class="line">        cv.imwrite(<span class="string">&quot;./Files/img5.png&quot;</span>,img)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Save successfully&quot;</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="/2023/03/21/%E3%80%90OpenCV%E3%80%91OpenCV%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20230321234107166.png" alt="image-20230321234107166" style="zoom:50%;"><h3 id="3-2-4-滑动条事件">3.2.4  滑动条事件</h3><p>在OpenCV中，滑动条一般是用来在视频播放帧中选择特定帧。我们一般需要给滑动条创建一个名字，并通过这个名字进行引用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CreateTrackbar(trackbarName,windowName,value,count,onChange)-&gt; None</span><br></pre></td></tr></table></figure><p>滑动条不会挡住父窗口的图像，只会让其变大。<code>value</code>表示当前滑动条的位置，<code>count</code>表示华东的最大值。<code>onChange</code>也是一个回调函数。</p><p>我们现在来看滑动条的回调函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def <span class="title function_">TrackbarCallback</span><span class="params">(pos,userdata)</span></span><br></pre></td></tr></table></figure><p>其中，<code>pos</code>表示滑动块当前位置，<code>userdata</code>表示可选参数。如果不需要，就把<code>onChange</code>设置成<code>None</code>就行了。</p><p>如果我们想获取滑动块的位置，可以是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GetTrackbarPos(Name,WindowName)-&gt;retval</span><br><span class="line"><span class="title function_">SetTrackbarPos</span><span class="params">(Name,WindowName,pos)</span>-&gt;None</span><br></pre></td></tr></table></figure><p>下面我们举个栗子来看如何通过滑动块调节亮度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">alpha=<span class="number">0.3</span></span><br><span class="line">beta=<span class="number">80</span></span><br><span class="line"></span><br><span class="line">img_path=<span class="string">r&quot;./Files/img2.png&quot;</span></span><br><span class="line">img=cv.imread(img_path)</span><br><span class="line">img2=cv.imread(img_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">updateAlpha</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">global</span> alpha,img,img2</span><br><span class="line">    alpha=cv.getTrackbarPos(<span class="string">&#x27;Alpha&#x27;</span>,<span class="string">&#x27;image&#x27;</span>)</span><br><span class="line">    alpha*=<span class="number">0.01</span></span><br><span class="line">    img=np.uint8(np.clip((alpha*img2+beta),<span class="number">0</span>,<span class="number">255</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">updateBeta</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">global</span> beta,img,img2</span><br><span class="line">    beta=cv.getTrackbarPos(<span class="string">&quot;Beta&quot;</span>,<span class="string">&#x27;image&#x27;</span>)</span><br><span class="line">    img=np.uint8(np.clip((alpha*img2+beta),<span class="number">0</span>,<span class="number">255</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建窗口</span></span><br><span class="line">cv.namedWindow(<span class="string">&quot;image&quot;</span>)</span><br><span class="line">cv.createTrackbar(<span class="string">&#x27;Alpha&#x27;</span>,<span class="string">&#x27;image&#x27;</span>,<span class="number">0</span>,<span class="number">300</span>,updateAlpha)</span><br><span class="line">cv.createTrackbar(<span class="string">&#x27;Beta&#x27;</span>,<span class="string">&#x27;image&#x27;</span>,<span class="number">0</span>,<span class="number">255</span>,updateBeta)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认值</span></span><br><span class="line">cv.setTrackbarPos(<span class="string">&#x27;Alpha&#x27;</span>,<span class="string">&#x27;image&#x27;</span>,<span class="number">100</span>)</span><br><span class="line">cv.setTrackbarPos(<span class="string">&#x27;Beta&#x27;</span>,<span class="string">&#x27;image&#x27;</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    cv.imshow(<span class="string">&#x27;image&#x27;</span>,img)</span><br><span class="line">    <span class="keyword">if</span> cv.waitKey(<span class="number">1</span>)==<span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="/2023/03/21/%E3%80%90OpenCV%E3%80%91OpenCV%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20230322003836973.png" alt="image-20230322003836973" style="zoom:50%;"><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">哈哈哈哈哈哈</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="OpenCV" scheme="http://example.com/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>【OpenCV】计算机视觉概述</title>
    <link href="http://example.com/2023/03/20/%E3%80%90OpenCV%E3%80%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E6%A6%82%E8%BF%B0/"/>
    <id>http://example.com/2023/03/20/%E3%80%90OpenCV%E3%80%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E6%A6%82%E8%BF%B0/</id>
    <published>2023-03-20T15:14:01.415Z</published>
    <updated>2023-03-21T09:32:36.032Z</updated>
    
    <content type="html"><![CDATA[<h1>计算机视觉概述</h1><h2 id="1-图像的基本概念">1  图像的基本概念</h2><h3 id="1-1-图像和图形">1.1  图像和图形</h3><p>图像是摄影机、照相机等输入设备捕捉实际的画面产生的数字图像，是由像素构成的位图，是对客观世界的反映。</p><p>而图形呢？图形则是通过数学规则产生的、具有一定规则的团，一般是矢量图。图形通过一组指令集来描述内容，因而不会失真。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">图像</th><th style="text-align:center">图形</th></tr></thead><tbody><tr><td style="text-align:center">产生</td><td style="text-align:center">从真实世界记录</td><td style="text-align:center">由数学规则生成</td></tr><tr><td style="text-align:center">存储</td><td style="text-align:center">点阵值</td><td style="text-align:center">属性</td></tr><tr><td style="text-align:center">类型</td><td style="text-align:center">位图</td><td style="text-align:center">矢量图</td></tr><tr><td style="text-align:center">是否会失真</td><td style="text-align:center">是</td><td style="text-align:center">否</td></tr></tbody></table><hr><h3 id="1-2-数字图像及其特点">1.2  数字图像及其特点</h3><p>数字图像也叫做数码图像或者数位图像，存储方式一般是数组或者矩阵，光照位置和强度都是离散的。数字图像一般是由模拟图像数字化得到，以像素为基本单元。</p><p>一般我们对于数字图像的研究，就是研究其变换算法。</p><p>数字图像具有以下几个特点：</p><p>1️⃣ <strong>信息量大</strong></p><p>一幅图像一般有三个基本属性：长<code>h</code>、宽<code>w</code>、通道<code>c</code>。为了让数字图像逼近真实情况，我们还需要使用额外的空间存储它的色彩信息。例如<code>8-bit</code>图像就表示一个像素点的强度量将会由<code>8</code>个比特控制。所以一幅图像的数据大小为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo>+</mo><mi>h</mi><mo>∗</mo><mi>w</mi><mo>∗</mo><mi>c</mi><mo>∗</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">O+h*w*c*b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4653em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4653em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi></mrow><annotation encoding="application/x-tex">O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span></span>是其他信息，包括文件头、元数据等。</p><p>2️⃣ <strong>占用带宽大</strong></p><p>大的信息量当然要更大的带宽啦~普通电视的标准带宽为<code>6.5MHz</code>，是电话、传真等标准带宽的14倍。</p><p>3️⃣ <strong>相关性大</strong></p><p>图像之间的像素非常不独立，具有很大的相关性！这导致图像信息的压缩潜力非常大！</p><p>4️⃣ <strong>非客观性</strong></p><p>这个特性跟人有关系，最后对图像上的信息做解译的是人，一千个人眼中有一千个哈姆雷特。</p><hr><h3 id="1-3-相关名词介绍">1.3  相关名词介绍</h3><table><thead><tr><th style="text-align:center">名词</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">像素</td><td style="text-align:center">数字图像的基本离散单元</td></tr><tr><td style="text-align:center">分辨率</td><td style="text-align:center">每英寸图像内的像素点数(控制像元大小)</td></tr><tr><td style="text-align:center">灰度级</td><td style="text-align:center">按照对数关系将色彩分级</td></tr><tr><td style="text-align:center">灰度值</td><td style="text-align:center">用于量化图像的亮度</td></tr><tr><td style="text-align:center">深度</td><td style="text-align:center">图像深度指的是存储每个像素的位数，它确定了图像每个像素可能有的颜色数量会灰度级数</td></tr><tr><td style="text-align:center">通道</td><td style="text-align:center">即第三个维度，例如RGB就是三通道，高光谱则有上百个通道</td></tr></tbody></table><hr><h2 id="2-图像噪声">2  图像噪声</h2><p>所谓图像噪声，可以理解为妨碍人的视觉器官或系统传感器对所接受图像源信息进行理解或分析的各种因素。一般的噪声是不可预测的随机信号，可能出现在图像采集、图像处理的全过程。</p><p>图像噪声有很多种，主要有高斯噪声、瑞丽噪声、伽马、脉冲噪声。一般来说，脉冲噪声(椒盐噪声)是最常见的。产生噪声的原因有很多，譬如：</p><ul><li>光和电子的基本性质所引起的噪声</li><li>电器的机械运动产生的噪声</li><li>器材本身产生的噪声</li><li>系统内部产生的噪声</li></ul><blockquote><p>图像噪声的滤除</p></blockquote><p>一般来说，通过图像平滑可以有效减少和消除图像中的噪声，以改善图像质量，抽取对象特征进行分析。</p><p>通常图像滤波和平滑可以分为线性滤波和非线性滤波两种，线性滤波一般通过做离散卷积核来实现，非线性滤波譬如高斯滤波、中值滤波，显然并不对线性这个概念封闭(齐次、数乘)。中值滤波一般用来处理噪声，但也会改变未被噪声污染的像素(均摊了)。</p><h2 id="3-图像处理">3  图像处理</h2><p>图像作为人类感知世界的视觉基础，是人类获取信息、表达信息和传递信息的重要手段，计算机时代所说的图像处理通常是指数字图像处理，最早可以溯源到20世纪20年代，从伦敦通过海底电缆传到纽约的第一张压缩照片。这项技术可以帮助人们更加准确、客观地认识世界，获取更多的信息。</p><h3 id="3-1-图像处理的分类">3.1 图像处理的分类</h3><ul><li>光学模拟处理<ul><li>也称光信息处理，建立在傅里叶光学上</li></ul></li><li>电学模拟处理<ul><li>将光强度信号转化为电信号，成本投入相对较低，具有明显的优势，可以在短时间内完成滤波处理。</li></ul></li><li>计算机数字处理<ul><li>在计算机上，将连续的模拟图像信号转化为离散的数字图像进行处理。</li></ul></li></ul><h3 id="3-2-数字图像处理">3.2  数字图像处理</h3><p>数字图像处理的生命周期包括四个过程：</p><ul><li>图像信息的获取</li><li>图像信息的存储与交换</li><li>图像处理<ul><li>图像预处理</li><li>特征抽取</li><li>识别分析</li></ul></li><li>图像输出与显示</li></ul><h3 id="3-3-图像处理方法">3.3  图像处理方法</h3><p>这一小节我们会介绍图像变换、图像增强、图像分割、图像描述、图像分类和图像重建这几个热点领域。</p><hr><p><strong>图像变换</strong></p><p>进行图像变换的原因在于，离散图像占用的信息量是在太大，对其的操作十分费时和费内存。通过傅里叶变换、沃尔什变换、离散余弦变换等空间转换技术，可以将空域转为变换域处理。在减少计算量的同时，增加了可行的处理手段。</p><p>图像编码压缩也可以属于图像变换的一种，这种方式可以减少描述图像的数据量，节省图像传输、处理时间和占用存储的空间。</p><hr><p><strong>图像增强</strong></p><p>图像增强的目的在于提高图像的质量，比如去除噪声、提高清晰度等。一般来说，图像增强会突出研究人员所感兴趣的部分，例如通过高通滤波强化边缘、低通滤波减少噪声等。在深度学习中，往往需要使用图像增强来模拟多种视角、多种尺度的图像信息，从而提高模型的泛化能力。图像增强是图像预处理中不可或缺的一环，图像预处理的实质在于突出重点信息，抑制无用信息。</p><p>下图是图像增强的一些处理方法</p><img src="/2023/03/20/%E3%80%90OpenCV%E3%80%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E6%A6%82%E8%BF%B0/image-20230321170750055.png" alt="image-20230321170750055" style="zoom:50%;"><hr><p><strong>图像分割</strong></p><p>图像分割是数字图像处理中的关键技术之一，它可以将图像中有意义的特征部分提取出来，包括图像中的边缘、区域，这是进一步进行图像识别、分析和理解的基础。</p><hr><p><strong>图像描述</strong></p><p>图像描述是图像识别和理解的前提。一般来说，图像的描述方法可以有边界描述、区域描述、体积描述、纹理描述、表面描述等。</p><hr><p><strong>图像分类(识别)</strong></p><p>图像分类识别属于模式识别的范畴，主要内容是图像经过预处理后进行图像分割和特征提取，从而进行判决分类。</p><hr><p><strong>图像重建</strong></p><p>对于一些三维物体，可以通过X射线、超声波等物理方法，获取物体内部结构数据，再讲这些数据进行处理而构成物体内部部位的图像。目前最成功的的栗子就是CT(计算机断层扫描成像技术)。</p><h2 id="4-计算机视觉概述">4  计算机视觉概述</h2><p>计算机视觉是一门研究机器如何“看”的科学，换句话说，就是通过摄影机等输入设备代替人眼、计算机代替视觉中枢，从而模拟人类对图像目标的识别与分析。</p><p>计算机视觉本质上是对生物视觉的模拟，核心任务在于对采集的图像或视频数据处理，以获得相应场景的信息。其最终的研究目标，在于使计算机能像人那样通过视觉观察和理解世界，具有自主适应环境的能力。</p><blockquote><p>与相关学科的区别</p></blockquote><ul><li>计算机视觉（Computer Vision）： 计算机视觉是研究如何让计算机模拟人类视觉系统进行处理、理解和解释数字图像或视频的科学。计算机视觉的目标是从视觉数据中提取有意义的信息，并为进一步的决策和处理提供依据。这一领域包括了诸如目标检测、目标跟踪、图像分割、三维重建等多个子领域。</li><li>图像处理（Image Processing）： 图像处理是研究如何对数字图像进行操作和分析的技术。图像处理主要关注对图像的预处理，以便更好地理解和分析图像。这包括图像增强、滤波、去噪、压缩和特征提取等技术。图像处理是计算机视觉的基础技术之一。</li><li>机器视觉（Machine Vision）： 机器视觉主要关注为工业自动化领域提供解决方案。机器视觉系统通常由图像采集设备（如摄像头）、光源、处理器和执行设备组成。机器视觉系统的目标是通过自动化的方式提取图像中的信息，以便用于检测、测量、识别、分类等工业应用。机器视觉通常包含计算机视觉和图像处理技术。</li><li>模式识别（Pattern Recognition）： 模式识别关注的是从原始数据中识别和分类特定模式的问题。模式识别可以应用于多种数据类型，如图像、音频、文本等。该领域主要研究如何设计和优化算法，以实现对不同数据类型中的模式进行识别。计算机视觉和机器视觉都可以看作是模式识别的具体应用场景。</li></ul><p>总结一下，计算机视觉、图像处理、机器视觉和模式识别都涉及到从数据中提取信息的过程，但它们关注的领域和应用场景有所不同。计算机视觉关注对视觉数据的理解和解释，图像处理关注对图像的操作和分析，机器视觉关注工业自动化领域的视觉系统，而模式识别关注从多种数据类型中识别和分类特定模式的问题。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">哈哈哈哈哈哈</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="OpenCV" scheme="http://example.com/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>【PyTorch】PyTorch自动求导</title>
    <link href="http://example.com/2023/03/19/%E3%80%90PyTorch%E3%80%91PyTorch%E8%87%AA%E5%8A%A8%E6%B1%82%E5%AF%BC/"/>
    <id>http://example.com/2023/03/19/%E3%80%90PyTorch%E3%80%91PyTorch%E8%87%AA%E5%8A%A8%E6%B1%82%E5%AF%BC/</id>
    <published>2023-03-19T14:41:40.452Z</published>
    <updated>2023-03-23T12:11:04.861Z</updated>
    
    <content type="html"><![CDATA[<h1>PyTorch自动求导</h1><hr><blockquote><p>PyTorch的自动求导在torch.autograd包中实现。torch.Tensor和torch.Function为autograd包中的两个核心类，他们互相连接并生成一个有向非循环图。</p></blockquote><h2 id="1-1-自动求导要点">1.1  自动求导要点</h2><p><code>autograd</code>包在自动求导时，需要考虑以下事项：</p><ul><li>创建叶子结点的<code>Tensor</code>,使用<code>requires_grad</code>参数指定是否记录对其的操作，以便之后利用<code>backward</code>函数求解。<code>requires_grad</code>参数默认为<code>False</code>，当其为<code>True</code>时，与这个节点相依赖的其他节点也会变成<code>True</code>(这条路径都被污染了)</li><li>通过<code>requires_grad_()</code>方法修改<code>Tensor</code>汇总的<code>requires_grad</code>属性，可以调用<code>.detach()</code>或者<code>with torch.no_grad()</code>不再计算张量的梯度，便于进行评估、测试模型。</li><li>通过运算创建的非叶子结点，会被自动赋予<code>grad_fn</code>属性，表示梯度函数，叶子结点的<code>grad_fn</code>为<code>None</code></li><li>对最后得到的<code>Tensor</code>执行<code>backward</code>函数(反向传播中作为根节点)，会自动计算各变量的梯度，并将累加结果放在<code>grad</code>属性中，当计算完成后，非叶子结点的<code>grad</code>属性会被自动释放</li><li><code>backward</code>函数接收参数，该参数应该与调用该函数的<code>Tensor</code>维度相同，或者是可以广播的维度。如果求导的<code>Tensor</code>是一个标量，<code>backward</code>中的参数可以省略掉</li><li>反向传播的中间缓存会被清空，如果需要进行多次传播，需要指定函数中的参数<code>retain_graph</code>为<code>True</code>。在多次反向传播过程中，梯度是累加的。</li><li>非叶子结点的梯度在被<code>backward()</code>函数调用后就会被清空。</li><li>可以通过<code>torch.no_grad()</code>包裹代码块来阻止<code>autograd</code>去跟踪哪些标记为<code>.requesgrad=True</code>的张量的历史记录。</li></ul><hr><h2 id="1-2-计算图">1.2  计算图</h2><p>在整个过程中，<code>PyTorch</code>采用计算图的形式进行组织，该计算图为动态图，它的计算图在每次正向传播过程中都将重新构建。而其他的架构(TF是后面才引进的)，一般都是静态图。</p><p>计算图是一种有向无环图(DAG)，用来表示算子与变量之间的关系，直观且高效。</p><p>一般来说，圆形表示变量，矩形表示算子。例如表达式<code>z=wx+b</code>，变量为<code>x, w, b</code>，这些变量是用户所创建的，不依赖于其他变量，因此是叶子结点。该表达式的计算图如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph BT;</span><br><span class="line">id1((dz))--&gt;id2[addBackward]</span><br><span class="line">id2--&gt;id3((db))</span><br><span class="line">id2--&gt;id4((dy))</span><br><span class="line">id4--&gt;id5[mulBackward]</span><br><span class="line">id5--&gt;id6((dx))</span><br><span class="line">id5--&gt;id7((dw))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">i1((x))--&gt;o1[mul]</span><br><span class="line">i2((w))--&gt;o1</span><br><span class="line">o1--&gt;i3((y))</span><br><span class="line">i4((b))--&gt;o2[add]</span><br><span class="line">i3--&gt;o2</span><br><span class="line">o2--&gt;i5((z))</span><br></pre></td></tr></table></figure><p><img src="/2023/03/19/%E3%80%90PyTorch%E3%80%91PyTorch%E8%87%AA%E5%8A%A8%E6%B1%82%E5%AF%BC/image-20230319231749030.png" alt="image-20230319231749030"></p><p>在这个过程中，叶子节点为<code>x,w,b</code>，非叶节点为<code>z, y</code>。</p><p>当嗲用<code>backward()</code>函数后，<code>autograd</code>会从根节点<code>z</code>进行反向溯源，并根据链式法则计算每个叶子结点的梯度，并<strong>累加</strong>到<code>grad</code>属性汇总。对于非叶子结点或算子的操作记录在<code>grad_fn</code>中，叶子结点的<code>grad_fn</code>为<code>None</code>。</p><hr><h2 id="1-3-反向传播">1.3  反向传播</h2><blockquote><p>标量反向</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">torch.autograd.backward(tensor,grad_tensors=<span class="literal">None</span>,retain_graph=<span class="literal">None</span>,create_graph=<span class="literal">False</span>,grad_variables=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tensor 是用于计算的张良</span></span><br><span class="line"><span class="comment"># grad_tensors 是用来计算非标量的梯度，形状需要与tensor保持一致</span></span><br><span class="line"><span class="comment"># retain_graph 重复利用计算图</span></span><br><span class="line"><span class="comment"># create_graph 计算更高阶段梯度</span></span><br></pre></td></tr></table></figure><p>对标量的<code>backward</code>无需指定参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">x=torch.Tensor([<span class="number">2</span>])</span><br><span class="line">w=torch.randn(<span class="number">1</span>,requires_grad=<span class="literal">True</span>)</span><br><span class="line">b=torch.randn(<span class="number">1</span>,requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">y=torch.matmul(w,x)</span><br><span class="line">z=torch.add(y,b)</span><br><span class="line"></span><br><span class="line">z.backward()</span><br><span class="line"><span class="built_in">print</span>(w.grad)</span><br><span class="line"><span class="built_in">print</span>(b.grad)</span><br></pre></td></tr></table></figure><blockquote><p>非标量反向</p></blockquote><p>PyTorch不允许张量对张量求导，需要采用标量对张量进行求导，因此，如果目标张量对一个非标量调用<code>backward</code>，需要传入一个<code>gradient</code>参数，该参数也是张量，形状要跟调用<code>backward</code>的张量相同。</p><p>这个参数负责乘以需要求导参数的雅可比矩阵。</p><p>举个例子，我们有：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><mn>2</mn><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><mn>3</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>y</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>y</mi><mn>1</mn></msub><mo>=</mo><msubsup><mi>x</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><mn>3</mn><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo>=</mo><msubsup><mi>x</mi><mn>2</mn><mn>2</mn></msubsup><mo>+</mo><mn>2</mn><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x=(x_1=2,x_2=3),y=(y_1=x^2_1+3x_2,y_2=x_2^2+2x_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">3</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>那么对张量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>求雅可比矩阵(一阶偏导)，得到的结果为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">ȷ</mi><mo>=</mo><mrow><mo fence="true">∣</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>y</mi><mn>1</mn></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mn>1</mn></msub></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>y</mi><mn>1</mn></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mn>2</mn></msub></mrow></mfrac></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>y</mi><mn>2</mn></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mn>1</mn></msub></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>y</mi><mn>2</mn></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mn>2</mn></msub></mrow></mfrac></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow><mo>=</mo><mrow><mo fence="true">∣</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>2</mn><msub><mi>x</mi><mn>1</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>2</mn><msub><mi>x</mi><mn>2</mn></msub></mrow></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow></mrow><annotation encoding="application/x-tex">\jmath=\begin{vmatrix}\frac{\partial y_1}{\partial x_1} &amp; \frac{\partial y_1}{\partial x_2}\\\frac{\partial y_2}{\partial x_1}&amp;\frac{\partial y_2}{\partial x_2}\end{vmatrix}=\begin{vmatrix}2x_1&amp;3\\2&amp;2x_2\end{vmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.012em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.762em;"><span style="top:-2.566em;"><span class="pstrut" style="height:3.816em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.164em;"><span class="pstrut" style="height:3.816em;"></span><span style="height:1.816em;width:0.3333em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.3333em" height="1.816em" style="width:0.3333em" viewbox="0 0 333.33000000000004 1816" preserveaspectratio="xMinYMin"><path d="M145 0 H188 V1816 H145z M145 0 H188 V1816 H145z"/></svg></span></span><span style="top:-4.972em;"><span class="pstrut" style="height:3.816em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6273em;"><span style="top:-3.6951em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.3178em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1273em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6273em;"><span style="top:-3.6951em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.3178em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1273em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.762em;"><span style="top:-2.566em;"><span class="pstrut" style="height:3.816em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.164em;"><span class="pstrut" style="height:3.816em;"></span><span style="height:1.816em;width:0.3333em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.3333em" height="1.816em" style="width:0.3333em" viewbox="0 0 333.33000000000004 1816" preserveaspectratio="xMinYMin"><path d="M145 0 H188 V1816 H145z M145 0 H188 V1816 H145z"/></svg></span></span><span style="top:-4.972em;"><span class="pstrut" style="height:3.816em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.412em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.462em;"><span style="top:-2.266em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.864em;"><span class="pstrut" style="height:3.216em;"></span><span style="height:1.216em;width:0.3333em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.3333em" height="1.216em" style="width:0.3333em" viewbox="0 0 333.33000000000004 1216" preserveaspectratio="xMinYMin"><path d="M145 0 H188 V1216 H145z M145 0 H188 V1216 H145z"/></svg></span></span><span style="top:-4.072em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.462em;"><span style="top:-2.266em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.864em;"><span class="pstrut" style="height:3.216em;"></span><span style="height:1.216em;width:0.3333em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.3333em" height="1.216em" style="width:0.3333em" viewbox="0 0 333.33000000000004 1216" preserveaspectratio="xMinYMin"><path d="M145 0 H188 V1216 H145z M145 0 H188 V1216 H145z"/></svg></span></span><span style="top:-4.072em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>当<code>x=[2,3]</code>时，有：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">ȷ</mi><mo>=</mo><mrow><mo fence="true">∣</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>6</mn></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow><mspace linebreak="newline"></mspace><mspace linebreak="newline"></mspace><msup><mi mathvariant="normal">ȷ</mi><mi>T</mi></msup><mo>=</mo><mrow><mo fence="true">∣</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>6</mn></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow></mrow><annotation encoding="application/x-tex">\jmath=\begin{vmatrix}4&amp;3\\2&amp;6\end{vmatrix}\\\\\jmath^T=\begin{vmatrix}4&amp;2\\3&amp;6\end{vmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.412em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.462em;"><span style="top:-2.266em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.864em;"><span class="pstrut" style="height:3.216em;"></span><span style="height:1.216em;width:0.3333em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.3333em" height="1.216em" style="width:0.3333em" viewbox="0 0 333.33000000000004 1216" preserveaspectratio="xMinYMin"><path d="M145 0 H188 V1216 H145z M145 0 H188 V1216 H145z"/></svg></span></span><span style="top:-4.072em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.462em;"><span style="top:-2.266em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.864em;"><span class="pstrut" style="height:3.216em;"></span><span style="height:1.216em;width:0.3333em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.3333em" height="1.216em" style="width:0.3333em" viewbox="0 0 333.33000000000004 1216" preserveaspectratio="xMinYMin"><path d="M145 0 H188 V1216 H145z M145 0 H188 V1216 H145z"/></svg></span></span><span style="top:-4.072em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.0858em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal"></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.412em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.462em;"><span style="top:-2.266em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.864em;"><span class="pstrut" style="height:3.216em;"></span><span style="height:1.216em;width:0.3333em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.3333em" height="1.216em" style="width:0.3333em" viewbox="0 0 333.33000000000004 1216" preserveaspectratio="xMinYMin"><path d="M145 0 H188 V1216 H145z M145 0 H188 V1216 H145z"/></svg></span></span><span style="top:-4.072em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.462em;"><span style="top:-2.266em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.864em;"><span class="pstrut" style="height:3.216em;"></span><span style="height:1.216em;width:0.3333em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.3333em" height="1.216em" style="width:0.3333em" viewbox="0 0 333.33000000000004 1216" preserveaspectratio="xMinYMin"><path d="M145 0 H188 V1216 H145z M145 0 H188 V1216 H145z"/></svg></span></span><span style="top:-4.072em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>由于不支持Tensor对Tensor的求导，所以我们借助额外的向量，将其转化为标量对向量的求导。例如向量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><msup><mo stretchy="false">]</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">[0,1]^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>，我们可以得到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">ȷ</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mo stretchy="false">[</mo><mn>2</mn><mo separator="true">,</mo><mn>6</mn><msup><mo stretchy="false">]</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">\jmath[1]=[2 ,6]^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal"></span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0913em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">6</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>，这表示<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>y</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">y_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>求导的梯度。同样，采用向量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn><msup><mo stretchy="false">]</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">[1,0]^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>表示<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>y</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">y_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>的梯度。</p><p>用个例子看一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">x=torch.tensor([[<span class="number">2</span>,<span class="number">3</span>]],dtype=torch.<span class="built_in">float</span>,requires_grad=<span class="literal">True</span>)</span><br><span class="line">j=torch.zeros(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">y=torch.zeros(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">y[<span class="number">0</span>,<span class="number">0</span>]=x[<span class="number">0</span>][<span class="number">0</span>]**<span class="number">2</span>+<span class="number">3</span>*x[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">y[<span class="number">0</span>,<span class="number">1</span>]=x[<span class="number">0</span>][<span class="number">1</span>]**<span class="number">2</span>+<span class="number">2</span>*x[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算y_1梯度</span></span><br><span class="line">y.backward(torch.Tensor([[<span class="number">1</span>,<span class="number">0</span>]]),retain_graph=<span class="literal">True</span>) <span class="comment"># 不释放图，咱等会还要用</span></span><br><span class="line">j[<span class="number">0</span>]=x.grad</span><br><span class="line">x.grad=torch.zeros_like(x.grad)</span><br><span class="line"></span><br><span class="line">y.backward(torch.Tensor([[<span class="number">0</span>,<span class="number">1</span>]]))</span><br><span class="line">j[<span class="number">1</span>]=x.grad</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(j)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">tensor([[4., 3.],</span></span><br><span class="line"><span class="string">        [2., 6.]])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-4-生命周期">1.4  生命周期</h2><img src="/2023/03/19/%E3%80%90PyTorch%E3%80%91PyTorch%E8%87%AA%E5%8A%A8%E6%B1%82%E5%AF%BC/image-20230323200359329.png" alt="image-20230323200359329" style="zoom:50%;"><hr><h2 id="1-5-切断分支的反向传播">1.5  切断分支的反向传播</h2><p>训练过程中，有时候我们想保持一部分的网络参数不变，而支队其中一部分的参数进行调整，只训练部分分支，那么这时候就可以通过<code>detach()</code>函数来切断一些分支的反向传播。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">detach_()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将节点设置为叶子，requires_grad=False grad_fn=None</span></span><br></pre></td></tr></table></figure><p>这个怎么说呢，比如<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">y=x^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi><mo>=</mo><mi>y</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">z=yx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">x</span></span></span></span>，此时我们想把<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>视为常数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span>，也就是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>z</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">\frac{\partial z}{\partial x}=c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span>，可以用以下的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">x=torch.ones(<span class="number">2</span>,requires_grad=<span class="literal">True</span>)</span><br><span class="line">y=x**<span class="number">2</span>+<span class="number">3</span></span><br><span class="line">c=y.detach_()</span><br><span class="line">z=y*x</span><br><span class="line">z.<span class="built_in">sum</span>().backward()</span><br><span class="line"><span class="built_in">print</span>(x.grad==c)</span><br><span class="line"><span class="built_in">print</span>(x.grad)</span><br><span class="line"></span><br><span class="line">tensor([<span class="literal">True</span>, <span class="literal">True</span>])</span><br><span class="line">tensor([<span class="number">4.</span>, <span class="number">4.</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果我们不用detach，得到的结果就应该是：<code>3*2+3=6</code>了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">x=torch.ones(<span class="number">2</span>,requires_grad=<span class="literal">True</span>)</span><br><span class="line">y=x**<span class="number">2</span>+<span class="number">3</span></span><br><span class="line"><span class="comment"># c=y.detach_()</span></span><br><span class="line">z=y*x</span><br><span class="line">z.<span class="built_in">sum</span>().backward()</span><br><span class="line"><span class="built_in">print</span>(x.grad)</span><br><span class="line"></span><br><span class="line">tensor([<span class="number">6.</span>, <span class="number">6.</span>])</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">PyTorch自动求导</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="PyTorch" scheme="http://example.com/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>Pandas写入多个Sheet以及np.mat用法</title>
    <link href="http://example.com/2023/02/08/%E3%80%90Python%E3%80%91%E5%90%8C%E6%97%B6%E5%A1%AB%E5%85%A5SheetName/"/>
    <id>http://example.com/2023/02/08/%E3%80%90Python%E3%80%91%E5%90%8C%E6%97%B6%E5%A1%AB%E5%85%A5SheetName/</id>
    <published>2023-02-07T16:01:03.170Z</published>
    <updated>2023-02-07T16:06:54.764Z</updated>
    
    <content type="html"><![CDATA[<p>原生的<code>pd.to_excel</code>会覆写，我们需要用到<code>pd.ExcelWriter</code>。</p><p>like：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> pd.ExcelWriter(p,mode=<span class="string">&quot;a&quot;</span>,engine=<span class="string">&quot;openpyxl&quot;</span>) <span class="keyword">as</span> writer:</span><br><span class="line">    df=[pd.DataFrame(i) <span class="keyword">for</span> i <span class="keyword">in</span> Record_List]</span><br><span class="line">    <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(years):</span><br><span class="line">        df[i].to_excel(writer,sheet_name=<span class="built_in">str</span>(j))</span><br></pre></td></tr></table></figure><p>当然，在之前必须保证这个文件的存在。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pandas.core.frame <span class="keyword">import</span> DataFrame</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># urban_pop,rural_pop,NF,CF为m*1矩阵,</span></span><br><span class="line"><span class="comment"># urban_prot,rural_pop,ncf,Redi为数值,</span></span><br><span class="line"><span class="comment"># AN,WP,CP,CA为m*n矩阵,</span></span><br><span class="line"><span class="comment"># ANI,ANI,ANO,PW,NF,PC为n*1矩阵。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">caculate_NANI</span>(<span class="params">urban_pop,rural_pop,urban_prot,rural_prot,AN,ANI,ANO,Redi,CP,PC,NF,CF,rN,CA,Ndep</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Map</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">float</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line">    Nhc = urban_pop.T*urban_prot+rural_pop.T*rural_prot</span><br><span class="line">    Nlc = np.dot(AN*(<span class="number">10e5</span>), ANI)</span><br><span class="line">    Nlp = np.dot(AN*(<span class="number">10e5</span>), (ANI-ANO))*Redi</span><br><span class="line">    Ncp = np.dot(CP*(<span class="number">10e5</span>), PC)</span><br><span class="line">    Nfer = N*(<span class="number">10e5</span>) + CF*(<span class="number">10e5</span>)*rN</span><br><span class="line">    Ncro = np.dot(CA*<span class="number">10</span>, NF)</span><br><span class="line">    Nim = Nhc + Nlc - Nlp - Ncp</span><br><span class="line">    NANI = Nim+Nfer+Ncro+Ndep</span><br><span class="line">    <span class="keyword">return</span> NANI,&#123;<span class="string">&quot;Nhc&quot;</span>:<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:<span class="built_in">float</span>(x),Nhc)),<span class="string">&quot;Nlc&quot;</span>:<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:<span class="built_in">float</span>(x),Nlc)),</span><br><span class="line">                 <span class="string">&quot;Nlp&quot;</span>:Map(Nlp),<span class="string">&quot;Ncp&quot;</span>:Map(Ncp),<span class="string">&quot;Nfer&quot;</span>:Map(Nfer),<span class="string">&quot;Ncro&quot;</span>:Map(Ncro),<span class="string">&quot;Nim&quot;</span>:Map(Nim),<span class="string">&quot;NANI&quot;</span>:Map(NANI)&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    years = [<span class="number">1990</span>, <span class="number">2000</span>, <span class="number">2010</span>, <span class="number">2020</span>]</span><br><span class="line">    <span class="comment"># years = [1990,2000]</span></span><br><span class="line">    root = <span class="string">r&#x27;C:\Users\lenovo\Documents\Tencent Files\651421775\FileRecv\新建文件夹 (2)\\&#x27;</span>  <span class="comment"># 数据存放目录路径</span></span><br><span class="line">    Record_path=<span class="string">r&quot;G:\\&quot;</span> <span class="comment"># 中间变量输出位置</span></span><br><span class="line">    file_paths = [os.path.join(root,<span class="built_in">str</span>(i))+<span class="string">&quot;.xlsx&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> years]</span><br><span class="line">    all_list = []</span><br><span class="line">    urban_prot = <span class="number">4.77</span></span><br><span class="line">    rural_prot = <span class="number">4.31</span></span><br><span class="line">    Redi = <span class="number">0.9</span></span><br><span class="line">    rN = <span class="number">0.1285</span></span><br><span class="line">    ANI = np.mat([<span class="number">66.75</span>, <span class="number">44.80</span>, <span class="number">18.00</span>, <span class="number">18.00</span>, <span class="number">9.5</span>, <span class="number">14.5</span>, <span class="number">14.4</span>]).T</span><br><span class="line">    ANO = np.mat([<span class="number">58.51</span>, <span class="number">40.00</span>, <span class="number">15.15</span>, <span class="number">9.59</span>, <span class="number">7.21</span>, <span class="number">5.69</span>, <span class="number">5.69</span>]).T</span><br><span class="line">    PC = np.mat([<span class="number">12.6</span>, <span class="number">21.3</span>, <span class="number">13.0</span>, <span class="number">66.2</span>, <span class="number">2.0</span>, <span class="number">39.7</span>, <span class="number">12.2</span>, <span class="number">2.8</span>, <span class="number">1.5</span>, <span class="number">1.8</span>]).T</span><br><span class="line">    NF = np.mat([<span class="number">3700</span>, <span class="number">9600</span>, <span class="number">8000</span>, <span class="number">1500</span>, <span class="number">1500</span>]).T</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(p:=(Record_path+<span class="string">&quot;process.xlsx&quot;</span>)):</span><br><span class="line">        os.remove(p)</span><br><span class="line"></span><br><span class="line">    pd.DataFrame([]).to_excel(p)</span><br><span class="line">    Record_List=[]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(file_paths)):</span><br><span class="line"></span><br><span class="line">        data = pd.read_excel(file_paths[i])</span><br><span class="line">        urban_pop, rural_pop = np.mat(data[<span class="string">&#x27;城镇人口&#x27;</span>]), np.mat(data[<span class="string">&#x27;农村人口&#x27;</span>])</span><br><span class="line">        AN, CP, CA = np.mat(data.values[:, <span class="number">4</span>:<span class="number">11</span>]), np.mat(data.values[:, <span class="number">11</span>:<span class="number">21</span>]), np.mat(data.values[:, <span class="number">23</span>:<span class="number">28</span>])</span><br><span class="line">        N = np.mat(data[<span class="string">&#x27;氮肥&#x27;</span>]).T</span><br><span class="line">        CF = np.mat(data[<span class="string">&#x27;复合肥&#x27;</span>]).T</span><br><span class="line">        Ndep = np.mat(data[<span class="string">&#x27;大气氮沉降&#x27;</span>]).T</span><br><span class="line">        NANI,Record = caculate_NANI(urban_pop,rural_pop,urban_prot,rural_prot,AN,ANI,ANO,Redi,CP,PC,NF,CF,rN,CA,Ndep)</span><br><span class="line">        NANI_list=[<span class="built_in">float</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> NANI]</span><br><span class="line">        Record_List.append(Record)</span><br><span class="line">        all_list.append(NANI_list)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> pd.ExcelWriter(p,mode=<span class="string">&quot;a&quot;</span>,engine=<span class="string">&quot;openpyxl&quot;</span>) <span class="keyword">as</span> writer:</span><br><span class="line">        df=[pd.DataFrame(i) <span class="keyword">for</span> i <span class="keyword">in</span> Record_List]</span><br><span class="line">        <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(years):</span><br><span class="line">            df[i].to_excel(writer,sheet_name=<span class="built_in">str</span>(j))</span><br><span class="line"></span><br><span class="line">    df_data = &#123;<span class="string">&quot;省域&quot;</span>: <span class="built_in">list</span>(data[<span class="string">&#x27;省域&#x27;</span>]), <span class="string">&quot;1990&quot;</span>: all_list[<span class="number">0</span>], <span class="string">&quot;2000&quot;</span>: all_list[<span class="number">1</span>], <span class="string">&quot;2010&quot;</span>: all_list[<span class="number">2</span>], <span class="string">&quot;2020&quot;</span>: all_list[<span class="number">3</span>]&#125;</span><br><span class="line">    df = DataFrame(df_data)</span><br><span class="line">    df.to_excel(<span class="string">r&quot;G:\new.xlsx&quot;</span>)  <span class="comment"># 保存结果路径</span></span><br></pre></td></tr></table></figure><p>Numpy的矩阵乘法用于处理数据时，一般是这样操作：</p><ul><li>读取列<code>A=np.mat(data.values[:,5:15])</code></li><li>写入权重或者对应矩阵<code>w=[i for i in range(10)]</code></li><li>做矩阵乘法<code>np.dot(A,w.T)</code>，也就是<code>Aw=b</code></li><li>这样每一列都被乘上了权重。</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">Pandas写入多个Sheet以及np.mat用法</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
</feed>
