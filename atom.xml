<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>岁染</title>
  <icon>https://www.gravatar.com/avatar/7228219e90ece9b38ea5921da1fcc500</icon>
  <subtitle>别来无恙，你在心上</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-10-17T08:16:42.718Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Kagura</name>
    <email>651421775@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>海洋遥感EOF分析</title>
    <link href="http://example.com/2022/10/15/%E3%80%90%E6%B5%B7%E6%B4%8B%E9%81%A5%E6%84%9F%E3%80%91EOF%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2022/10/15/%E3%80%90%E6%B5%B7%E6%B4%8B%E9%81%A5%E6%84%9F%E3%80%91EOF%E5%88%86%E6%9E%90/</id>
    <published>2022-10-15T12:55:29.748Z</published>
    <updated>2022-10-17T08:16:42.718Z</updated>
    
    <content type="html"><![CDATA[<h1>Nino SST Indices</h1><hr><p>Niño 3.4 (5N-5S, 170W-120W): Niño 3.4异常可以被认为代表从日变线左右到南美海岸横跨太平洋的赤道海温平均水平。Niño 3.4指数通常使用5个月的运行平均值，当Niño 3.4 sst连续6个月或以上超过±0.4℃时，则定义El Niño或La Niña事件。</p><p>经验正交函数分析方法(Empirical Orthogonal Function,缩写为EOF)，也称特征向量分析(Eigenvector Analysis)，或者主成分分析(Principal Component Analysis,缩写PCA)，是一种分析<a href="https://baike.baidu.com/item/%E7%9F%A9%E9%98%B5/18069?fromModule=lemma_inlink">矩阵</a>数据中的结构特征，提取主要数据特征量的一种方法。Lorenz在1950年代首次将其引入气象和气候研究，在地学及水声学等其他学科中得到了非常广泛的应用。地学数据分析中通常特征向量对应的是空间样本，所以也称空间特征向量或者空间模态；主成分对应的是时间变化，也称时间系数。因此地学中也将EOF分析称为时空分解。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>F</mi><mo>=</mo><mi>E</mi><mi>O</mi><mi>F</mi><mo>×</mo><mi>P</mi><mi>C</mi><mo>+</mo><mi>M</mi><mi>e</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">F=EOF\times PC+Mean</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">EOF</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">PC</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">e</span><span class="mord mathnormal">an</span></span></span></span></span></p><p>算法解释如下：</p><p><strong>Input</strong></p><p><code>time*(map)</code>矩阵，行表示时间，列表示空间</p><p><strong>Output</strong></p><p><code>EOF</code>空间模态，<code>PC</code>时间模态</p><p><strong>Step</strong></p><p>0️⃣ 预处理：经度处理</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>F</mi><mo>=</mo><msqrt><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>l</mi><mi>a</mi><mi>t</mi><mo stretchy="false">)</mo></mrow></msqrt></mrow><annotation encoding="application/x-tex">F=\sqrt{cos(lat)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.2561em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9839em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord mathnormal">cos</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span><span style="top:-2.9439em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.28em" viewbox="0 0 400000 1296" preserveaspectratio="xMinYMin slice"><path d="M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2561em;"><span></span></span></span></span></span></span></span></span></span></p><p>这一步的目的是计算协方差达到：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>C</mi><mo>=</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>l</mi><mi>a</mi><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C=cos(lat)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">cos</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></span></p><p>的效果。</p><p>本质上是因为分带在不同维度上的面积会发生变化，需要通过角度进行修正。</p><p>1️⃣ 计算矩阵距平</p><p>这步是主成分分析的关键，不利用距平的话在数学意义上就无法通过协方差矩阵进行特征分解。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>F</mi><mo>=</mo><mo stretchy="false">(</mo><mi>F</mi><mo>−</mo><mi>M</mi><mi>e</mi><mi>a</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F=(F-Mean)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">e</span><span class="mord mathnormal">an</span><span class="mclose">)</span></span></span></span></span></p><p>2️⃣ 计算协方差矩阵</p><p>在相互独立的正交基上对原始矩阵进行空间变换，寻求方差最大的部分</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>C</mi><mo>=</mo><mi>c</mi><mi>o</mi><mi>v</mi><mo stretchy="false">(</mo><mi>F</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C=cov(F)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">co</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mclose">)</span></span></span></span></span></p><p>3️⃣ 计算特征值和特征向量</p><p>特征值和特征向量分别表示了正交基上的缩放倍数和正交基，我们选取方差上最大的缩放倍数，也就是最大的特征值来对原始空间进行变换，得到的新数据能够保留最大的信息量。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mi>O</mi><mi>F</mi><mo separator="true">,</mo><mi>L</mi><mo>=</mo><mi>e</mi><mi>i</mi><mi>g</mi><mo stretchy="false">(</mo><mi>C</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">EOF,L=eig(C)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">EOF</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span></span></span></span></span></p><p>这个特征向量就是我们的<code>EOF</code>空间模态。</p><p>4️⃣计算时间模态</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mi>C</mi><mo>=</mo><mi>E</mi><mi>O</mi><msup><mi>F</mi><mi>T</mi></msup><mo>×</mo><mo stretchy="false">(</mo><mi>F</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">PC=EOF^T\times(F)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">PC</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9747em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">EO</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mclose">)</span></span></span></span></span></p><p>原始数据在新的向量空间上的变换，那就是主成分PC，在这里也就是我们的时间特征。</p><hr><p>结果如下：</p><p>空间模态:</p><img src="/2022/10/15/%E3%80%90%E6%B5%B7%E6%B4%8B%E9%81%A5%E6%84%9F%E3%80%91EOF%E5%88%86%E6%9E%90/image-20221015205552316.png" alt="image-20221015205552316" style="zoom: 33%;"><img src="/2022/10/15/%E3%80%90%E6%B5%B7%E6%B4%8B%E9%81%A5%E6%84%9F%E3%80%91EOF%E5%88%86%E6%9E%90/image-20221015205611304.png" alt="image-20221015205611304" style="zoom: 33%;"><p>对应的时间特征：</p><img src="/2022/10/15/%E3%80%90%E6%B5%B7%E6%B4%8B%E9%81%A5%E6%84%9F%E3%80%91EOF%E5%88%86%E6%9E%90/image-20221015205651316.png" alt="image-20221015205651316" style="zoom: 33%;"><img src="/2022/10/15/%E3%80%90%E6%B5%B7%E6%B4%8B%E9%81%A5%E6%84%9F%E3%80%91EOF%E5%88%86%E6%9E%90/image-20221015205733048.png" alt="image-20221015205733048" style="zoom: 33%;"><p>我们选择<code>Nino 3.4</code>指数进行相关性判别：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">PC1</th><th style="text-align:center">PC2</th><th style="text-align:center">NIno</th></tr></thead><tbody><tr><td style="text-align:center">PC1</td><td style="text-align:center">1</td><td style="text-align:center">4.17e-09</td><td style="text-align:center">-0.142</td></tr><tr><td style="text-align:center">PC2</td><td style="text-align:center">4.17e-09</td><td style="text-align:center">1</td><td style="text-align:center">0.831</td></tr><tr><td style="text-align:center">Nino</td><td style="text-align:center">-0.142</td><td style="text-align:center">0.831</td><td style="text-align:center">1</td></tr></tbody></table><p>可以发现，<code>PC2</code>与<code>NIno 3.4</code>指数具有强相关性<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo>≥</mo><mn>0.8</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\ge0.8)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0.8</span><span class="mclose">)</span></span></span></span>,可以用来探究厄尔尼诺现象。</p><p>我们也绘制了每个月的空间气候直方图，可以看到，有些月份的直方图具有明显的高峰和聚集程度。</p><hr><p><img src="/2022/10/15/%E3%80%90%E6%B5%B7%E6%B4%8B%E9%81%A5%E6%84%9F%E3%80%91EOF%E5%88%86%E6%9E%90/GIF.gif" alt="GIF"></p><p>年份箱线图变化趋势</p><p>例如：07年全球温度变化跨度最大，14年气温最高，98年气温比较集中且相对较低，数据量集中分布与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">Q_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和中位数之间，以低温为主，高温为辅，但96年的时候，相对高温地区(高于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">Q_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)较多。</p><p><img src="/2022/10/15/%E3%80%90%E6%B5%B7%E6%B4%8B%E9%81%A5%E6%84%9F%E3%80%91EOF%E5%88%86%E6%9E%90/%E4%B8%8B%E8%BD%BD.png" alt="下载"></p><hr><p>空间自相关指数</p><p>API代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用空间统计量Moran和Geary计算遥感数据的自相关程度</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getMoranV</span>(<span class="params">path,val=<span class="number">1</span>,t=<span class="number">0</span>,method=<span class="string">&quot;Moran&quot;</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    :param path: 图像路径</span></span><br><span class="line"><span class="string">    :param t: 卷积核类型</span></span><br><span class="line"><span class="string">    :param method: 空间自相关方法</span></span><br><span class="line"><span class="string">    :param val: 空间权重</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 读取数据</span></span><br><span class="line">    wb1 = path</span><br><span class="line">    data = wb1.values</span><br><span class="line">    n, m = wb1.shape</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义卷积核</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># queen 卷积</span></span><br><span class="line">    dir2 = [[<span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, -<span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, -<span class="number">1</span>], [-<span class="number">1</span>, <span class="number">1</span>], [-<span class="number">1</span>, -<span class="number">1</span>]]</span><br><span class="line">    <span class="comment"># Rook 卷积</span></span><br><span class="line">    dir1 = [[<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>], [-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, -<span class="number">1</span>]]</span><br><span class="line">    <span class="comment"># Bishop 卷积</span></span><br><span class="line">    dir3=[[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,-<span class="number">1</span>],[-<span class="number">1</span>,<span class="number">1</span>],[-<span class="number">1</span>,-<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> t==<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">dir</span>=dir1</span><br><span class="line">    <span class="keyword">elif</span> t==<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">dir</span>=dir2</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">dir</span>=dir3</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开辟O(n^4)权重矩阵</span></span><br><span class="line">    <span class="comment"># 这玩意很耗内存，所以可以考虑用局部计算代替全局计算</span></span><br><span class="line">    a = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n*m)]</span><br><span class="line">    a_weight=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="comment"># 找到他在二维上的临界点</span></span><br><span class="line">            loc=i*m+j</span><br><span class="line">            <span class="keyword">for</span> detX, detY <span class="keyword">in</span> <span class="built_in">dir</span>:</span><br><span class="line">                x = i + detX</span><br><span class="line">                y = j + detY</span><br><span class="line">                <span class="comment"># 转化为一维</span></span><br><span class="line">                <span class="comment"># 边界处理</span></span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span> &lt;= x &lt; n <span class="keyword">and</span> <span class="number">0</span> &lt;= y &lt; m:</span><br><span class="line">                    a[loc].append([x,y,val])</span><br><span class="line">                    a_weight+=val</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">moranIndex</span>(<span class="params">data,weight</span>):</span><br><span class="line">        <span class="comment"># 莫兰指数计算</span></span><br><span class="line">        <span class="comment"># s_0=np.sum(np.sum(weight))</span></span><br><span class="line">        s_0=a_weight</span><br><span class="line">        n,m=<span class="built_in">len</span>(data),<span class="built_in">len</span>(data[<span class="number">0</span>])</span><br><span class="line">        x_hat=np.mean(data)</span><br><span class="line">        up_sum=<span class="number">0</span></span><br><span class="line">        down_sum=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">                <span class="comment"># 下一轮</span></span><br><span class="line">                loc=i*m+j</span><br><span class="line">                <span class="keyword">for</span> v <span class="keyword">in</span> weight[loc]:</span><br><span class="line">                    up_sum+=v[<span class="number">2</span>]*(data[i][j]-x_hat)*(data[v[<span class="number">0</span>]][v[<span class="number">1</span>]]-x_hat)</span><br><span class="line">                down_sum+=(data[i][j]-x_hat)**<span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> (n*m/s_0)*(up_sum/down_sum)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Geary_C</span>(<span class="params">data,weight</span>):</span><br><span class="line">        <span class="comment"># Geary&#x27;s C计算</span></span><br><span class="line">        s_0=a_weight*<span class="number">2</span></span><br><span class="line">        n, m = <span class="built_in">len</span>(data), <span class="built_in">len</span>(data[<span class="number">0</span>])</span><br><span class="line">        x_hat = np.mean(data)</span><br><span class="line">        up_sum = <span class="number">0</span></span><br><span class="line">        down_sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">                <span class="comment"># 下一轮</span></span><br><span class="line">                loc = i * m + j</span><br><span class="line">                <span class="keyword">for</span> v <span class="keyword">in</span> weight[loc]:</span><br><span class="line"></span><br><span class="line">                    up_sum += v[<span class="number">2</span>] * (data[i][j] - data[v[<span class="number">0</span>]][v[<span class="number">1</span>]])**<span class="number">2</span></span><br><span class="line">                down_sum += (data[i][j] - x_hat) ** <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> ((n*m-<span class="number">1</span>)/(s_0))*(up_sum/down_sum)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (M:=method.upper())==<span class="string">&quot;MORAN&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> moranIndex(data,a)</span><br><span class="line">    <span class="keyword">elif</span> M==<span class="string">&quot;GEARY&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> Geary_C(data,a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getHelp</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Method: &#123;&#x27;Moran&#x27;,&#x27;Geary&#x27;&#125;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;t: &#123;0:Rook,1:Queen,2:bishop&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    getHelp()</span><br><span class="line">    path = <span class="string">r&quot;\data.xlsx&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;墨兰指数为: %s&quot;</span>%getMoranV(path,val=<span class="number">1</span>,t=<span class="number">0</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Geary&#x27;s C为: %s&quot;</span>%getMoranV(path,val=<span class="number">1</span>,t=<span class="number">0</span>,method=<span class="string">&quot;Geary&quot;</span>))</span><br></pre></td></tr></table></figure><p><strong>处理</strong></p><p>逐月遍历数据即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(data.shape[<span class="number">0</span>]): </span><br><span class="line">    <span class="type">List</span>.append(getMoranV(pd.DataFrame(data[i]),val=<span class="number">1</span>,t=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p><strong>结果可视化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">6</span>))</span><br><span class="line">plt.plot(<span class="built_in">range</span>((v:=data.shape[<span class="number">0</span>])),<span class="type">List</span>,<span class="string">&#x27;r-&#x27;</span>)</span><br><span class="line">Mean=<span class="built_in">sum</span>(<span class="type">List</span>)/(<span class="built_in">len</span>(<span class="type">List</span>))</span><br><span class="line">plt.plot(<span class="built_in">range</span>(v),[Mean]*v,<span class="string">&#x27;b&#x27;</span>,linestyle=<span class="string">&#x27;--&#x27;</span>,alpha=<span class="number">0.2</span>)</span><br><span class="line">plt.title(<span class="string">&quot;基于Queen邻接的SST空间自相关月变化&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;时间&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;日期&quot;</span>)</span><br><span class="line">T=[]</span><br><span class="line">M,Y=<span class="number">1</span>,<span class="number">1990</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">360</span>):</span><br><span class="line">    T.append(<span class="string">&quot;%s年%s月&quot;</span>%(Y,M))</span><br><span class="line">    <span class="keyword">if</span> M%<span class="number">12</span>==<span class="number">0</span>:</span><br><span class="line">        M=<span class="number">1</span></span><br><span class="line">        Y+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        M+=<span class="number">1</span></span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="number">360</span>)[::<span class="number">20</span>],T[::<span class="number">20</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2022/10/15/%E3%80%90%E6%B5%B7%E6%B4%8B%E9%81%A5%E6%84%9F%E3%80%91EOF%E5%88%86%E6%9E%90/%E4%B8%8B%E8%BD%BD-1665994586589-4.png" alt="下载"></p><hr><p><strong>绘制逐月动图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>=[[]]</span><br><span class="line">t=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> t&lt;data.shape[<span class="number">0</span>]:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="type">List</span>[-<span class="number">1</span>])==<span class="number">12</span>:</span><br><span class="line">        <span class="type">List</span>.append([])</span><br><span class="line">    <span class="type">List</span>[-<span class="number">1</span>].append(getMoranV(pd.DataFrame(data[t]),val=<span class="number">1</span>,t=<span class="number">1</span>))</span><br><span class="line">    t+=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>我们通过二维列表的方式对年份加以区分，这也是常见的手段。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逐年绘制</span></span><br><span class="line">path=<span class="string">r&quot;\yourpath&quot;</span></span><br><span class="line">timeList=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="type">List</span>)):</span><br><span class="line">    lis=<span class="type">List</span>[i]</span><br><span class="line">    plt.figure(figsize=(<span class="number">20</span>,<span class="number">6</span>))</span><br><span class="line">    plt.plot(<span class="built_in">range</span>(<span class="number">12</span>),lis,<span class="string">&#x27;r-&#x27;</span>)</span><br><span class="line">    Mean=<span class="built_in">sum</span>(lis)/<span class="number">12</span></span><br><span class="line">    plt.plot(<span class="built_in">range</span>(<span class="number">12</span>),[Mean]*<span class="number">12</span>,<span class="string">&#x27;b&#x27;</span>,linestyle=<span class="string">&#x27;--&#x27;</span>,alpha=<span class="number">0.2</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;%s年&quot;</span>%(i+<span class="number">1990</span>))</span><br><span class="line">    plt.xticks(<span class="built_in">range</span>(<span class="number">12</span>),[<span class="string">&quot;%s月&quot;</span>%(m+<span class="number">1</span>) <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>)])</span><br><span class="line">    plt.savefig((val:=path+<span class="string">&quot;\\&quot;</span>+<span class="string">&quot;%s.png&quot;</span>%i),dpi=<span class="number">200</span>)</span><br><span class="line">    timeList.append(val)</span><br></pre></td></tr></table></figure><p>接着就是正常的绘制，我们需要将图像存储下来，并记录存储位置。</p><p>通过<code>imageio</code>模块制作动图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">IMG=[]</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> imageio</span><br><span class="line">path=<span class="string">r&quot;\yourpath&quot;</span></span><br><span class="line">lis=os.listdir(path)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lis:</span><br><span class="line">    <span class="keyword">if</span> i.endswith(<span class="string">&quot;.png&quot;</span>):</span><br><span class="line">        IMG.append(imageio.imread(path+<span class="string">&quot;\\&quot;</span>+i))</span><br><span class="line">imageio.mimsave(path+<span class="string">&quot;\\&quot;</span>+<span class="string">&quot;GIF1.gif&quot;</span>,IMG,<span class="string">&quot;GIF&quot;</span>,duration=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p><img src="/2022/10/15/%E3%80%90%E6%B5%B7%E6%B4%8B%E9%81%A5%E6%84%9F%E3%80%91EOF%E5%88%86%E6%9E%90/GIF1.gif" alt="GIF1"></p><p><img src="/2022/10/15/%E3%80%90%E6%B5%B7%E6%B4%8B%E9%81%A5%E6%84%9F%E3%80%91EOF%E5%88%86%E6%9E%90/GIF2.gif" alt="GIF2"></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">海洋遥感</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="海洋遥感" scheme="http://example.com/tags/%E6%B5%B7%E6%B4%8B%E9%81%A5%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>100个句子</title>
    <link href="http://example.com/2022/10/12/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91100%E4%B8%AA%E5%8F%A5%E5%AD%90/"/>
    <id>http://example.com/2022/10/12/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91100%E4%B8%AA%E5%8F%A5%E5%AD%90/</id>
    <published>2022-10-12T14:35:34.196Z</published>
    <updated>2022-10-13T12:48:26.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id="One-Hundred-Sentence">One Hundred Sentence</h2><hr><p>1️⃣ There is considerable debate over how we should react if we detect  a signal from an alien civilisation,</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;One-Hundred-Sentence&quot;&gt;One Hundred Sentence&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;1️⃣ There is considerable debate over how we should react if we detect  a si</summary>
      
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="英语" scheme="http://example.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>【数据分析】Chapter 3. 回归分析</title>
    <link href="http://example.com/2022/10/11/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91%E5%9B%9E%E5%BD%92/"/>
    <id>http://example.com/2022/10/11/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91%E5%9B%9E%E5%BD%92/</id>
    <published>2022-10-11T08:17:22.475Z</published>
    <updated>2022-10-11T12:58:17.678Z</updated>
    
    <content type="html"><![CDATA[<h1>回归分析</h1><hr><blockquote><p>回归分析的核心在于确定变量之间存在着的<strong>函数关系</strong></p></blockquote><p>各个变量之间可以分为确定关系和非确定关系(相对关系)，我们要做的就是对这种关系进行<strong>建模和解释</strong>。</p><p>其主要流程可以解释如下：</p><ul><li>收集一组包含因变量和自变量的数据</li><li>根据因变量和自变量之间的关系，初步设定回归模型</li><li>求解合理的回归系数</li><li>进行相关性检验，确定相关系数</li><li>利用模型对因变量做出预测或解释，并计算预测值的置信区间。</li></ul><hr><h2 id="一、一元线性回归分析">一、一元线性回归分析</h2><p>表达式如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>+</mo><mi>ε</mi><mo>=</mo><msub><mi>β</mi><mn>0</mn></msub><mo>+</mo><msub><mi>β</mi><mn>1</mn></msub><mi>x</mi><mo>+</mo><mi>ε</mi></mrow><annotation encoding="application/x-tex">y=f(x,\theta)+\varepsilon=\beta_0+\beta_1x+\varepsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ε</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ε</span></span></span></span></span></p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ε</mi></mrow><annotation encoding="application/x-tex">\varepsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ε</span></span></span></span>表示<strong>误差</strong>项，其期望<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mi>ε</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">E(\varepsilon)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal">ε</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>，方差等于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><mi>ε</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>σ</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">D(\varepsilon)=\sigma^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathnormal">ε</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>β</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">\beta_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为常数项，也称为<strong>截距</strong>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>β</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">\beta_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为<strong>斜率</strong>。</p><p>求解参数的主流方法有<code>最小二乘法</code>、<code>最大似然法</code>、<code>矩方法</code>。下面介绍最小二乘法。</p><p>最小二乘法(Least Squares Estimation,LSE)通过最小化误差的平方和来寻找数据的最佳匹配。</p><p>我们定义残差平方和(Residual Sum of Squares,RSS),<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">△</mi><mi>y</mi><mo>=</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mover accent="true"><mi>y</mi><mo>^</mo></mover><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\triangle y=(y-\hat y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">△</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1944em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span>表示残差：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>Q</mi><mo stretchy="false">(</mo><msub><mi>β</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>β</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><msub><mover accent="true"><mi>y</mi><mo>^</mo></mover><mi>i</mi></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mspace linebreak="newline"></mspace><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><msub><mover accent="true"><mi>β</mi><mo>^</mo></mover><mn>0</mn></msub><mo>−</mo><msub><mover accent="true"><mi>β</mi><mo>^</mo></mover><mn>1</mn></msub><msub><mi>x</mi><mi>i</mi></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">Q(\beta_0,\beta_1)=\sum_{i=1}^n(y_i-\hat y_i)^2\\=\sum_{i=1}^n(y_i-\hat\beta_0-\hat\beta_1x_i)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">Q</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1944em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1523em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2079em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>根据微积分知识，这玩意的极值点应该在导数为0的时候取得，我们对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span></span></span></span>求偏导，得到：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mfrac><mrow><mi>σ</mi><mi>Q</mi></mrow><mrow><mi>σ</mi><msub><mover accent="true"><mi>β</mi><mo>^</mo></mover><mn>0</mn></msub></mrow></mfrac><mo>=</mo><mo>−</mo><mn>2</mn><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo stretchy="false">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><msub><mover accent="true"><mi>β</mi><mo>^</mo></mover><mn>0</mn></msub><mo>−</mo><msub><mover accent="true"><mi>β</mi><mo>^</mo></mover><mn>1</mn></msub><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mfrac><mrow><mi>σ</mi><mi>Q</mi></mrow><mrow><mi>σ</mi><msub><mover accent="true"><mi>β</mi><mo>^</mo></mover><mn>1</mn></msub></mrow></mfrac><mo>=</mo><mo>−</mo><mn>2</mn><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo stretchy="false">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><msub><mover accent="true"><mi>β</mi><mo>^</mo></mover><mn>0</mn></msub><mo>−</mo><msub><mover accent="true"><mi>β</mi><mo>^</mo></mover><mn>1</mn></msub><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><msub><mi>x</mi><mi>i</mi></msub></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}\frac{\sigma Q}{\sigma \hat\beta_0}=-2\sum_{i=1}^n(y_i-\hat\beta_0-\hat\beta_1x_i)\\\frac{\sigma Q}{\sigma \hat\beta_1}=-2\sum_{i=1}^n(y_i-\hat\beta_0-\hat\beta_1x_i)x_i\\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.2492em;vertical-align:-1.3746em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8746em;"><span style="top:-3.8746em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9244em;"><span style="top:-2.5195em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="mord mtight"><span class="mord accent mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span></span><span style="top:-2.9634em;"><span class="pstrut" style="height:2.7em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord mtight">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.0528em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="mord mathnormal mtight">Q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6166em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mord">2</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9244em;"><span style="top:-2.5195em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="mord mtight"><span class="mord accent mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span></span><span style="top:-2.9634em;"><span class="pstrut" style="height:2.7em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord mtight">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.0528em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="mord mathnormal mtight">Q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6166em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mord">2</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3746em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>求解方程组得到：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mover accent="true"><mi>β</mi><mo>^</mo></mover><mn>0</mn></msub><mo>=</mo><mover accent="true"><mi>y</mi><mo>ˉ</mo></mover><mo>−</mo><msub><mover accent="true"><mi>β</mi><mo>^</mo></mover><mn>1</mn></msub><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mover accent="true"><mi>β</mi><mo>^</mo></mover><mn>1</mn></msub><mo>=</mo><mfrac><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>y</mi><mo>ˉ</mo></mover><mo stretchy="false">)</mo></mrow><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}\hat\beta_0=\bar y-\hat\beta_1\bar x\\\hat\beta_1=\frac{\sum_{i=1}^n(x_i-\bar x)(y_i-\bar y)}{\sum_{i=1}^n(x_i-\bar x)^2}\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.07em;vertical-align:-1.285em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.785em;"><span style="top:-3.837em;"><span class="pstrut" style="height:3.06em;"></span><span class="mord"><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1944em;"><span class="mord">ˉ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span></span></span><span style="top:-2.345em;"><span class="pstrut" style="height:3.06em;"></span><span class="mord"><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.06em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7047em;"><span style="top:-2.1786em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-2.8971em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3214em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord accent mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mathnormal mtight">x</span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord mtight">ˉ</span></span></span></span></span></span></span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.535em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7385em;"><span style="top:-2.1786em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3214em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord accent mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mathnormal mtight">x</span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord mtight">ˉ</span></span></span></span></span></span></span><span class="mclose mtight">)</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord accent mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="accent-body" style="left:-0.1944em;"><span class="mord mtight">ˉ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.57em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.285em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>将其带入方程，即可得到最佳拟合曲线。</p><p><strong>误差估计</strong></p><p>SSE：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msubsup><mi>e</mi><mi>i</mi><mn>2</mn></msubsup><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><msub><mover accent="true"><mi>y</mi><mo>^</mo></mover><mi>i</mi></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sum_{i=1}^ne_i^2=\sum_{i=1}^n(y_i-\hat y_i)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1944em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>MSE是对SSE的无偏估计量</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>σ</mi><mn>2</mn></msup><mo>=</mo><mfrac><mrow><mi>S</mi><mi>S</mi><mi>E</mi></mrow><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></mfrac><mo>=</mo><mi>M</mi><mi>S</mi><mi>E</mi></mrow><annotation encoding="application/x-tex">\sigma^2=\frac{SSE}{n-2}=MSE</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1297em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">SSE</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">MSE</span></span></span></span></span></p><h3 id="Python实现一元线性回归">Python实现一元线性回归</h3><p><strong>Step 1️⃣ 数据准备</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据集</span></span><br><span class="line">iris=load_iris()</span><br><span class="line">data=pd.DataFrame(iris.data)</span><br><span class="line">data.columns=[<span class="string">&#x27;sepal-length&#x27;</span>,<span class="string">&#x27;sepal-width&#x27;</span>,<span class="string">&#x27;petal-length&#x27;</span>,<span class="string">&#x27;petal-width&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(data.head())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   sepal-length  sepal-width  petal-length  petal-width</span><br><span class="line"><span class="number">0</span>           <span class="number">5.1</span>          <span class="number">3.5</span>           <span class="number">1.4</span>          <span class="number">0.2</span></span><br><span class="line"><span class="number">1</span>           <span class="number">4.9</span>          <span class="number">3.0</span>           <span class="number">1.4</span>          <span class="number">0.2</span></span><br><span class="line"><span class="number">2</span>           <span class="number">4.7</span>          <span class="number">3.2</span>           <span class="number">1.3</span>          <span class="number">0.2</span></span><br><span class="line"><span class="number">3</span>           <span class="number">4.6</span>          <span class="number">3.1</span>           <span class="number">1.5</span>          <span class="number">0.2</span></span><br><span class="line"><span class="number">4</span>           <span class="number">5.0</span>          <span class="number">3.6</span>           <span class="number">1.4</span>          <span class="number">0.2</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用scikit-learn完成回归</span></span><br><span class="line">x=data[<span class="string">&#x27;petal-length&#x27;</span>].values</span><br><span class="line">y=data[<span class="string">&#x27;petal-width&#x27;</span>].values</span><br><span class="line">x=x.reshape(<span class="built_in">len</span>(x),<span class="number">1</span>)</span><br><span class="line">y=y.reshape(<span class="built_in">len</span>(y),<span class="number">1</span>)</span><br><span class="line">clf=LinearRegression()</span><br><span class="line">clf.fit(x,y)</span><br><span class="line">pre=clf.predict(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制图形</span></span><br><span class="line">plt.scatter(x,y,s=<span class="number">50</span>)</span><br><span class="line">plt.plot(x,pre,<span class="string">&#x27;r-&#x27;</span>,linewidth=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;petal-length&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;petal-wdith&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> idx,m <span class="keyword">in</span> <span class="built_in">enumerate</span>(x):</span><br><span class="line">    <span class="comment"># 绘制长条</span></span><br><span class="line">    <span class="comment"># 从(m,y[idx])到(m,pre[idx])</span></span><br><span class="line">    plt.plot([m,m],[y[idx],pre[idx]],<span class="string">&#x27;g-&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2022/10/11/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91%E5%9B%9E%E5%BD%92/image-20221011172111955.png" alt="image-20221011172111955" style="zoom:50%;"><p><strong>step 2️⃣ 显示回归参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;斜率&quot;</span>,clf.coef_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;截距&quot;</span>,clf.intercept_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;MSE&quot;</span>,np.mean((y-pre)**<span class="number">2</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">斜率 [[<span class="number">0.41575542</span>]]</span><br><span class="line">截距 [-<span class="number">0.36307552</span>]</span><br><span class="line">MSE <span class="number">0.04206730919499318</span></span><br></pre></td></tr></table></figure><p><strong>step 3️⃣ 进行预测</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(clf.predict([[<span class="number">3.9</span>]]))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">1.2583706</span>]]</span><br></pre></td></tr></table></figure><hr><h2 id="二、多元线性回归">二、多元线性回归</h2><p>也就是有多个参数啦。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据集</span></span><br><span class="line">d=load_boston()</span><br><span class="line">data=pd.DataFrame(d.data)</span><br><span class="line">data[<span class="string">&#x27;price&#x27;</span>]=d.target</span><br><span class="line"><span class="built_in">print</span>(data.sample(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">            <span class="number">0</span>    <span class="number">1</span>      <span class="number">2</span>    <span class="number">3</span>      <span class="number">4</span>  ...      <span class="number">9</span>    <span class="number">10</span>      <span class="number">11</span>     <span class="number">12</span>  price</span><br><span class="line"><span class="number">373</span>  <span class="number">11.10810</span>  <span class="number">0.0</span>  <span class="number">18.10</span>  <span class="number">0.0</span>  <span class="number">0.668</span>  ...  <span class="number">666.0</span>  <span class="number">20.2</span>  <span class="number">396.90</span>  <span class="number">34.77</span>   <span class="number">13.8</span></span><br><span class="line"><span class="number">491</span>   <span class="number">0.10574</span>  <span class="number">0.0</span>  <span class="number">27.74</span>  <span class="number">0.0</span>  <span class="number">0.609</span>  ...  <span class="number">711.0</span>  <span class="number">20.1</span>  <span class="number">390.11</span>  <span class="number">18.07</span>   <span class="number">13.6</span></span><br><span class="line"><span class="number">91</span>    <span class="number">0.03932</span>  <span class="number">0.0</span>   <span class="number">3.41</span>  <span class="number">0.0</span>  <span class="number">0.489</span>  ...  <span class="number">270.0</span>  <span class="number">17.8</span>  <span class="number">393.55</span>   <span class="number">8.20</span>   <span class="number">22.0</span></span><br><span class="line"><span class="number">363</span>   <span class="number">4.22239</span>  <span class="number">0.0</span>  <span class="number">18.10</span>  <span class="number">1.0</span>  <span class="number">0.770</span>  ...  <span class="number">666.0</span>  <span class="number">20.2</span>  <span class="number">353.04</span>  <span class="number">14.64</span>   <span class="number">16.8</span></span><br><span class="line"><span class="number">322</span>   <span class="number">0.35114</span>  <span class="number">0.0</span>   <span class="number">7.38</span>  <span class="number">0.0</span>  <span class="number">0.493</span>  ...  <span class="number">287.0</span>  <span class="number">19.6</span>  <span class="number">396.90</span>   <span class="number">7.70</span>   <span class="number">20.4</span></span><br><span class="line"></span><br><span class="line">[<span class="number">5</span> rows x <span class="number">14</span> columns]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>多元线性回归</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">y=d.target</span><br><span class="line">x=d.data</span><br><span class="line">clf=LinearRegression()</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="comment"># 分割训练集</span></span><br><span class="line">x_train,x_test,y_train,y_test=train_test_split(x,y)</span><br><span class="line">clf.fit(x_train,y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;多元线性回归模型参数&quot;</span>,clf.coef_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;多元线性回归模型常数项&quot;</span>,clf.intercept_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;预测&quot;</span>,clf.predict([x_test[<span class="number">0</span>]]))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">多元线性回归模型参数 [-<span class="number">1.11747256e-01</span>  <span class="number">4.05201935e-02</span> -<span class="number">6.69439553e-04</span>  <span class="number">3.34919157e+00</span></span><br><span class="line"> -<span class="number">1.83818082e+01</span>  <span class="number">3.95199967e+00</span> -<span class="number">9.12733246e-03</span> -<span class="number">1.31523502e+00</span></span><br><span class="line">  <span class="number">2.44628300e-01</span> -<span class="number">1.08309725e-02</span> -<span class="number">1.00522555e+00</span>  <span class="number">7.56771086e-03</span></span><br><span class="line"> -<span class="number">4.23492114e-01</span>]</span><br><span class="line">多元线性回归模型常数项 <span class="number">36.524193135861886</span></span><br><span class="line">预测 [<span class="number">15.9054318</span>]</span><br></pre></td></tr></table></figure><p><strong>模型分析</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">y_predict=clf.predict(x_test)</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_absolute_error</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> r2_score</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;预测值均方误差&quot;</span>,mean_squared_error(y_test,y_predict))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;R2得分&quot;</span>,r2_score(y_test,y_predict))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;回归得分&quot;</span>,clf.score(x_test,y_test))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;各个特征间的系数矩阵&quot;</span>,clf.coef_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;影响房价的特征排序&quot;</span>,np.argsort(clf.coef_))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;影响房价的特征排序&quot;</span>,d.feature_names[np.argsort(clf.coef_)])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">预测值均方误差 <span class="number">26.66065801123315</span></span><br><span class="line">R2得分 <span class="number">0.7170059315243467</span></span><br><span class="line">回归得分 <span class="number">0.7170059315243467</span></span><br><span class="line">各个特征间的系数矩阵 [-<span class="number">1.24752898e-01</span>  <span class="number">4.23381228e-02</span>  <span class="number">7.89030069e-03</span>  <span class="number">2.76191464e+00</span></span><br><span class="line"> -<span class="number">1.86055326e+01</span>  <span class="number">3.76015663e+00</span> -<span class="number">3.25002550e-03</span> -<span class="number">1.49233753e+00</span></span><br><span class="line">  <span class="number">3.12843628e-01</span> -<span class="number">1.40160600e-02</span> -<span class="number">8.47213267e-01</span>  <span class="number">7.64996205e-03</span></span><br><span class="line"> -<span class="number">5.32883469e-01</span>]</span><br><span class="line">影响房价的特征排序 [ <span class="number">4</span>  <span class="number">7</span> <span class="number">10</span> <span class="number">12</span>  <span class="number">0</span>  <span class="number">9</span>  <span class="number">6</span> <span class="number">11</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">8</span>  <span class="number">3</span>  <span class="number">5</span>]</span><br><span class="line">影响房价的特征排序 [<span class="string">&#x27;NOX&#x27;</span> <span class="string">&#x27;DIS&#x27;</span> <span class="string">&#x27;PTRATIO&#x27;</span> <span class="string">&#x27;LSTAT&#x27;</span> <span class="string">&#x27;CRIM&#x27;</span> <span class="string">&#x27;TAX&#x27;</span> <span class="string">&#x27;AGE&#x27;</span> <span class="string">&#x27;B&#x27;</span> <span class="string">&#x27;INDUS&#x27;</span> <span class="string">&#x27;ZN&#x27;</span> <span class="string">&#x27;RAD&#x27;</span></span><br><span class="line"> <span class="string">&#x27;CHAS&#x27;</span> <span class="string">&#x27;RM&#x27;</span>]</span><br></pre></td></tr></table></figure><hr><h2 id="三、逻辑回归">三、逻辑回归</h2><blockquote><p>如果说线性回归偏向数学，那么逻辑回归就是机器学习从统计领域借鉴来的技术</p></blockquote><p>逻辑回归用来分析二分类或有序的因变量与解释变量之间的关系，算是广义上的线性回归分析方法。他在线性回归的基础上利用<code>Sigmoid</code>函数对事件发生的概率进行预测。</p><p>线性回归可以得到一个预测值，然后通过S函数封装后，就能得到一个概率值，再通过概率值进行<strong>分类</strong>。(上清下浊)</p><p><code>Sigmoid</code>的函数能够将任意值转化为[0,1]范围内，其定义如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>z</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">g(z)=\frac{1}{1+e^{-z}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0908em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6973em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>我们来看下函数曲线</p><p>宏观尺度</p><img src="/2022/10/11/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91%E5%9B%9E%E5%BD%92/image-20221011180841230.png" alt="image-20221011180841230" style="zoom:50%;"><p>微观尺度</p><img src="/2022/10/11/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91%E5%9B%9E%E5%BD%92/image-20221011181213717.png" alt="image-20221011181213717" style="zoom:50%;"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid</span>(<span class="params">x</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="number">1.</span>/(<span class="number">1.</span>+np.exp(-x))</span><br></pre></td></tr></table></figure><h3 id="Python-实现">Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">x=load_iris().data</span><br><span class="line">y=load_iris().target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 归一化</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=<span class="number">0.25</span>,random_state=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line">sc=StandardScaler()</span><br><span class="line">x_train=sc.fit_transform(x_train)</span><br><span class="line">x_test=sc.transform(x_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行逻辑回归</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line">classifier=LogisticRegression(random_state=<span class="number">0</span>)</span><br><span class="line">classifier.fit(x_train,y_train)</span><br><span class="line">y_pred=classifier.predict(x_test)</span><br><span class="line"><span class="comment"># 测试准确性</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Accuracy of LR %.3f&quot;</span>%classifier.score(x_test,y_test))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accuracy of LR <span class="number">0.974</span></span><br></pre></td></tr></table></figure><p>我们可以看一下经过逻辑回归后的数据：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>这是个多分类的回归。</p><hr><h2 id="四、多项式回归">四、多项式回归</h2><p>适用于非线性关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 线性回归</span></span><br><span class="line">lin_reg=LinearRegression()</span><br><span class="line">lin_reg.fit(X,y)</span><br><span class="line">y_pre=lin_reg.predict(X)</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span></span><br><span class="line">ax[<span class="number">1</span>].scatter(x,y)</span><br><span class="line">ax[<span class="number">1</span>].plot(x,y_pre,color=<span class="string">&quot;r&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多项式回归</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> PolynomialFeatures</span><br><span class="line">POLY=PolynomialFeatures(degree=<span class="number">2</span>) <span class="comment"># 设置最多几次幂</span></span><br><span class="line">POLY.fit(X)</span><br><span class="line">x2=POLY.transform(X)</span><br><span class="line"><span class="comment"># 这个多项式回归是对x进行处理后，让其成为非线性关系</span></span><br><span class="line"><span class="comment"># 譬如：</span></span><br><span class="line"><span class="built_in">print</span>(x.shape)</span><br><span class="line"><span class="built_in">print</span>(x2.shape)</span><br><span class="line"><span class="comment"># (100,)</span></span><br><span class="line"><span class="comment"># (100, 3)</span></span><br><span class="line"><span class="comment"># 之后的操作与LR完全相同，所以Polynomial并没有作为独立的API</span></span><br><span class="line"><span class="comment"># 而是放在preprocessing</span></span><br><span class="line">lin_reg2=LinearRegression()</span><br><span class="line">lin_reg2.fit(x2,y)</span><br><span class="line">y_pre2=lin_reg2.predict(x2)</span><br><span class="line"></span><br><span class="line">ax[<span class="number">2</span>].scatter(x,y)</span><br><span class="line"><span class="comment"># 此时的关系并不再是原先的对应了</span></span><br><span class="line">ax[<span class="number">2</span>].plot(np.sort(x),y_pre2[np.argsort(x)],color=<span class="string">&quot;b&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># degree调成10 后</span></span><br><span class="line">POLY=PolynomialFeatures(degree=<span class="number">10</span>) <span class="comment"># 设置最多几次幂</span></span><br><span class="line">POLY.fit(X)</span><br><span class="line">x2=POLY.transform(X)</span><br><span class="line"><span class="comment"># 这个多项式回归是对x进行处理后，让其成为非线性关系</span></span><br><span class="line"><span class="comment"># 譬如：</span></span><br><span class="line"><span class="built_in">print</span>(x.shape)</span><br><span class="line"><span class="built_in">print</span>(x2.shape)</span><br><span class="line"><span class="comment"># (100,)</span></span><br><span class="line"><span class="comment"># (100, 11)</span></span><br><span class="line"><span class="comment"># 之后的操作与LR完全相同，所以Polynomial并没有作为独立的API</span></span><br><span class="line"><span class="comment"># 而是放在preprocessing</span></span><br><span class="line">lin_reg2=LinearRegression()</span><br><span class="line">lin_reg2.fit(x2,y)</span><br><span class="line">y_pre2=lin_reg2.predict(x2)</span><br><span class="line">ax[<span class="number">3</span>].scatter(x,y)</span><br><span class="line">ax[<span class="number">3</span>].plot(np.sort(x),y_pre2[np.argsort(x)],color=<span class="string">&quot;g&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2022/10/11/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91%E5%9B%9E%E5%BD%92/image-20221011191449277.png" alt="image-20221011191449277" style="zoom:50%;"><hr><h2 id="五、岭回归">五、岭回归</h2><p>岭回归(Ridge Regression)是一种专用于共线性数据分析的有偏估计回归方法，实质上是改良的最小二乘法。通过放弃无偏性，降低部分信息为代价，使回归系数更加可靠，对病态数据的耐受性远高于最小二乘法。</p><p>通常的岭回归是在顺势函数中加入L2正则项：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>L</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mi>N</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">;</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>−</mo><msub><mi>y</mi><mi>i</mi></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mfrac><mi>λ</mi><mn>2</mn></mfrac><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>θ</mi><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">L(\theta)=\frac{1}{N}\sum_{i=1}^N(f(x_i;\theta)-y_i)^2+\frac{\lambda}{2}||\theta||^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.106em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0574em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">λ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∣∣</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>θ</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">||\theta||</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣∣</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mord">∣∣</span></span></span></span>表示向量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">L2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span><span class="mord">2</span></span></span></span>范数。岭回归的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">R^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>往往会小于线性回归，但其具有更强的泛化能力，也能解决线性回归汇总的不可逆问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Ridge,RidgeCV</span><br><span class="line"><span class="comment"># Ridge CV是广义交叉验证的岭回归</span></span><br><span class="line">X,y=load_iris(return_X_y=<span class="literal">True</span>)</span><br><span class="line">x=X[:,<span class="number">1</span>].reshape(<span class="built_in">len</span>(X),-<span class="number">1</span>)</span><br><span class="line">y=X[:,<span class="number">0</span>].reshape(<span class="built_in">len</span>(X),-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">model=Ridge(alpha=<span class="number">0.5</span>)</span><br><span class="line">model1=RidgeCV(alphas=[<span class="number">0.1</span>,<span class="number">1.0</span>,<span class="number">10.0</span>]) <span class="comment"># cross validation</span></span><br><span class="line"></span><br><span class="line">model.fit(x,y)</span><br><span class="line">model1.fit(x,y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;系数矩阵&quot;</span>,model.coef_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;线性回归模型&quot;</span>,model)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;CV最优alpha值&quot;</span>,model1.alpha_)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型预测</span></span><br><span class="line">pre=model.predict(x)</span><br><span class="line">plt.scatter(x,y)</span><br><span class="line">plt.plot(x,pre)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">系数矩阵 [[-<span class="number">0.2194842</span>]]</span><br><span class="line">线性回归模型 Ridge(alpha=<span class="number">0.5</span>)</span><br><span class="line">CV最优alpha值 <span class="number">10.0</span></span><br></pre></td></tr></table></figure><img src="/2022/10/11/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91%E5%9B%9E%E5%BD%92/image-20221011192944017.png" alt="image-20221011192944017" style="zoom:50%;"><hr><h2 id="六、Lasso回归">六、Lasso回归</h2><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">L2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span><span class="mord">2</span></span></span></span>正则只能削弱影响，而不能剔除变量。Lasso(Least Absolute Shrinkage and Selection Operator)模型将惩罚项换为了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">L1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span><span class="mord">1</span></span></span></span>正则，从而达到剔除变量的作用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> r2_score</span><br><span class="line"><span class="comment"># 产生一些稀疏数据</span></span><br><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line">n_samples,n_features=<span class="number">50</span>,<span class="number">100</span></span><br><span class="line"></span><br><span class="line">X=np.random.randn(n_samples,n_features)</span><br><span class="line">coef=<span class="number">3</span>*np.random.randn(n_features) <span class="comment"># 每个特征对应一个系数</span></span><br><span class="line"></span><br><span class="line">inds=np.arange(n_features)</span><br><span class="line">np.random.shuffle(inds)</span><br><span class="line">coef[inds[<span class="number">10</span>:]]=<span class="number">0</span> <span class="comment"># 随机将向量中的10个变为0 稀疏化</span></span><br><span class="line">y=np.dot(X,coef)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加高斯噪声</span></span><br><span class="line">y+=<span class="number">0.01</span>*np.random.normal(size=n_samples)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分数据集</span></span><br><span class="line">n_samples=X.shape[<span class="number">0</span>]</span><br><span class="line">X_train,y_train=X[:n_samples//<span class="number">2</span>],y[:n_samples//<span class="number">2</span>]</span><br><span class="line">X_test,y_test=X[n_samples//<span class="number">2</span>:],y[n_samples//<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练Lasson模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Lasso</span><br><span class="line">alpha=<span class="number">0.1</span></span><br><span class="line">lass=Lasso(alpha=alpha)</span><br><span class="line">y_pre=lass.fit(X_train,y_train).predict(X_test)</span><br><span class="line">r2_score_lasso=r2_score(y_test,y_pre)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;R^2 socre&quot;</span>,r2_score_lasso)</span><br><span class="line">plt.plot(lass.coef_,color=<span class="string">&#x27;gold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Lasso R^2 %s&quot;</span>%r2_score_lasso)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2022/10/11/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91%E5%9B%9E%E5%BD%92/image-20221011200249640.png" alt="image-20221011200249640" style="zoom:50%;"><hr><h2 id="回归案例–波士顿数据处理">回归案例–波士顿数据处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression,SGDRegressor,Ridge,Lasso</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error,accuracy_score</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">linearModel</span>():</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. load dataset</span></span><br><span class="line">    X,y=load_boston(return_X_y=<span class="literal">True</span>)</span><br><span class="line">    X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=<span class="number">0.25</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. Standard</span></span><br><span class="line">    std=StandardScaler()</span><br><span class="line">    X_train=std.fit_transform(X_train)</span><br><span class="line">    X_test=std.transform(X_test)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加维度</span></span><br><span class="line">    <span class="comment"># y=y[:,np.newaxis]</span></span><br><span class="line">    y_test=y_test[:,np.newaxis]</span><br><span class="line">    y_train=y_train[:,np.newaxis]</span><br><span class="line"></span><br><span class="line">    std_y=StandardScaler()</span><br><span class="line">    y_train=std_y.fit_transform(y_train)</span><br><span class="line">    y_test=std_y.transform(y_test)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. training</span></span><br><span class="line"></span><br><span class="line">    lr=LinearRegression()</span><br><span class="line">    sgd=SGDRegressor()</span><br><span class="line">    rid=Ridge(alpha=<span class="number">0.5</span>)</span><br><span class="line">    las=Lasso(alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    lr.fit(X_train,y_train)</span><br><span class="line">    y_lr_pre=lr.predict(X_test)</span><br><span class="line">    <span class="comment"># 还原真实值</span></span><br><span class="line">    <span class="comment"># 这是因为我们做处理用的都是标准化</span></span><br><span class="line">    <span class="comment"># 所以最后跟原始数据比较需要反标准化</span></span><br><span class="line">    y_lr_pre=std_y.inverse_transform(y_lr_pre)</span><br><span class="line"></span><br><span class="line">    sgd.fit(X_train,y_train)</span><br><span class="line">    y_sgd_pre=sgd.predict(X_test)</span><br><span class="line">    y_sgd_pre=std_y.inverse_transform(y_sgd_pre)</span><br><span class="line"></span><br><span class="line">    rid.fit(X_train, y_train)</span><br><span class="line">    y_rid_pre = rid.predict(X_test)</span><br><span class="line">    y_rid_pre = std_y.inverse_transform(y_rid_pre)</span><br><span class="line"></span><br><span class="line">    las.fit(X_train, y_train)</span><br><span class="line">    y_las_pre = las.predict(X_test)</span><br><span class="line">    y_las_pre = std_y.inverse_transform(y_las_pre)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. evaluation</span></span><br><span class="line">    y_test=std_y.inverse_transform(y_test)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;线性回归的均方误差为: &quot;</span>,mean_squared_error(y_test,y_lr_pre))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;梯度下降的均方误差为: &quot;</span>,mean_squared_error(y_test,y_sgd_pre))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;岭回归的均方误差为: &quot;</span>,mean_squared_error(y_test,y_rid_pre))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Lasson均方误差为: &quot;</span>,mean_squared_error(y_test,y_las_pre))</span><br><span class="line"></span><br><span class="line">linearModel()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">线性回归的均方误差为:  <span class="number">24.474589501317524</span></span><br><span class="line">梯度下降的均方误差为:  <span class="number">23.82902862765662</span></span><br><span class="line">岭回归的均方误差为:  <span class="number">24.433234356526174</span></span><br><span class="line">Lasson均方误差为:  <span class="number">61.95307932912878</span></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">None</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="数据分析" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>【数据分析】HW1</title>
    <link href="http://example.com/2022/10/09/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91HW1/"/>
    <id>http://example.com/2022/10/09/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91HW1/</id>
    <published>2022-10-09T15:37:47.738Z</published>
    <updated>2022-10-09T15:38:16.150Z</updated>
    
    <content type="html"><![CDATA[<h1>HW1</h1><h2 id="Submission-requirements">Submission requirements:</h2><h3 id="Please-submit-your-solutions-to-our-class-website">Please submit your solutions to our class website.</h3><hr><p>Q1.Suppose that a data warehouse consists of four dimensions, <strong>date</strong>, <strong>spectator</strong>, <strong>location</strong>, and <strong>game</strong>, and two measures, <strong>count and charge</strong>, where charge is the fare that a spectator pays when watching a game on a given date. Spectators may be students, adults, or seniors, with each category having its own charge rate.</p><p>(a) Draw a <strong>star schema diagram</strong> for the data warehouse.</p><img src="/2022/10/09/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91HW1/image-20221009222600782.png" alt="image-20221009222600782" style="zoom:25%;"><p>(b) Starting with the base cuboid [<strong>date,</strong> <strong>spectator, location, game</strong>]，what specific <strong>OLAP operations</strong> should one perform in order to list the total charge paid by student spectators in Los Angeles?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">step <span class="number">1.</span> Roll-up on date <span class="keyword">from</span> date_key to <span class="built_in">all</span></span><br><span class="line">step <span class="number">2.</span> Roll-up on spectator <span class="keyword">from</span> spectator_key to status</span><br><span class="line">step <span class="number">3.</span> Roll-up on location <span class="keyword">from</span> location_key to location_name</span><br><span class="line">step <span class="number">4.</span> Roll-up on game <span class="keyword">from</span> game_key to <span class="built_in">all</span></span><br><span class="line"></span><br><span class="line">step <span class="number">5.</span> Dice <span class="keyword">with</span> <span class="string">&quot;status=student&quot;</span> <span class="keyword">and</span> <span class="string">&quot;location_name=Los Angeles&quot;</span></span><br></pre></td></tr></table></figure><p>© Bitmap indexing is a very useful optimization technique. Please present the pros and cons of using bitmap indexing in this given data warehouse.</p><p><strong>优点</strong></p><p>位图索引是一种高效的索引结构，在查询、过滤等方面上，由于进行的是位运算，所以比常规的查询方式快很多。例如在本仓库中，假设对于<code>spectator</code>表的子列<code>status</code>，我们有：</p><table><thead><tr><th style="text-align:center">spectator_key</th><th style="text-align:center">status</th><th style="text-align:center">gender</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">学生</td><td style="text-align:center">男</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">成人</td><td style="text-align:center">女</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">学生</td><td style="text-align:center">男</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">学生</td><td style="text-align:center">女</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">老人</td><td style="text-align:center">女</td></tr></tbody></table><p><code>status</code>就可以建立以下位图索引：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">status=<span class="string">&quot;学生&quot;</span> : <span class="number">10110</span></span><br><span class="line">status=<span class="string">&quot;成人&quot;</span> : <span class="number">01000</span></span><br><span class="line">status=<span class="string">&quot;老人&quot;</span> : <span class="number">00001</span></span><br></pre></td></tr></table></figure><p><code>gender</code>可以建立以下位图索引：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gender=<span class="string">&quot;男&quot;</span>: <span class="number">10100</span></span><br><span class="line">gender=<span class="string">&quot;女&quot;</span>: <span class="number">01011</span></span><br></pre></td></tr></table></figure><p>例如，我们想要查询学生，只需要用<code>10110</code>去过滤原始数据就行。</p><p>我们想混合查询，比如同时查询<code>status=&quot;学生&quot;</code>和<code>gender=&quot;男&quot;</code>的数据，只需要进行并操作就行了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10110</span> &amp; <span class="number">10100</span> = <span class="number">10100</span></span><br></pre></td></tr></table></figure><p>可以大大提高计算速度。</p><p>此外，位图索引可以在一定程度上<code>绕开</code>原始数据，进一步提高处理速度。例如，我们想统计满足上面条件的人数，只需要:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ans=<span class="number">0</span></span><br><span class="line">x=(<span class="number">10110</span>&amp;<span class="number">10100</span>)</span><br><span class="line"><span class="keyword">while</span> x:</span><br><span class="line">x&amp;=(x-<span class="number">1</span>)</span><br><span class="line">ans+=<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>缺点</strong></p><p>位图索引比较适合枚举类型，也就是离散型变量，对于连续变量，位图索引并不适用，往往需要先做离散化。比如本仓库中，<code>phone number</code>字段可能就不太适合(也许这个字段没有存在的必要？)</p><p>而当属性列非常多时，我们做位图索引的开销也比较大。</p><hr><p>Q2．某电子邮件数据库中存储了大量的电子邮件。请设计数据仓库的结构，以便用户从多个维度进行查询和挖掘。</p><img src="/2022/10/09/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91HW1/image-20221009232956580.png" alt="image-20221009232956580" style="zoom:33%;"><hr><p>Q3. Suppose a hospital tested the age and body fat data for 18 random selected adults with the following result:</p><table><thead><tr><th><strong>age</strong></th><th>23</th><th>23</th><th>27</th><th>27</th><th>39</th><th>41</th><th>47</th><th>49</th><th>50</th><th>52</th><th>54</th><th>54</th><th>56</th><th>57</th><th>58</th><th>58</th><th>60</th><th>61</th></tr></thead><tbody><tr><td><strong>%fat</strong></td><td>9.5</td><td>26.5</td><td>7.8</td><td>17.8</td><td>31.4</td><td>25.9</td><td>27.4</td><td>27.2</td><td>31.2</td><td>34.6</td><td>42.5</td><td>28.8</td><td>33.4</td><td>30.2</td><td>34.1</td><td>32.9</td><td>41.2</td><td>35.7</td></tr></tbody></table><p>(a) Calculate the mean, median, and standard deviation of <strong>age</strong> and <strong>%fat</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">             age       %fat</span><br><span class="line">mean   <span class="number">46.444444</span>  <span class="number">28.783333</span></span><br><span class="line">std    <span class="number">13.218624</span>   <span class="number">9.254395</span></span><br><span class="line">median      <span class="number">51.0</span>       <span class="number">30.7</span></span><br></pre></td></tr></table></figure><p>(b) Draw the boxplots for <strong>age</strong> and <strong>%fat</strong>.</p><img src="/2022/10/09/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91HW1/image-20221009223335906.png" alt="image-20221009223335906" style="zoom: 25%;"><p>© Draw a scatter plot based on these two variables.</p><img src="/2022/10/09/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91HW1/image-20221009224804969.png" alt="image-20221009224804969" style="zoom: 25%;"><p>(d) Normalize <strong>age</strong> based on <strong>min-max normalization</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x=data[<span class="string">&quot;age&quot;</span>]</span><br><span class="line">y=data[<span class="string">&#x27;%fat&#x27;</span>]</span><br><span class="line">X=(x-x.<span class="built_in">min</span>())/(x.<span class="built_in">max</span>()-x.<span class="built_in">min</span>())</span><br><span class="line">Y=(y-y.<span class="built_in">min</span>())/(y.<span class="built_in">max</span>()-y.<span class="built_in">min</span>())</span><br><span class="line"><span class="built_in">print</span>(X,Y)</span><br></pre></td></tr></table></figure><p>Result is:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>     <span class="number">0.000000</span></span><br><span class="line"><span class="number">1</span>     <span class="number">0.000000</span></span><br><span class="line"><span class="number">2</span>     <span class="number">0.105263</span></span><br><span class="line"><span class="number">3</span>     <span class="number">0.105263</span></span><br><span class="line"><span class="number">4</span>     <span class="number">0.421053</span></span><br><span class="line"><span class="number">5</span>     <span class="number">0.473684</span></span><br><span class="line"><span class="number">6</span>     <span class="number">0.631579</span></span><br><span class="line"><span class="number">7</span>     <span class="number">0.684211</span></span><br><span class="line"><span class="number">8</span>     <span class="number">0.710526</span></span><br><span class="line"><span class="number">9</span>     <span class="number">0.763158</span></span><br><span class="line"><span class="number">10</span>    <span class="number">0.815789</span></span><br><span class="line"><span class="number">11</span>    <span class="number">0.815789</span></span><br><span class="line"><span class="number">12</span>    <span class="number">0.868421</span></span><br><span class="line"><span class="number">13</span>    <span class="number">0.894737</span></span><br><span class="line"><span class="number">14</span>    <span class="number">0.921053</span></span><br><span class="line"><span class="number">15</span>    <span class="number">0.921053</span></span><br><span class="line"><span class="number">16</span>    <span class="number">0.973684</span></span><br><span class="line"><span class="number">17</span>    <span class="number">1.000000</span></span><br></pre></td></tr></table></figure><p>(e) Calculate the <strong>correlation coefficient</strong> (Pearson’s product moment coefficient). Are these two variables positively or negatively correlated?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.corrcoef(x,y))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;相关系数&quot;</span> ,stats.pearsonr(x,y)[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>Result is</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">1.</span>        <span class="number">0.8176188</span>]</span><br><span class="line"> [<span class="number">0.8176188</span> <span class="number">1.</span>       ]]</span><br><span class="line">相关系数 <span class="number">0.8176187964565874</span></span><br></pre></td></tr></table></figure><p>I think they are positively correlated.</p><p>(f) Smooth the fat data by bin means, using a bin depth of 6.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mean</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">round</span>(<span class="built_in">sum</span>(x)/<span class="built_in">len</span>(x),<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">N_y=<span class="built_in">sorted</span>(y)</span><br><span class="line">bins=[[]]</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> N_y:</span><br><span class="line">    bins[-<span class="number">1</span>].append(j)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>((v:=bins[-<span class="number">1</span>]))==<span class="number">6</span>:</span><br><span class="line">        v[:]=[mean(v)]*<span class="built_in">len</span>(v)</span><br><span class="line">        bins.append([])</span><br><span class="line"><span class="keyword">for</span> i,j  <span class="keyword">in</span> <span class="built_in">enumerate</span>(bins[:-<span class="number">1</span>]):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;bin %d is :&quot;</span>%(i+<span class="number">1</span>),j)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bin</span> <span class="number">1</span> <span class="keyword">is</span> : [<span class="number">19.12</span>, <span class="number">19.12</span>, <span class="number">19.12</span>, <span class="number">19.12</span>, <span class="number">19.12</span>, <span class="number">19.12</span>]</span><br><span class="line"><span class="built_in">bin</span> <span class="number">2</span> <span class="keyword">is</span> : [<span class="number">30.32</span>, <span class="number">30.32</span>, <span class="number">30.32</span>, <span class="number">30.32</span>, <span class="number">30.32</span>, <span class="number">30.32</span>]</span><br><span class="line"><span class="built_in">bin</span> <span class="number">3</span> <span class="keyword">is</span> : [<span class="number">36.92</span>, <span class="number">36.92</span>, <span class="number">36.92</span>, <span class="number">36.92</span>, <span class="number">36.92</span>, <span class="number">36.92</span>]</span><br></pre></td></tr></table></figure><p>(g) Smooth the fat data by bin boundaries, using a bin depth of 6.</p><p>这里因为我们是对排好序的数据做处理，所以可以通过二分法进行优化，获取中间分界。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">x,a,b</span>):</span><br><span class="line">    <span class="comment"># 是否靠近下界</span></span><br><span class="line">    <span class="keyword">return</span> (x-a)&lt;=(b-x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">boundary</span>(<span class="params">x</span>):</span><br><span class="line">    Min=x[<span class="number">0</span>]</span><br><span class="line">    Max=x[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    l,r=<span class="number">0</span>,<span class="built_in">len</span>(x)-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> l&lt;=r:</span><br><span class="line">        mid=(r-l)//<span class="number">2</span>+l</span><br><span class="line">        <span class="keyword">if</span> close(x[mid],Min,Max):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> close(x[mid+<span class="number">1</span>],Min,Max):</span><br><span class="line">                l=mid</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            l=mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> close(x[mid-<span class="number">1</span>],Min,Max):</span><br><span class="line">                l=mid</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            r=mid-<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> [[Min]*l+[Max]*(<span class="built_in">len</span>(x)-l)]</span><br><span class="line"></span><br><span class="line">N_y=<span class="built_in">sorted</span>(y)</span><br><span class="line">bins=[[]]</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> N_y:</span><br><span class="line">    bins[-<span class="number">1</span>].append(j)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>((v:=bins[-<span class="number">1</span>]))==<span class="number">6</span>:</span><br><span class="line">        v[:]=boundary(v)</span><br><span class="line">        bins.append([])</span><br><span class="line"><span class="keyword">for</span> i,j  <span class="keyword">in</span> <span class="built_in">enumerate</span>(bins[:-<span class="number">1</span>]):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;bin %d is :&quot;</span>%(i+<span class="number">1</span>),j)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bin</span> <span class="number">1</span> <span class="keyword">is</span> : [[<span class="number">7.8</span>, <span class="number">7.8</span>, <span class="number">27.2</span>, <span class="number">27.2</span>, <span class="number">27.2</span>, <span class="number">27.2</span>]]</span><br><span class="line"><span class="built_in">bin</span> <span class="number">2</span> <span class="keyword">is</span> : [[<span class="number">27.4</span>, <span class="number">27.4</span>, <span class="number">32.9</span>, <span class="number">32.9</span>, <span class="number">32.9</span>, <span class="number">32.9</span>]]</span><br><span class="line"><span class="built_in">bin</span> <span class="number">3</span> <span class="keyword">is</span> : [[<span class="number">33.4</span>, <span class="number">33.4</span>, <span class="number">33.4</span>, <span class="number">33.4</span>, <span class="number">42.5</span>, <span class="number">42.5</span>]]</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">None</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="数据分析" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>【数据分析】Chapter 2. 数据预处理</title>
    <link href="http://example.com/2022/10/08/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/"/>
    <id>http://example.com/2022/10/08/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/</id>
    <published>2022-10-08T03:51:54.528Z</published>
    <updated>2022-10-09T04:53:34.896Z</updated>
    
    <content type="html"><![CDATA[<p>现实生活中的数据极易收到噪声、缺失值和不一致数据的影响。数据预处理是数据挖掘过程中的第一个步骤，主要有数据清洗、数据集成、数据归约和数据变换等方式。</p><h2 id="一、数据预处理的必要性">一、数据预处理的必要性</h2><hr><p>数据的质量决定了数据挖掘的效果。而在原始数据中，大多数据都是<code>Dirty</code>数据，他们存在以下几个方面的问题。</p><ul><li>数据不一致</li><li>噪声数据</li><li>缺失值</li></ul><blockquote><p>那，既然数据如此重要，我们就需要一套体系来评估数据的好坏不是吗</p></blockquote><p>1️⃣ <strong>准确性</strong></p><p>数据记录是否存在异常或者误差</p><p>2️⃣ <strong>一致性</strong></p><p>数据是否符合某一规则</p><p>3️⃣ <strong>完整性</strong></p><p>是否存在确实</p><p>4️⃣ <strong>时效性</strong></p><p>能否及时更新</p><p>5️⃣ <strong>可信性</strong></p><p>用户可以信赖的数据</p><p>6️⃣ <strong>可解释性</strong></p><p>是否易于理解</p><hr><h2 id="二、数据清洗">二、数据清洗</h2><h3 id="2-1-数据清洗方法">2.1  数据清洗方法</h3><p>1️⃣ <strong>缺失值处理</strong></p><ul><li>忽略元组</li><li>人工填写缺失值</li><li>使用常量填充缺失值</li><li>使用中心趋势度填充缺失值</li><li>采用均值或者中位数填充</li><li>利用最可能的值进行填充</li></ul><hr><p>2️⃣ <strong>噪声数据处理</strong></p><ul><li>分箱–借助邻域来光滑数据值</li><li>回归–采样函数来拟合光滑数据</li><li>离去点分析</li></ul><hr><h3 id="2-2-基于Pandas进行数据清洗">2.2  基于Pandas进行数据清洗</h3><p>1️⃣ <strong>检测与处理缺失值</strong></p><p>👦 <strong>检测非空值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.isnull()</span><br></pre></td></tr></table></figure><p>📧 <strong>统计非空值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.isnull().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure><p>🏁 <strong>查看非空值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure><hr><p>2️⃣ <strong>缺失值处理</strong></p><p>🅱️ <strong>删除</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dropna()</span><br></pre></td></tr></table></figure><p><code>dropna()</code>对于<code>Series</code>，会返回一个仅含非空数据和索引的<code>Series</code>，而对于一个<code>DataFrame</code>对象，则会默认丢弃任何含有缺失值的行。</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">axis</td><td style="text-align:center">0是行 1是列</td></tr><tr><td style="text-align:center">how</td><td style="text-align:center">确认缺失值的个数，'any’表示只要有缺失值就丢了,'all’则要全部</td></tr><tr><td style="text-align:center">thresh</td><td style="text-align:center">可以确定缺失值阈值</td></tr><tr><td style="text-align:center">subset</td><td style="text-align:center">只对子列进行操作，例如subset=[‘a’,'b]</td></tr><tr><td style="text-align:center">inplace</td><td style="text-align:center">不返回</td></tr></tbody></table><p>🅰️ <strong>填充</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fillna()</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">value</td><td style="text-align:center">用于填充缺失值的标量值或者字典对象</td></tr><tr><td style="text-align:center">method</td><td style="text-align:center">插值方法</td></tr><tr><td style="text-align:center">axis</td><td style="text-align:center">待填充的轴</td></tr><tr><td style="text-align:center">inplace</td><td style="text-align:center">原地修改</td></tr><tr><td style="text-align:center">limit</td><td style="text-align:center">可以连续填充的最大数量</td></tr></tbody></table><p><strong>举个栗子</strong></p><p><code>fillna()</code>可以通过字典的方式进行填充。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df=pd.DataFrame(np.random.randn(<span class="number">5</span>,<span class="number">3</span>))</span><br><span class="line">df.iloc[:<span class="number">3</span>,<span class="number">1</span>:]=pd.NA</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="built_in">print</span>(df.fillna(&#123;<span class="number">1</span>:<span class="number">0.1</span>,<span class="number">2</span>:<span class="number">0.2</span>&#125;))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0.078301</span>      &lt;NA&gt;      &lt;NA&gt;</span><br><span class="line"><span class="number">1</span>  <span class="number">1.310107</span>      &lt;NA&gt;      &lt;NA&gt;</span><br><span class="line"><span class="number">2</span>  <span class="number">0.025339</span>      &lt;NA&gt;      &lt;NA&gt;</span><br><span class="line"><span class="number">3</span>  <span class="number">0.011049</span> -<span class="number">0.053258</span> -<span class="number">0.259365</span></span><br><span class="line"><span class="number">4</span>  <span class="number">0.664727</span>  <span class="number">0.023836</span> -<span class="number">2.092003</span></span><br><span class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0.078301</span>  <span class="number">0.100000</span>  <span class="number">0.200000</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1.310107</span>  <span class="number">0.100000</span>  <span class="number">0.200000</span></span><br><span class="line"><span class="number">2</span>  <span class="number">0.025339</span>  <span class="number">0.100000</span>  <span class="number">0.200000</span></span><br><span class="line"><span class="number">3</span>  <span class="number">0.011049</span> -<span class="number">0.053258</span> -<span class="number">0.259365</span></span><br><span class="line"><span class="number">4</span>  <span class="number">0.664727</span>  <span class="number">0.023836</span> -<span class="number">2.092003</span></span><br></pre></td></tr></table></figure><p>使用均值填充：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.fillna(data.mean())</span><br></pre></td></tr></table></figure><hr><p>3️⃣ <strong>数据值替换</strong></p><p>通过<code>relpace()</code>方法进行替换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data=&#123;<span class="string">&#x27;姓名&#x27;</span>:[<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;小明&#x27;</span>,<span class="string">&#x27;马芳&#x27;</span>,<span class="string">&#x27;国志&#x27;</span>],<span class="string">&#x27;性别&#x27;</span>:[<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>],</span><br><span class="line">      <span class="string">&#x27;籍贯&#x27;</span>:[<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;甘肃&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>]&#125;</span><br><span class="line">df=pd.DataFrame(data)</span><br><span class="line">df=df.replace(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;我是你爹&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   姓名 性别    籍贯</span><br><span class="line"><span class="number">0</span>  张三  <span class="number">0</span>    北京</span><br><span class="line"><span class="number">1</span>  小明  <span class="number">1</span>    甘肃</span><br><span class="line"><span class="number">2</span>  马芳  <span class="number">0</span>  我是你爹</span><br><span class="line"><span class="number">3</span>  国志  <span class="number">1</span>    上海</span><br></pre></td></tr></table></figure><p>当然，也可以通过传入<code>列表</code>的方式进行多列更改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df=df.replace([<span class="string">&quot;我是你爹&quot;</span>,<span class="string">&quot;北京&quot;</span>],[<span class="string">&quot;北京&quot;</span>,<span class="string">&quot;PK&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><p>哦提一嘴，这里需要接收！！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   姓名 性别  籍贯</span><br><span class="line"><span class="number">0</span>  张三  <span class="number">0</span>  PK</span><br><span class="line"><span class="number">1</span>  小明  <span class="number">1</span>  甘肃</span><br><span class="line"><span class="number">2</span>  马芳  <span class="number">0</span>  北京</span><br><span class="line"><span class="number">3</span>  国志  <span class="number">1</span>  上海</span><br></pre></td></tr></table></figure><p>不难发现，第一个列表是需要替换的值，第二个列表是替换后的值，且他们之间是并行的！不能链式替换~</p><p>也可以通过字典实现多值替换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df=df.replace(&#123;<span class="string">&quot;1&quot;</span>:<span class="string">&quot;男&quot;</span>,<span class="string">&quot;0&quot;</span>:<span class="string">&#x27;女&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   姓名 性别  籍贯</span><br><span class="line"><span class="number">0</span>  张三  女  PK</span><br><span class="line"><span class="number">1</span>  小明  男  甘肃</span><br><span class="line"><span class="number">2</span>  马芳  女  北京</span><br><span class="line"><span class="number">3</span>  国志  男  上海</span><br></pre></td></tr></table></figure><p>通过自定义函数<code>map</code>实现~！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">data=&#123;<span class="string">&#x27;姓名&#x27;</span>:[<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;小明&#x27;</span>,<span class="string">&#x27;马芳&#x27;</span>,<span class="string">&#x27;国志&#x27;</span>],<span class="string">&#x27;性别&#x27;</span>:[<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>],</span><br><span class="line">      <span class="string">&#x27;籍贯&#x27;</span>:[<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;甘肃&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>]&#125;</span><br><span class="line">df=pd.DataFrame(data)</span><br><span class="line">df[<span class="string">&#x27;成绩&#x27;</span>]=[<span class="number">58</span>,<span class="number">62</span>,<span class="number">71</span>,<span class="number">99</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">grade</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x&gt;=<span class="number">90</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;优&quot;</span></span><br><span class="line">    <span class="keyword">if</span> x&gt;=<span class="number">80</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;良&quot;</span></span><br><span class="line">    <span class="keyword">if</span> x&gt;=<span class="number">60</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;及格&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;不及格&quot;</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;成绩&#x27;</span>]=df[<span class="string">&#x27;成绩&#x27;</span>].<span class="built_in">map</span>(grade)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   姓名 性别  籍贯   成绩</span><br><span class="line"><span class="number">0</span>  张三  <span class="number">0</span>  北京  不及格</span><br><span class="line"><span class="number">1</span>  小明  <span class="number">1</span>  甘肃   及格</span><br><span class="line"><span class="number">2</span>  马芳  <span class="number">0</span>       及格</span><br><span class="line"><span class="number">3</span>  国志  <span class="number">1</span>  上海    优</span><br></pre></td></tr></table></figure><hr><p>4️⃣ <strong>异常值检测</strong></p><p><strong>散点图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wdf=pd.DataFrame(np.arange(<span class="number">20</span>),columns=[<span class="string">&#x27;W&#x27;</span>])</span><br><span class="line">wdf[<span class="string">&#x27;Y&#x27;</span>]=wdf[<span class="string">&#x27;W&#x27;</span>]*<span class="number">1.5</span>+<span class="number">2</span></span><br><span class="line">wdf.iloc[<span class="number">3</span>,<span class="number">1</span>]=<span class="number">128</span></span><br><span class="line">wdf.iloc[<span class="number">18</span>,<span class="number">1</span>]=<span class="number">150</span></span><br><span class="line">wdf.plot(kind=<span class="string">&#x27;scatter&#x27;</span>,x=<span class="string">&#x27;W&#x27;</span>,y=<span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2022/10/08/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/image-20221008171302620.png" alt="image-20221008171302620" style="zoom:50%;"><p><strong>箱线图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.boxplot(wdf[<span class="string">&#x27;Y&#x27;</span>].values,notch=<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2022/10/08/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/image-20221008171417603.png" alt="image-20221008171417603" style="zoom:50%;"><p><strong>3<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span>法则</strong></p><p>数据服从正态分布时，在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mi>σ</mi></mrow><annotation encoding="application/x-tex">3\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span>法则下，异常值被定义为一组测定值中与均值偏差超过三倍标准差<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span>的值。因为在正态分布下，距离均值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mi>σ</mi></mrow><annotation encoding="application/x-tex">3\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span>之外的值出现的概率小于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0.003</mn></mrow><annotation encoding="application/x-tex">0.003</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.003</span></span></span></span>，可看做小概率时间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outRange</span>(<span class="params">S</span>):</span><br><span class="line">    blidx=(S.mean()-<span class="number">3</span>*S.std()&gt;S)|(S.mean()+<span class="number">3</span>*S.std()&lt;S)</span><br><span class="line">    idx=np.arange(S.shape[<span class="number">0</span>])[blidx]</span><br><span class="line">    outRange=S.iloc[idx]</span><br><span class="line">    <span class="keyword">return</span> outRange</span><br><span class="line"><span class="built_in">print</span>(outRange(wdf[<span class="string">&#x27;Y&#x27;</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">18</span>    <span class="number">150.0</span></span><br><span class="line">Name: Y, dtype: float64</span><br></pre></td></tr></table></figure><p>值得注意的是啊，像这种表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S.mean()-S.std()&gt;S</span><br></pre></td></tr></table></figure><p>会返回有个只有<code>True</code>或者<code>False</code>的<code>Series</code>，也就是<code>0,1</code>。此时可以用位运算<code>|</code>保留<code>1</code>的结果。</p><p>但是拿到了<code>Series</code>，我们还要原始数据呐不是，所以还需要获取原始数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">idx=np.arange(S.shape[<span class="number">0</span>])[blidx]</span><br><span class="line">S.iloc[idx]</span><br></pre></td></tr></table></figure><hr><h3 id="2-3-数据集成">2.3  数据集成</h3><p>有时候需要挖掘的数据可能来自多个数据源，导致数据存在冗余与不一致的情况。数据集成是将多个数据源中的数据合并，并存放到一个一致的数据存储中。</p><p>1️⃣ <strong>数据冗余和相关性分析</strong></p><p>冗余是数据继承的重要问题，如果一个属性能由另一个属性或者另一组属性值推导而出，那么这个属性可能就是冗余的哦。此外，属性命名不一致也会导致冗余。</p><p>我们下面介绍如何判断属性是不是冗余的哈！</p><hr><p><strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>χ</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\chi^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>检验</strong></p><p>卡方检验适用于标称属性，假设对于两个属性<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo separator="true">,</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A,B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span>个不同的取值，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>个不同的取值，用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>描述的数据元组可以用一个相依表显示，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span>个值构成列，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>个值构成行。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>A</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>B</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(A_i,B_j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>表示属性<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>取<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>，属性<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>取<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>的联合事件。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>χ</mi><mn>2</mn></msup><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>c</mi></munderover><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>c</mi></munderover><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>o</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>−</mo><msub><mi>e</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><msub><mi>e</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mfrac></mrow><annotation encoding="application/x-tex">\chi^2=\sum_{i=1}^c\sum_{j=1}^c\frac{(o_{ij}-e_{ij})^2}{e_{ij}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0585em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.0652em;vertical-align:-1.4138em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9721em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>O</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">O_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>表示联合事件的观测频度，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>e</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">e_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>表示期望频度，计算式为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>e</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><mfrac><mrow><mi>c</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>t</mi><mo stretchy="false">(</mo><mi>A</mi><mo>=</mo><msub><mi>a</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>×</mo><mi>c</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>t</mi><mo stretchy="false">(</mo><mi>B</mi><mo>=</mo><msub><mi>b</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex">e_{ij}=\frac{count(A=a_i)\times count(B=b_j)}{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">co</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">co</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>为元组个数。</p><hr><p><strong>相关系数</strong></p><p>又称为皮尔逊矩阵系数(Pearson)，相关系数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mrow><mi>A</mi><mo separator="true">,</mo><mi>B</mi></mrow></msub></mrow><annotation encoding="application/x-tex">r_{A,B}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>可定义为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>r</mi><mrow><mi>A</mi><mo separator="true">,</mo><mi>B</mi></mrow></msub><mo>=</mo><mfrac><mrow><munderover><mo>∑</mo><mn>1</mn><mi>n</mi></munderover><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>A</mi><mo>ˉ</mo></mover><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>b</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>B</mi><mo>ˉ</mo></mover><mo stretchy="false">)</mo></mrow><mrow><mi>n</mi><msub><mi>σ</mi><mi>A</mi></msub><msub><mi>σ</mi><mi>B</mi></msub></mrow></mfrac><mo>=</mo><mfrac><mrow><munderover><mo>∑</mo><mn>1</mn><mi>n</mi></munderover><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>−</mo><mi>n</mi><mover accent="true"><mi>A</mi><mo>ˉ</mo></mover><mover accent="true"><mi>B</mi><mo>ˉ</mo></mover></mrow><mrow><mi>n</mi><msub><mi>σ</mi><mi>A</mi></msub><msub><mi>σ</mi><mi>B</mi></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">r_{A,B}=\frac{\sum_1^n(a_i-\bar{A})(b_i-\bar{B})}{n\sigma_A\sigma_B}=\frac{\sum_1^n(a_ib_j)-n\bar{A}\bar{B}}{n\sigma_A\sigma_B}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3458em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5098em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.6897em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8201em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">A</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1111em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8201em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3458em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5098em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.6897em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">n</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8201em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">A</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1111em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8201em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">ˉ</span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>为元组个数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>A</mi><mo>ˉ</mo></mover></mrow><annotation encoding="application/x-tex">\bar{A}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8201em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8201em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">A</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1111em;"><span class="mord">ˉ</span></span></span></span></span></span></span></span></span></span>为均值，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span>为标准差，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i,b_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为元组<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">AB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>上的取值。</p><p>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">AB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>独立，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mrow><mi>A</mi><mo separator="true">,</mo><mi>B</mi></mrow></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">r_{A,B}=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>，取值范围为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-1,1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span></span></span></span></p><hr><p><strong>协方差</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>C</mi><mi>o</mi><mi>v</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>E</mi><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>X</mi><mo>−</mo><mi>E</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>Y</mi><mo>−</mo><mi>E</mi><mo stretchy="false">(</mo><mi>Y</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>=</mo><mi>E</mi><mo stretchy="false">(</mo><mi>X</mi><mi>Y</mi><mo stretchy="false">)</mo><mo>−</mo><mi>E</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mi>E</mi><mo stretchy="false">(</mo><mi>Y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Cov(X,Y)=E[(X-E(X))(Y-E(Y))]=E(XY)-E(X)E(Y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">[(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">))</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">))]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span></span></span></p><p><strong>实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.A.cov(df.B)</span><br><span class="line">df.A.corr(df.B)</span><br></pre></td></tr></table></figure><p>协方差反映二者趋势程度，取值没有界定，而相关系数则是将其标准化后评估趋近程度，具有取值界定。</p><hr><p><strong>2️⃣ 基于Pandas进行数据合并</strong></p><p><code>merge()</code></p><p><strong>例如</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.merge(a,b,left_on=&quot;fruit&quot;,right_on=&quot;green&quot;,how=&quot;left&quot;)</span><br></pre></td></tr></table></figure><p>在合并过程中可能或出现重复列名，我们可以通过<code>suffixes</code>进行修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.merge(left,right,on=<span class="string">&quot;key1&quot;</span>,suffixes=(<span class="string">&#x27;_left&#x27;</span>,<span class="string">&#x27;_right&#x27;</span>))</span><br></pre></td></tr></table></figure><hr><p><code>concat()</code></p><p><strong>例如</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.concat([data1,data2],axis=<span class="number">0</span>,join=<span class="string">&quot;inner&quot;</span>,sort=<span class="string">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure><hr><p>如果需要合并的两个DF存在重复索引，那么前面两个函数将无法正确合并，我们可以使用<code>combine_first()</code>进行合并，该方法会优先考虑第一个值。</p><hr><h3 id="2-4-数据标准化">2.4  数据标准化</h3><p>由于量纲的问题，不同特征之间可能会产生较大的影响。为此，往往需要对数据进行标准化处理。</p><p>1️⃣ <strong>离差标准化</strong></p><p>做一个简单的线性变化，将数据映射到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><mfrac><mrow><mi>x</mi><mo>−</mo><mi>m</mi><mi>i</mi><mi>n</mi></mrow><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo>−</mo><mi>m</mi><mi>i</mi><mi>n</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">x_1=\frac{x-min}{max-min}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1059em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">min</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">min</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>2️⃣ <strong>标准差标准化</strong></p><p>又称零均值标准化或<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span>分数标准化，处理后的均值为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>，标准差为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><mfrac><mrow><mi>x</mi><mo>−</mo><mi>m</mi><mi>e</mi><mi>a</mi><mi>n</mi></mrow><mrow><mi>s</mi><mi>t</mi><mi>d</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">x_1=\frac{x-mean}{std}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.9463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal">d</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mord mathnormal">an</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><hr><h3 id="2-5-数据归约">2.5  数据归约</h3><p>Data Reduction是指在尽可能保证数据完整性的基础上得到数据的归约表示。也就是说，在归约后的数据集上挖掘更加有效，且会产生相同或相似的结果。</p><p>1️⃣ <strong>维归约</strong></p><p>减少随机变量或属性的个数，常见的方法有：</p><ul><li>属性子集选择</li><li>小波变换</li><li>主成分分析</li></ul><hr><p><strong>属性子集选择</strong></p><p>通过删除不相关或冗余属性减少数据量，旨在找出最小属性集，使其分布尽可能接近原始分布。</p><p>如何选择一个好的子集？穷举是不显示的，所以一般使用压缩空间的启发式算法进行最优子集选取。</p><p>基本的启发式算法包含以下技术：</p><ul><li>逐步向前选择<ul><li>也就是状态移动</li></ul></li><li>逐步向后删除<ul><li>末位淘汰</li></ul></li><li>选择+删除<ul><li>混合</li></ul></li><li>决策树归纳</li></ul><hr><p><strong>小波变换</strong></p><p>这玩意继承和发展了短时傅里叶变换局部化的思想，又克服了窗口大小不随频率变化等缺点。能提供一个随频率改变的时间-频率窗口，是进行信号时频分析和处理的理想工具。</p><p>一般在频域，信号能量主要集中在低频，可以截取中低频系数保留近似的压缩数据。</p><hr><p><strong>主成分分析</strong></p><p>PCA搜索<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>个最能代表数据的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>维正交向量，是最常使用将为方法。</p><p>核心思想是找到数据里最主要的方面代替原始数据。</p><p><strong>步骤</strong></p><ul><li>对样本中心化<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>−</mo><mfrac><mn>1</mn><mi>m</mi></mfrac><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><mi>x</mi><mo stretchy="false">(</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x(i)=x(i)-\frac{1}{m}\sum_{j=1}^mx(j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2809em;vertical-align:-0.4358em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4358em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span></li><li>计算样本的协方差矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><msup><mi>x</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">xx^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span></li><li>对协方差矩阵进行特征分析</li><li>取出最大的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>个特征值对应的特征向量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>w</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>w</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>w</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(w_1,w_2,...,w_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，将所有的特征向量标准化后，组成特征向量矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span></li><li>将每个样本通过特征向量矩阵转化为新的样本，并得到样本集<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>W</mi><mi>T</mi></msup><mi>x</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">z(i)=W^Tx(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0913em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">)</span></span></span></span></li></ul><p><strong>尝试</strong></p><p>对鸢尾花数据集进行降维</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"></span><br><span class="line">data=load_iris()</span><br><span class="line">y,x=data.target,data.data</span><br><span class="line"></span><br><span class="line">pca=PCA(n_components=<span class="number">2</span>)</span><br><span class="line">reduced_x=pca.fit_transform(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘出降维后的样本点分布</span></span><br><span class="line">red_x,red_y=[],[]</span><br><span class="line">blue_x,blue_y=[],[]</span><br><span class="line">green_x,green_y=[],[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(reduced_x)):</span><br><span class="line">    <span class="keyword">if</span> y[i]==<span class="number">0</span>:</span><br><span class="line">        red_x.append(reduced_x[i][<span class="number">0</span>])</span><br><span class="line">        red_y.append(reduced_x[i][<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">elif</span> y[i]==<span class="number">1</span>:</span><br><span class="line">        blue_x.append(reduced_x[i][<span class="number">0</span>])</span><br><span class="line">        blue_y.append(reduced_x[i][<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        green_x.append(reduced_x[i][<span class="number">0</span>])</span><br><span class="line">        green_y.append(reduced_x[i][<span class="number">1</span>])</span><br><span class="line">plt.scatter(red_x,red_y,c=<span class="string">&#x27;r&#x27;</span>,marker=<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">plt.scatter(blue_x,blue_y,c=<span class="string">&#x27;b&#x27;</span>,marker=<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">plt.scatter(green_x,green_y,c=<span class="string">&#x27;g&#x27;</span>,marker=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2022/10/08/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/image-20221008212427831.png" alt="image-20221008212427831" style="zoom:50%;"><hr><p>2️⃣ <strong>数量归约</strong></p><p>用较小、替代的数据表示原始数据。</p><ul><li>回归和对数线性模型</li><li>直方图</li><li>积累</li><li>抽样</li><li>数据立方体聚类</li><li>数据压缩</li></ul><hr><h2 id="2-6-数据变换与数据离散化">2.6  数据变换与数据离散化</h2><p>数据变换是一种将原始数据变化为比较合适的数据格式的方法，以便作为数据处理前特定数据挖掘算法的输入。</p><p>数据离散化则是一种数据变化的形式。</p><h3 id="数据变换的策略">数据变换的策略</h3><p>1️⃣ 光滑</p><p>2️⃣ 属性构造</p><p>3️⃣ 聚集</p><p>4️⃣规范化</p><p>5️⃣ 离散化</p><blockquote><p>用于将概念标签递归组织成更高层的概念，形成数值属性的概念分层，以便不同用户需要</p></blockquote><ul><li>分箱离散化<ul><li>基于指定的箱个数的自顶向下的分裂技术，例如使用等宽或等频分箱，再通过箱均值或者中位数替换箱中的每个值，使得属性值离散化。</li></ul></li><li>直方图离散化<ul><li>可以按照规定生成直方图，并且递归调用产生概念级</li></ul></li><li>聚类、决策树、相关性分析进行离散化</li></ul><hr><h3 id="Python数据变化与离散化">Python数据变化与离散化</h3><p>1️⃣ <strong>数据规范化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a=[<span class="number">47</span>,<span class="number">83</span>,<span class="number">81</span>,<span class="number">18</span>,<span class="number">72</span>,<span class="number">41</span>]</span><br><span class="line">b=[<span class="number">56</span>,<span class="number">96</span>,<span class="number">84</span>,<span class="number">21</span>,<span class="number">87</span>,<span class="number">67</span>]</span><br><span class="line"></span><br><span class="line">data=np.array([a,b]).T</span><br><span class="line">df=pd.DataFrame(data,columns=[<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;离差标准化: &quot;</span>,(df-df.<span class="built_in">min</span>())/(df.<span class="built_in">max</span>()-df.<span class="built_in">min</span>()))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;标准差标准化: &quot;</span>,(df-df.mean())/df.std())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">离差标准化:            A         B</span><br><span class="line"><span class="number">0</span>  <span class="number">0.446154</span>  <span class="number">0.466667</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1.000000</span>  <span class="number">1.000000</span></span><br><span class="line"><span class="number">2</span>  <span class="number">0.969231</span>  <span class="number">0.840000</span></span><br><span class="line"><span class="number">3</span>  <span class="number">0.000000</span>  <span class="number">0.000000</span></span><br><span class="line"><span class="number">4</span>  <span class="number">0.830769</span>  <span class="number">0.880000</span></span><br><span class="line"><span class="number">5</span>  <span class="number">0.353846</span>  <span class="number">0.613333</span></span><br><span class="line"></span><br><span class="line">标准差标准化:            A         B</span><br><span class="line"><span class="number">0</span> -<span class="number">0.386103</span> -<span class="number">0.456223</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1.003868</span>  <span class="number">1.003690</span></span><br><span class="line"><span class="number">2</span>  <span class="number">0.926648</span>  <span class="number">0.565716</span></span><br><span class="line"><span class="number">3</span> -<span class="number">1.505803</span> -<span class="number">1.733646</span></span><br><span class="line"><span class="number">4</span>  <span class="number">0.579155</span>  <span class="number">0.675209</span></span><br><span class="line"><span class="number">5</span> -<span class="number">0.617765</span> -<span class="number">0.054747</span></span><br></pre></td></tr></table></figure><hr><p>2️⃣ <strong>哑变量处理</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.get_dummies(df)</span><br></pre></td></tr></table></figure><p>3️⃣ <strong>连续变量的离散化</strong></p><p><strong>等宽法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.cut(x,bins,right=<span class="literal">True</span>,labels=<span class="literal">None</span>,retbins=<span class="literal">False</span>,precision=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>举个栗子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">666</span>)</span><br><span class="line">score_list=np.random.randint(<span class="number">25</span>,<span class="number">100</span>,size=<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原始数据&quot;</span>,score_list)</span><br><span class="line">bins=[<span class="number">0</span>,<span class="number">59</span>,<span class="number">70</span>,<span class="number">80</span>,<span class="number">100</span>]</span><br><span class="line">score_cut=pd.cut(score_list,bins)</span><br><span class="line"><span class="built_in">print</span>(pd.value_counts(score_cut))</span><br><span class="line">c=pd.get_dummies(score_cut)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">原始数据 [<span class="number">27</span> <span class="number">70</span> <span class="number">55</span> <span class="number">87</span> <span class="number">95</span> <span class="number">98</span> <span class="number">55</span> <span class="number">61</span> <span class="number">86</span> <span class="number">76</span>]</span><br><span class="line">(<span class="number">80</span>, <span class="number">100</span>]    <span class="number">4</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">59</span>]      <span class="number">3</span></span><br><span class="line">(<span class="number">59</span>, <span class="number">70</span>]     <span class="number">2</span></span><br><span class="line">(<span class="number">70</span>, <span class="number">80</span>]     <span class="number">1</span></span><br><span class="line">dtype: int64</span><br><span class="line">   (<span class="number">0</span>, <span class="number">59</span>]  (<span class="number">59</span>, <span class="number">70</span>]  (<span class="number">70</span>, <span class="number">80</span>]  (<span class="number">80</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">0</span>        <span class="number">1</span>         <span class="number">0</span>         <span class="number">0</span>          <span class="number">0</span></span><br><span class="line"><span class="number">1</span>        <span class="number">0</span>         <span class="number">1</span>         <span class="number">0</span>          <span class="number">0</span></span><br><span class="line"><span class="number">2</span>        <span class="number">1</span>         <span class="number">0</span>         <span class="number">0</span>          <span class="number">0</span></span><br><span class="line"><span class="number">3</span>        <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span>          <span class="number">1</span></span><br><span class="line"><span class="number">4</span>        <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span>          <span class="number">1</span></span><br><span class="line"><span class="number">5</span>        <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span>          <span class="number">1</span></span><br><span class="line"><span class="number">6</span>        <span class="number">1</span>         <span class="number">0</span>         <span class="number">0</span>          <span class="number">0</span></span><br><span class="line"><span class="number">7</span>        <span class="number">0</span>         <span class="number">1</span>         <span class="number">0</span>          <span class="number">0</span></span><br><span class="line"><span class="number">8</span>        <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span>          <span class="number">1</span></span><br><span class="line"><span class="number">9</span>        <span class="number">0</span>         <span class="number">0</span>         <span class="number">1</span>          <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>等频法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">SameRateCut</span>(<span class="params">data,k=<span class="number">2</span></span>):</span><br><span class="line">    w=data.quantile(np.arange(<span class="number">0</span>,<span class="number">1</span>+<span class="number">1.0</span>/k,<span class="number">1.0</span>/k))</span><br><span class="line">    data=pd.cut(data.w)</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><p>简单介绍一下这个方法啊，<code>quantile</code>表示返回指定位置<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>的百分位数，通过这个方法生成等频率。</p><hr><p><strong>聚类分析法</strong></p><p>简单来说，有两步：</p><ul><li>将连续性数据用聚类算法进行聚类，处理聚类得到的簇</li><li>为合并到一个簇的连续性数据做统一标记</li></ul><hr><h2 id="2-7-基于scikit-learn进行数据预处理">2.7  基于scikit-learn进行数据预处理</h2><p>1️⃣ <strong>数据标准化与缩放</strong></p><p>这边有一个api</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sklearn.preprocessing.scale(X,axis=<span class="number">0</span>,with_mean=<span class="literal">True</span>,with_std=<span class="literal">True</span>,copy=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>实际作用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sklearn.preprocessing <span class="keyword">as</span> pre</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x_train=np.array([[<span class="number">1.</span>,-<span class="number">2.</span>,<span class="number">1.5</span>],[<span class="number">2.2</span>,<span class="number">1.3</span>,<span class="number">0.5</span>],[<span class="number">0.3</span>,<span class="number">1.</span>,-<span class="number">1.5</span>]])</span><br><span class="line">x_scaled=pre.scale(x_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;均值: &quot;</span>,x_scaled.mean(axis=<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;标准差: &quot;</span>,x_scaled.std(axis=<span class="number">0</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">均值:  [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line">标准差:  [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br></pre></td></tr></table></figure><p>此外，pre模块还提供了一个实用程序类<code>StandardScaler</code>，可以记录训练时的参数，以便进行相同的转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scale=pre.StandardScaler().fit(x_train)</span><br><span class="line">scale.transform(x_test)</span><br></pre></td></tr></table></figure><p>2️⃣ <strong>特征缩放</strong></p><p>这里介绍三个API</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pre.MinMaxScaler() <span class="comment"># 范围为[0,1]</span></span><br><span class="line">pre.MaxAbsScaler() <span class="comment"># 范围为[-1,1]</span></span><br><span class="line">pre.RobustScaler() <span class="comment"># 适用于异常值较多</span></span><br></pre></td></tr></table></figure><p>3️⃣ <strong>非线性变换</strong></p><p>非线性变换分为分位数变换和幂变换。二者都能保证每个特征值的秩。分位数变换将所有特征置于相同的期望分布中，而幂变换则是将数据从任意分布映射到接近高斯分布的位置。</p><blockquote><p>映射到[0,1]均匀分布</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">X,y=load_iris(return_X_y=<span class="literal">True</span>)</span><br><span class="line">X_train,X_test,Y_train,Y_test=train_test_split(X,y,random_state=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分位数变换</span></span><br><span class="line">quantile_transformer=preprocessing.QuantileTransformer(random_state=<span class="number">0</span>)</span><br><span class="line">X_train_trans=quantile_transformer.fit(X_train)</span><br><span class="line">X_test_trans=quantile_transformer.transform(X_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分布</span></span><br><span class="line">fig,ax=plt.subplots(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">ax[<span class="number">0</span>].hist(X_test_trans)</span><br><span class="line">ax[<span class="number">1</span>].hist(X_train)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2022/10/08/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/image-20221009121559481.png" alt="image-20221009121559481" style="zoom:50%;"><blockquote><p>映射到高斯分布</p></blockquote><p>高斯分布具有稳定的方差和最小化偏度，<code>PowerTransformer</code>提供了两种幂变换：<code>Yeo-Johnson</code>和<code>Box-Cox</code>变换，<code>Box-Cox</code>仅可用于严格的政数局，这两种变换均通过<code>lambda</code>进行参数化，通过最大似然进行估计。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pt=preprocessing.PowerTransformer(method=<span class="string">&#x27;box-cox&#x27;</span>,standardize=<span class="literal">False</span>)</span><br><span class="line">X_lognormal=np.random.RandomState(<span class="number">616</span>).lognormal(size=(<span class="number">300</span>,<span class="number">30</span>))</span><br><span class="line">fig,ax=plt.subplots(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">ax[<span class="number">0</span>].hist(X_lognormal)</span><br><span class="line"></span><br><span class="line">T=pt.fit_transform(X_lognormal)</span><br><span class="line">ax[<span class="number">1</span>].hist(T)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2022/10/08/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/image-20221009122141808.png" alt="image-20221009122141808" style="zoom:50%;"><blockquote><p>映射到正态分布</p></blockquote><p>这里我们调用<code>QuantileTransformer(output_distribution=&quot;normal&quot;)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pt=preprocessing.QuantileTransformer(output_distribution=<span class="string">&quot;normal&quot;</span>)</span><br><span class="line">X_lognormal=np.random.RandomState(<span class="number">616</span>).lognormal(size=(<span class="number">300</span>,<span class="number">30</span>))</span><br><span class="line">fig,ax=plt.subplots(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">ax[<span class="number">0</span>].hist(X_lognormal)</span><br><span class="line"></span><br><span class="line">T=pt.fit_transform(X_lognormal)</span><br><span class="line">ax[<span class="number">1</span>].hist(T)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2022/10/08/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/image-20221009122317710.png" alt="image-20221009122317710" style="zoom:50%;"><hr><p>4️⃣ <strong>正则化</strong></p><p>正则化是将单个样本缩放到单位范数中(每个样本范数为1)，如果计划使用点积或者其他核的二次形式量化任意一堆样本的相似性，此过程可能会很有用。通常使用于文本分类和聚类中。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>m</mi><mi>a</mi><mi>k</mi><mi>e</mi><mtext> </mtext><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>a</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">make\ ||a||=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">mak</span><span class="mord mathnormal">e</span><span class="mspace"> </span><span class="mord">∣∣</span><span class="mord mathnormal">a</span><span class="mord">∣∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x=[[<span class="number">1.</span>,-<span class="number">1.</span>,<span class="number">2.</span>],[<span class="number">2.</span>,<span class="number">0.</span>,<span class="number">0.</span>],[<span class="number">0.</span>,<span class="number">1.</span>,-<span class="number">1.</span>]]</span><br><span class="line"><span class="comment"># l2正则化</span></span><br><span class="line">x_nor=preprocessing.normalize(x,norm=<span class="string">&quot;l2&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(x_nor)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[ <span class="number">0.40824829</span> -<span class="number">0.40824829</span>  <span class="number">0.81649658</span>]</span><br><span class="line"> [ <span class="number">1.</span>          <span class="number">0.</span>          <span class="number">0.</span>        ]</span><br><span class="line"> [ <span class="number">0.</span>          <span class="number">0.70710678</span> -<span class="number">0.70710678</span>]]</span><br></pre></td></tr></table></figure><p>同样也有一个<code>Normalizer</code>类，可以通过<code>Transformer</code>API实现相同操作。</p><hr><p>5️⃣ <strong>编码分类特征</strong></p><p>如果要把定性数据转化为整数，可以使用<code>OrdinalEncoder</code>，该估计其可以将每个范畴特征转换为整数的一个新特征。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">enc=preprocessing.OrdinalEncoder()</span><br><span class="line">x=[[<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;17&#x27;</span>],[<span class="string">&#x27;fm&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;22&#x27;</span>]]</span><br><span class="line">enc.fit(x)</span><br><span class="line"><span class="built_in">print</span>(enc.transform([[<span class="string">&#x27;fm&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;17&#x27;</span>]]))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span>]]</span><br></pre></td></tr></table></figure><p>除此之外，有个升级版的<code>OneHotEncoder</code>，这玩意可以将<code>n_categories</code>转化为一个二进制编码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">enc=preprocessing.OneHotEncoder()</span><br><span class="line">x=[[<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;17&#x27;</span>],[<span class="string">&#x27;fm&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;22&#x27;</span>]]</span><br><span class="line">enc.fit(x)</span><br><span class="line"><span class="built_in">print</span>(enc.transform([[<span class="string">&#x27;fm&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;17&#x27;</span>],[<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;22&#x27;</span>]]).toarray())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span>]]</span><br></pre></td></tr></table></figure><hr><p>6️⃣ <strong>离散化</strong></p><p>离散化预处理可以将非线性特征引入线性模型中。</p><blockquote><p>K桶离散化</p></blockquote><p><code>KBinsDiscretizer</code>将特征离散到<code>K</code>个桶中</p><p><strong>介绍</strong></p><p>分桶是离散化的常用方法，将连续型特征离线化为一系列0/1的离散特征。</p><p>当数值特征跨越不同的数量级的时候，模型可能只会对大的特征值敏感，这种情况就可以考虑分桶操作。</p><p>分桶操作可以看作是对数值变量的离散化，然后通过二值化进行 one hot 编码。</p><p><strong>优点</strong></p><p>1️⃣分桶后得到的稀疏向量，内积乘法运算速度更快，计算结果更方便存储。</p><p>2️⃣对异常数据有很强的鲁棒性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X = np.array([[-<span class="number">3.</span>,<span class="number">5.</span>,<span class="number">15</span>],[<span class="number">0.</span>,<span class="number">6.</span>,<span class="number">14</span>],[<span class="number">6.</span>,<span class="number">3.</span>,<span class="number">11</span>]])</span><br><span class="line">est = preprocessing.KBinsDiscretizer(n_bins=[<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>],encode=<span class="string">&#x27;ordinal&#x27;</span>).fit(X)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(est.transform(X))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">2.</span> <span class="number">0.</span> <span class="number">0.</span>]]</span><br></pre></td></tr></table></figure><blockquote><p>特征二值化</p></blockquote><p>特征二值化是对数字特征进行于阈值化以获得布尔值的过程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">X = [[<span class="number">1.</span>,-<span class="number">1.</span>,<span class="number">2.</span>],[<span class="number">2.</span>,<span class="number">0.</span>,<span class="number">0.</span>],[<span class="number">0.</span>,<span class="number">1.</span>,-<span class="number">1.</span>]]</span><br><span class="line">binarizer = preprocessing.Binarizer().fit(X)</span><br><span class="line">Y1 = binarizer.transform(X)</span><br><span class="line"><span class="built_in">print</span>(Y1)</span><br><span class="line">binarizer = preprocessing.Binarizer(threshold=<span class="number">1.1</span>)</span><br><span class="line">Y2 = binarizer.transform(X)</span><br><span class="line"><span class="built_in">print</span>(Y2)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">1.</span> <span class="number">0.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span>]]</span><br><span class="line">[[<span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]]</span><br></pre></td></tr></table></figure><hr><p>最后，附上一个大佬对数据离散化的<a href="https://zhuanlan.zhihu.com/p/442837780">总结</a></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">None</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="数据分析" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>【数据分析】Chapter 1. 认识数据</title>
    <link href="http://example.com/2022/10/06/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91%E8%AE%A4%E8%AF%86%E6%95%B0%E6%8D%AE/"/>
    <id>http://example.com/2022/10/06/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91%E8%AE%A4%E8%AF%86%E6%95%B0%E6%8D%AE/</id>
    <published>2022-10-06T12:57:54.670Z</published>
    <updated>2022-10-08T03:51:32.907Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>数据集由<strong>数据对象</strong>组成，每个数据对象都代表一个<strong>对象</strong>或者一个实体。</p><p>例如在一张学生名单中，每个记录就表示着一个学生实体。</p></blockquote><hr><h2 id="一、属性">一、属性</h2><h3 id="1-1-什么是属性">1.1  什么是属性</h3><p>说白了，属性就是一个能够<strong>表征对象</strong>的东西，它反映了对象的性质，或者说特征。属性，也可以称作特征(Feature)，字段(Field)，维度(Dimension)，变量(Variable)。</p><h3 id="1-2-属性的类型">1.2  属性的类型</h3><img src="/2022/10/06/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91%E8%AE%A4%E8%AF%86%E6%95%B0%E6%8D%AE/image-20221006211327075.png" alt="image-20221006211327075" style="zoom: 33%;"><p>如上图所示，属性通过是否具有<strong>可比性</strong>，可以分为定性和定量属性。定性属性又可以往下细分为对称属性，二元属性和序数属性，而定量属性可再分为区间标度属性和比率标度属性。</p><hr><h2 id="二、数据的基本统计描述">二、数据的基本统计描述</h2><blockquote><p>评价一个数据的好坏一般是通过其分布形态，而对其分布形态进行的描述不仅可以认识数据，判断好坏，更能识别噪声或是离群点。</p><p>常见的统计性描述可以概括为：集中趋势、离散趋势、相对离散程度和分布形态四个维度。</p></blockquote><h3 id="2-1-中心趋势度">2.1  中心趋势度</h3><p>指的是一组数据向某一中心值靠拢的程度，反映了一组数据的中心点所在。</p><p>1️⃣ <strong>均值</strong></p><p>最常见的统计量，可以表征数据的总体水平。但均值对于噪声比较敏感。</p><p>2️⃣ <strong>中位数</strong></p><p>先排序，再找中心。毫无疑问，这个方法的时间开销至少是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlog_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>级别的。所以有时候，我们可以采用近似估计的方式去计算。</p><p>假定数据可以通过数值划分为区间，且知道每个区间的个数。于是，中位数可用以下的公式表示。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>m</mi><mi>e</mi><mi>d</mi><mi>i</mi><mi>a</mi><mi>n</mi><mo>=</mo><msub><mi>L</mi><mn>1</mn></msub><mo>+</mo><mrow><mo fence="true">[</mo><mfrac><mrow><mfrac><mi>N</mi><mn>2</mn></mfrac><mo>−</mo><mo stretchy="false">(</mo><mo>∑</mo><mi>f</mi><msub><mo stretchy="false">)</mo><mi>l</mi></msub></mrow><msub><mi>f</mi><mrow><mi>m</mi><mi>e</mi><mi>d</mi><mi>i</mi><mi>a</mi><mi>n</mi></mrow></msub></mfrac><mo fence="true">]</mo></mrow><mi>w</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">median=L_1+\left [\frac{\frac{N}{2}-(\sum f)_l}{f_{median}}\right ]width</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord mathnormal">ian</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">[</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6073em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">ian</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.735em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">]</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span></span></span></span></span></p><p>3️⃣ <strong>众数</strong></p><p>众数是一组数据中出现最多的数值，有多少个众数，那么我们称数据集为多少峰，例如一个众数：单峰，两个：双峰。</p><p>4️⃣ <strong>中列数</strong></p><p>Midrange，表示最大值和最小值的均值。也可以度量中心趋势哦。不过与其说度量中心，倒不如说是数据范围的中心，正如<code>mid</code>和<code>range</code>的意思一般。</p><hr><h3 id="2-2-散布-离中-度量">2.2  散布(离中)度量</h3><p>用于评估数据的散布或发散程度。</p><p><strong>1️⃣ 极差、四分位数和四分位数极差</strong></p><p>极差(Range)也称范围误差或者全距，指的是最大值和最小值的差距。也是衡量变动最简单的指标。</p><p>四分位数：将数据从大到小排序后，用三个点(25,50,75)将数据分为三等分，这三个点上对应的位置就是四分位数。例如<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>Q</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>Q</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">Q_1,Q_2,Q_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示第一四分位数，第二四分位数，第三四分位数。（四大天王有三个很奇怪吗🐕）</p><p>分半四分位差：即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>Q</mi><mn>3</mn></msub><mo>−</mo><msub><mi>Q</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">(Q_3-Q_1)/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/2</span></span></span></span></p><p>四分位数极差(IQR)：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mn>3</mn></msub><mo>−</mo><msub><mi>Q</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">Q_3-Q_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，它给出了数据中间一半的部分。</p><p><strong>2️⃣ 五数概括、盒图和离群点</strong></p><p>哪五个数？</p><ul><li>min</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">Q_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">Q_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">Q_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>max</li></ul><p>盒图又称箱线图，盒须图，体现了五数概括。利用四分位数间距<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mi>Q</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">IQR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">QR</span></span></span></span>，我们可以判断界限，找出异常值。通常设定1.5倍<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mi>Q</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">IQR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">QR</span></span></span></span>外的为异常值。所以边界为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mi>Q</mi><msub><mi>R</mi><mtext>左</mtext></msub><mo>=</mo><msub><mi>Q</mi><mn>1</mn></msub><mo>−</mo><mn>1.5</mn><mo>×</mo><mi>I</mi><mi>Q</mi><mi>R</mi><mspace linebreak="newline"></mspace><mi>I</mi><mi>Q</mi><msub><mi>R</mi><mtext>右</mtext></msub><mo>=</mo><msub><mi>Q</mi><mn>3</mn></msub><mo>+</mo><mn>1.5</mn><mo>×</mo><mi>I</mi><mi>Q</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">IQR_{左}=Q_1-1.5\times IQR\\IQR_右=Q_3+1.5\times IQR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">Q</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">左</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1.5</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">QR</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">Q</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">右</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1.5</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">QR</span></span></span></span></span></p><hr><h2 id="三、数据可视化">三、数据可视化</h2><blockquote><p>一个好的数据分析，应当是要做到简单易懂的，复杂的事情交给机器去做吧~</p></blockquote><p>通过图形清晰有效地表达数据称为数据可视化，他将数据所包含的信息的综合体，包括属性和变量，抽象化为一些图表形式。</p><p>这部分的话暂时不打算展开来讲了，我可能会新开一章专门介绍<code>matplotlib+sns+pyecharts</code>(排面)。</p><p>这里简单贴一个小小的散点图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">n=<span class="number">50</span></span><br><span class="line">x=np.random.rand(n)*<span class="number">2</span></span><br><span class="line">y=np.random.rand(n)*<span class="number">2</span></span><br><span class="line">colors=np.random.rand(n)</span><br><span class="line">area=np.pi*(<span class="number">10</span>*np.random.randn(n))**<span class="number">2</span></span><br><span class="line">plt.scatter(x,y,s=area,c=colors,alpha=<span class="number">0.5</span>,marker=<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2022/10/06/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91%E8%AE%A4%E8%AF%86%E6%95%B0%E6%8D%AE/image-20221006215808879.png" alt="image-20221006215808879" style="zoom: 33%;"><hr><h2 id="四、数据对象的相似性对量">四、数据对象的相似性对量</h2><blockquote><p>现实中，我们需要处理的数据具有不同的形式和特征，而对数据相似性的度量又是数据挖掘中非常重要的环节</p></blockquote><h3 id="4-1-数据矩阵和相异性矩阵">4.1  数据矩阵和相异性矩阵</h3><p><strong>数据矩阵</strong></p><p>这就是一张二维表</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">∣</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>O</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>Q</mi><mrow><mn>1</mn><mi>m</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>O</mi><mrow><mi>n</mi><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>O</mi><mrow><mi>n</mi><mi>m</mi></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow><annotation encoding="application/x-tex">\begin{vmatrix}O_{11} &amp; \dots &amp;Q_{1m} \\\dots&amp; &amp;\dots\\O_{n1}&amp; \dots &amp; O_{nm}\end{vmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.612em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.062em;"><span style="top:-2.866em;"><span class="pstrut" style="height:4.416em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.464em;"><span class="pstrut" style="height:4.416em;"></span><span style="height:2.416em;width:0.3333em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.3333em" height="2.416em" style="width:0.3333em" viewbox="0 0 333.33000000000004 2416" preserveaspectratio="xMinYMin"><path d="M145 0 H188 V2416 H145z M145 0 H188 V2416 H145z"/></svg></span></span><span style="top:-5.872em;"><span class="pstrut" style="height:4.416em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner">…</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner">…</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner">…</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner">…</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">nm</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.062em;"><span style="top:-2.866em;"><span class="pstrut" style="height:4.416em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.464em;"><span class="pstrut" style="height:4.416em;"></span><span style="height:2.416em;width:0.3333em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.3333em" height="2.416em" style="width:0.3333em" viewbox="0 0 333.33000000000004 2416" preserveaspectratio="xMinYMin"><path d="M145 0 H188 V2416 H145z M145 0 H188 V2416 H145z"/></svg></span></span><span style="top:-5.872em;"><span class="pstrut" style="height:4.416em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>属性为列，对象为行。</p><p><strong>相异性矩阵</strong></p><p>是相似性矩阵的反矩阵</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">∣</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>d</mi><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>d</mi><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow><annotation encoding="application/x-tex">\begin{vmatrix}0 &amp;d(1,2)&amp; \\d(2,1)&amp;0&amp; \end{vmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.412em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.462em;"><span style="top:-2.266em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.864em;"><span class="pstrut" style="height:3.216em;"></span><span style="height:1.216em;width:0.3333em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.3333em" height="1.216em" style="width:0.3333em" viewbox="0 0 333.33000000000004 1216" preserveaspectratio="xMinYMin"><path d="M145 0 H188 V1216 H145z M145 0 H188 V1216 H145z"/></svg></span></span><span style="top:-4.072em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.45em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.462em;"><span style="top:-2.266em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.864em;"><span class="pstrut" style="height:3.216em;"></span><span style="height:1.216em;width:0.3333em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.3333em" height="1.216em" style="width:0.3333em" viewbox="0 0 333.33000000000004 1216" preserveaspectratio="xMinYMin"><path d="M145 0 H188 V1216 H145z M145 0 H188 V1216 H145z"/></svg></span></span><span style="top:-4.072em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h3 id="4-2-常见的数值距离度量">4.2  常见的数值距离度量</h3><p>1️⃣ <strong>欧氏距离 Eulidean Distance</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>d</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><msqrt><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mi>i</mi><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>x</mi><mrow><mi>j</mi><mn>1</mn></mrow></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mi>i</mi><mi>n</mi></mrow></msub><mo>−</mo><msub><mi>x</mi><mrow><mi>j</mi><mi>n</mi></mrow></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding="application/x-tex">d(i,j)=\sqrt{(x_{i1}-x_{j1})^2+\dots+(x_{in}-x_{jn})^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.84em;vertical-align:-0.5742em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2658em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">in</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">jn</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.2258em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.88em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.88em" viewbox="0 0 400000 1944" preserveaspectratio="xMinYMin slice"><path d="M983 90l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5zM1001 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5742em;"><span></span></span></span></span></span></span></span></span></span></p><p><strong>2️⃣ 曼哈顿距离 Manhattan Distance</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>d</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">∣</mi><msub><mi>x</mi><mrow><mi>i</mi><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>x</mi><mrow><mi>j</mi><mn>1</mn></mrow></msub><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">∣</mi><msub><mi>x</mi><mrow><mi>i</mi><mn>2</mn></mrow></msub><mo>−</mo><msub><mi>x</mi><mrow><mi>j</mi><mn>2</mn></mrow></msub><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">d(i,j)=|x_{i1}-x_{j1}|+|x_{i2}-x_{j2}|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">∣</span></span></span></span></span></p><p>3️⃣ <strong>切比雪夫距离 Chebyshev Distance</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>d</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><munder><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mi>k</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mo stretchy="false">(</mo><munderover><mo>∑</mo><mrow><mi>f</mi><mo>=</mo><mn>1</mn></mrow><mi>p</mi></munderover><mi mathvariant="normal">∣</mi><msub><mi>x</mi><mrow><mi>i</mi><mi>f</mi></mrow></msub><mo>−</mo><msub><mi>x</mi><mrow><mi>j</mi><mi>f</mi></mrow></msub><msup><mi mathvariant="normal">∣</mi><mi>k</mi></msup><msup><mo stretchy="false">)</mo><mfrac><mn>1</mn><mi>k</mi></mfrac></msup><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><msub><mi>x</mi><mrow><mi>i</mi><mi>f</mi></mrow></msub><mo>−</mo><mi>x</mi><mrow><mi>j</mi><mi>f</mi></mrow><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d(i,j)=\lim_{k\to\infin}(\sum_{f=1}^p|x_{if}-x_{jf}|^k)^\frac{1}{k}=max(|x_{if}-x{jf}|)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.1367em;vertical-align:-1.4382em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-2.3479em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7521em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6985em;"><span style="top:-1.8479em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3471em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4382em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2901em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.004em;"><span style="top:-3.413em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span><span class="mord">∣</span><span class="mclose">)</span></span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">chebyshev</span>(<span class="params">x,y</span>):</span><br><span class="line"><span class="keyword">return</span> np.<span class="built_in">max</span>(np.<span class="built_in">abs</span>(x-y))</span><br></pre></td></tr></table></figure><p><strong>4️⃣ 闵可夫斯基距离 Minkowski Distance</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>d</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><msup><mo>=</mo><mi>q</mi></msup><msqrt><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mi>i</mi><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>x</mi><msub><mi>j</mi><mn>1</mn></msub></msub><msup><mo stretchy="false">)</mo><mi>q</mi></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mi>i</mi><mi>n</mi></mrow></msub><mo>−</mo><msub><mi>x</mi><mrow><mi>j</mi><mi>n</mi></mrow></msub><msup><mo stretchy="false">)</mo><mi>q</mi></msup></mrow></msqrt></mrow><annotation encoding="application/x-tex">d(i,j)=^q\sqrt{(x_{i1}-x_{j_1})^q+\dots+(x_{in}-x_{jn})^q}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel">=</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.84em;vertical-align:-0.5742em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2658em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.0572em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5904em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">in</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">jn</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5904em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span></span></span></span></span></span></span><span style="top:-3.2258em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.88em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.88em" viewbox="0 0 400000 1944" preserveaspectratio="xMinYMin slice"><path d="M983 90l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5zM1001 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5742em;"><span></span></span></span></span></span></span></span></span></span></p><p>可以说，曼哈顿距离和欧氏距离都是闵氏距离的推广</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">minkowski</span>(<span class="params">x,y,p</span>):</span><br><span class="line"><span class="keyword">return</span> np.<span class="built_in">sum</span>(np.<span class="built_in">abs</span>(x-y)**p)**(<span class="number">1</span>/p)</span><br></pre></td></tr></table></figure><p><strong>5️⃣ 汉明距离 Hamming Distance</strong></p><p>两个等长字符串之间变换需要的最小次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Hamming</span>(<span class="params">a,b</span>):</span><br><span class="line">x=a^b</span><br><span class="line">    ans=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> x:</span><br><span class="line">        x&amp;=(x-<span class="number">1</span>)</span><br><span class="line">        ans+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Hamming</span>(<span class="params">a,b</span>):</span><br><span class="line"><span class="keyword">return</span> np.<span class="built_in">sum</span>(a!=b)/<span class="built_in">len</span>(a)</span><br></pre></td></tr></table></figure><p><strong>6️⃣ 余弦相似性</strong></p><p>一般用于文档数据的相似性度量。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>s</mi><mi>i</mi><mi>m</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>x</mi><mo>⋅</mo><mi>y</mi></mrow><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo>⋅</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>y</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">sim(x,y)=\frac{x\cdot y}{||x||\cdot||y||}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">im</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0574em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣∣</span><span class="mord mathnormal">x</span><span class="mord">∣∣</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">∣∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣∣</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cos_similarity</span>(<span class="params">x,y</span>):</span><br><span class="line"><span class="keyword">return</span> np.dot(x,y)/(np.linalg.norm(x)*np.linalg.norm(y))</span><br></pre></td></tr></table></figure><p>这个<code>np.linalg.norm</code>表示范数</p><hr><p><strong>4.3  混合类型属性的相似性</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>d</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><munderover><mo>∑</mo><mrow><mi>f</mi><mo>=</mo><mn>1</mn></mrow><mi>p</mi></munderover><msubsup><mi>σ</mi><mrow><mi>i</mi><mi>j</mi></mrow><mrow><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo></mrow></msubsup><msubsup><mi>d</mi><mrow><mi>i</mi><mi>j</mi></mrow><mrow><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo></mrow></msubsup></mrow><mrow><munderover><mo>∑</mo><mrow><mi>f</mi><mo>=</mo><mn>1</mn></mrow><mi>p</mi></munderover><msubsup><mi>σ</mi><mrow><mi>i</mi><mi>j</mi></mrow><mrow><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo></mrow></msubsup></mrow></mfrac></mrow><annotation encoding="application/x-tex">d(i,j)=\frac{\sum_{f=1}^p\sigma^{(f)}_{ij}d_{ij}^{(f)}}{\sum_{f=1}^p\sigma^{(f)}_{ij}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.2412em;vertical-align:-1.3706em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8706em;"><span style="top:-2.11em;"><span class="pstrut" style="height:3.0448em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4358em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.413em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.2748em;"><span class="pstrut" style="height:3.0448em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.8706em;"><span class="pstrut" style="height:3.0448em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4358em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.413em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.413em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3706em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>emmm，这个意思就是，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>σ</mi><mrow><mi>i</mi><mi>j</mi></mrow><mrow><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">\sigma^{(f)}_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4578em;vertical-align:-0.413em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.413em;"><span></span></span></span></span></span></span></span></span></span>表示对象<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">i,j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>之间是否具有共同的属性<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span>，我们只统计具有共同属性的，没有的话<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span>就将被设置为0</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">None</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="数据分析" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>计算莫兰指数和Geary&#39;s C 空间自相关程度</title>
    <link href="http://example.com/2022/10/06/%E3%80%90%E7%A9%BA%E9%97%B4%E5%88%86%E6%9E%90%E3%80%91%E7%A9%BA%E9%97%B4%E8%87%AA%E7%9B%B8%E5%85%B3/"/>
    <id>http://example.com/2022/10/06/%E3%80%90%E7%A9%BA%E9%97%B4%E5%88%86%E6%9E%90%E3%80%91%E7%A9%BA%E9%97%B4%E8%87%AA%E7%9B%B8%E5%85%B3/</id>
    <published>2022-10-06T04:32:32.000Z</published>
    <updated>2022-10-17T08:10:58.251Z</updated>
    
    <content type="html"><![CDATA[<h1>计算莫兰指数和Geary’s C 空间自相关程度</h1><hr><p><strong>卷积核类型</strong></p><img src="/2022/10/06/%E3%80%90%E7%A9%BA%E9%97%B4%E5%88%86%E6%9E%90%E3%80%91%E7%A9%BA%E9%97%B4%E8%87%AA%E7%9B%B8%E5%85%B3/image-20221006165257287.png" alt="image-20221006165257287" style="zoom:50%;"><p>常见的卷积核为Rook,Bishop,Queen，如上图所示。</p><p><strong>Molan’s I</strong></p><img src="/2022/10/06/%E3%80%90%E7%A9%BA%E9%97%B4%E5%88%86%E6%9E%90%E3%80%91%E7%A9%BA%E9%97%B4%E8%87%AA%E7%9B%B8%E5%85%B3/image-20221006165428724.png" alt="image-20221006165428724" style="zoom:50%;"><p><strong>Geary’s C</strong></p><img src="/2022/10/06/%E3%80%90%E7%A9%BA%E9%97%B4%E5%88%86%E6%9E%90%E3%80%91%E7%A9%BA%E9%97%B4%E8%87%AA%E7%9B%B8%E5%85%B3/image-20221006165334932.png" alt="image-20221006165334932" style="zoom:50%;"><p><strong>代码实现为</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用空间统计量Moran和Geary计算遥感数据的自相关程度</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getMoranV</span>(<span class="params">path,t=<span class="number">0</span>,method=<span class="string">&quot;Moran&quot;</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    :param path: 图像路径</span></span><br><span class="line"><span class="string">    :param t: 卷积核类型</span></span><br><span class="line"><span class="string">    :param method: 空间自相关方法</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 读取数据</span></span><br><span class="line">    wb1 = pd.read_excel(path, index_col=<span class="number">0</span>)</span><br><span class="line">    data = wb1.values</span><br><span class="line">    n, m = wb1.shape</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义卷积核</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># queen 卷积</span></span><br><span class="line">    dir2 = [[<span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, -<span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, -<span class="number">1</span>], [-<span class="number">1</span>, <span class="number">1</span>], [-<span class="number">1</span>, -<span class="number">1</span>]]</span><br><span class="line">    <span class="comment"># Rook 卷积</span></span><br><span class="line">    dir1 = [[<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>], [-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, -<span class="number">1</span>]]</span><br><span class="line">    <span class="comment"># Bishop 卷积</span></span><br><span class="line">    dir3=[[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,-<span class="number">1</span>],[-<span class="number">1</span>,<span class="number">1</span>],[-<span class="number">1</span>,-<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> t==<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">dir</span>=dir1</span><br><span class="line">    <span class="keyword">elif</span> t==<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">dir</span>=dir2</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">dir</span>=dir3</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开辟O(n^4)权重矩阵</span></span><br><span class="line">    <span class="comment"># 这玩意很耗内存，所以可以考虑用局部计算代替全局计算</span></span><br><span class="line">    a = [[<span class="number">0</span>]*(n*m) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>((n*m))]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="comment"># 二维的点转到一维</span></span><br><span class="line">            loc = i * m + j  <span class="comment"># 一维上的坐标</span></span><br><span class="line">            <span class="comment"># 找到他在二维上的临界点</span></span><br><span class="line">            <span class="keyword">for</span> detX, detY <span class="keyword">in</span> <span class="built_in">dir</span>:</span><br><span class="line">                x = i + detX</span><br><span class="line">                y = j + detY</span><br><span class="line">                <span class="comment"># 转化为一维</span></span><br><span class="line">                <span class="comment"># 边界处理</span></span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span> &lt;= x &lt; m <span class="keyword">and</span> <span class="number">0</span> &lt;= y &lt; m:</span><br><span class="line">                    a[loc][x * m + y] = <span class="number">1</span>  <span class="comment"># 表示临接</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">moranIndex</span>(<span class="params">data,weight</span>):</span><br><span class="line">        <span class="comment"># 莫兰指数计算</span></span><br><span class="line">        s_0=np.<span class="built_in">sum</span>(np.<span class="built_in">sum</span>(weight))</span><br><span class="line">        n,m=<span class="built_in">len</span>(data),<span class="built_in">len</span>(data[<span class="number">0</span>])</span><br><span class="line">        x_hat=np.mean(data)</span><br><span class="line">        up_sum=<span class="number">0</span></span><br><span class="line">        down_sum=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">                <span class="comment"># 下一轮</span></span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">not</span> (val:=weight[i*m+j][x*m+y]):</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        up_sum+=val*(data[i][j]-x_hat)*(data[x][y]-x_hat)</span><br><span class="line">                down_sum+=(data[i][j]-x_hat)**<span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> (n*m/s_0)*(up_sum/down_sum)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Geary_C</span>(<span class="params">data,weight</span>):</span><br><span class="line">        <span class="comment"># Geary&#x27;s C计算</span></span><br><span class="line">        s_0=np.<span class="built_in">sum</span>(np.<span class="built_in">sum</span>(weight))*<span class="number">2</span></span><br><span class="line">        n, m = <span class="built_in">len</span>(data), <span class="built_in">len</span>(data[<span class="number">0</span>])</span><br><span class="line">        x_hat = np.mean(data)</span><br><span class="line">        up_sum = <span class="number">0</span></span><br><span class="line">        down_sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">                <span class="comment"># 下一轮</span></span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">not</span> (val := weight[i * m + j][x * m + y]):</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        up_sum += val * (data[i][j] - data[x][y])**<span class="number">2</span></span><br><span class="line">                down_sum += (data[i][j] - x_hat) ** <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> ((n*m-<span class="number">1</span>)/(s_0))*(up_sum/down_sum)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (M:=method.upper())==<span class="string">&quot;MORAN&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> moranIndex(data,a)</span><br><span class="line">    <span class="keyword">elif</span> M==<span class="string">&quot;GEARY&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> Geary_C(data,a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getHelp</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Method: &#123;&#x27;Moran&#x27;,&#x27;Geary&#x27;&#125;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;t: &#123;0:Rook,1:Queen,2:bishop&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    getHelp()</span><br><span class="line">    path = <span class="string">r&quot;data.xlsx&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;墨兰指数为: %s&quot;</span>%getMoranV(path,<span class="number">0</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Geary&#x27;s C为: %s&quot;</span>%getMoranV(path,<span class="number">0</span>,<span class="string">&quot;Geary&quot;</span>))</span><br></pre></td></tr></table></figure><p><strong>输出结果为</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Method: &#123;<span class="string">&#x27;Moran&#x27;</span>,<span class="string">&#x27;Geary&#x27;</span>&#125;</span><br><span class="line">t: &#123;<span class="number">0</span>:Rook,<span class="number">1</span>:Queen,<span class="number">2</span>:bishop&#125;</span><br><span class="line">墨兰指数为: <span class="number">0.5579039646993681</span></span><br><span class="line">Geary<span class="string">&#x27;s C为: 0.4355131948652942</span></span><br></pre></td></tr></table></figure><p><strong>优化</strong></p><p>我们发现，这样子需要开辟<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">n^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span>大小的权重矩阵，且需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>4</mn><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><msup><mi>n</mi><mn>4</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(4n^2+n^4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">4</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>也就是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>4</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的时间复杂度，那能不能对其做一些剪枝，降低复杂度呢？</p><p>我们可以动态开辟空间权重矩阵，从而将空间复杂度降低到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>M</mi><mo>∗</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(M*n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>表示卷积核的有效大小。(非空洞大小)</p><p>这样子也能将时间复杂度降低为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>M</mi><mo>∗</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(M*n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，也就是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>级别。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用空间统计量Moran和Geary计算遥感数据的自相关程度</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getMoranV</span>(<span class="params">path,val=<span class="number">1</span>,t=<span class="number">0</span>,method=<span class="string">&quot;Moran&quot;</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    :param path: 图像路径</span></span><br><span class="line"><span class="string">    :param t: 卷积核类型</span></span><br><span class="line"><span class="string">    :param method: 空间自相关方法</span></span><br><span class="line"><span class="string">    :param val: 空间权重</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 读取数据</span></span><br><span class="line">    wb1 = pd.read_excel(path, index_col=<span class="number">0</span>)</span><br><span class="line">    data = wb1.values</span><br><span class="line">    n, m = wb1.shape</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义卷积核</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># queen 卷积</span></span><br><span class="line">    dir2 = [[<span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, -<span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, -<span class="number">1</span>], [-<span class="number">1</span>, <span class="number">1</span>], [-<span class="number">1</span>, -<span class="number">1</span>]]</span><br><span class="line">    <span class="comment"># Rook 卷积</span></span><br><span class="line">    dir1 = [[<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>], [-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, -<span class="number">1</span>]]</span><br><span class="line">    <span class="comment"># Bishop 卷积</span></span><br><span class="line">    dir3=[[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,-<span class="number">1</span>],[-<span class="number">1</span>,<span class="number">1</span>],[-<span class="number">1</span>,-<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> t==<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">dir</span>=dir1</span><br><span class="line">    <span class="keyword">elif</span> t==<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">dir</span>=dir2</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">dir</span>=dir3</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开辟O(n^4)权重矩阵</span></span><br><span class="line">    <span class="comment"># 这玩意很耗内存，所以可以考虑用局部计算代替全局计算</span></span><br><span class="line">    a = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n*m)]</span><br><span class="line">    a_weight=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="comment"># 找到他在二维上的临界点</span></span><br><span class="line">            loc=i*m+j</span><br><span class="line">            <span class="keyword">for</span> detX, detY <span class="keyword">in</span> <span class="built_in">dir</span>:</span><br><span class="line">                x = i + detX</span><br><span class="line">                y = j + detY</span><br><span class="line">                <span class="comment"># 转化为一维</span></span><br><span class="line">                <span class="comment"># 边界处理</span></span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span> &lt;= x &lt; n <span class="keyword">and</span> <span class="number">0</span> &lt;= y &lt; m:</span><br><span class="line">                    a[loc].append([x,y,val])</span><br><span class="line">                    a_weight+=val</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">moranIndex</span>(<span class="params">data,weight</span>):</span><br><span class="line">        <span class="comment"># 莫兰指数计算</span></span><br><span class="line">        <span class="comment"># s_0=np.sum(np.sum(weight))</span></span><br><span class="line">        s_0=a_weight</span><br><span class="line">        n,m=<span class="built_in">len</span>(data),<span class="built_in">len</span>(data[<span class="number">0</span>])</span><br><span class="line">        x_hat=np.mean(data)</span><br><span class="line">        up_sum=<span class="number">0</span></span><br><span class="line">        down_sum=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">                <span class="comment"># 下一轮</span></span><br><span class="line">                loc=i*m+j</span><br><span class="line">                <span class="keyword">for</span> v <span class="keyword">in</span> weight[loc]:</span><br><span class="line">                    up_sum+=v[<span class="number">2</span>]*(data[i][j]-x_hat)*(data[v[<span class="number">0</span>]][v[<span class="number">1</span>]]-x_hat)</span><br><span class="line">                down_sum+=(data[i][j]-x_hat)**<span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> (n*m/s_0)*(up_sum/down_sum)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Geary_C</span>(<span class="params">data,weight</span>):</span><br><span class="line">        <span class="comment"># Geary&#x27;s C计算</span></span><br><span class="line">        s_0=a_weight*<span class="number">2</span></span><br><span class="line">        n, m = <span class="built_in">len</span>(data), <span class="built_in">len</span>(data[<span class="number">0</span>])</span><br><span class="line">        x_hat = np.mean(data)</span><br><span class="line">        up_sum = <span class="number">0</span></span><br><span class="line">        down_sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">                <span class="comment"># 下一轮</span></span><br><span class="line">                loc = i * m + j</span><br><span class="line">                <span class="keyword">for</span> v <span class="keyword">in</span> weight[loc]:</span><br><span class="line"></span><br><span class="line">                    up_sum += v[<span class="number">2</span>] * (data[i][j] - data[v[<span class="number">0</span>]][v[<span class="number">1</span>]])**<span class="number">2</span></span><br><span class="line">                down_sum += (data[i][j] - x_hat) ** <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> ((n*m-<span class="number">1</span>)/(s_0))*(up_sum/down_sum)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (M:=method.upper())==<span class="string">&quot;MORAN&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> moranIndex(data,a)</span><br><span class="line">    <span class="keyword">elif</span> M==<span class="string">&quot;GEARY&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> Geary_C(data,a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getHelp</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Method: &#123;&#x27;Moran&#x27;,&#x27;Geary&#x27;&#125;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;t: &#123;0:Rook,1:Queen,2:bishop&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    getHelp()</span><br><span class="line">    path = <span class="string">r&quot;\data.xlsx&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;墨兰指数为: %s&quot;</span>%getMoranV(path,val=<span class="number">1</span>,t=<span class="number">0</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Geary&#x27;s C为: %s&quot;</span>%getMoranV(path,val=<span class="number">1</span>,t=<span class="number">0</span>,method=<span class="string">&quot;Geary&quot;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="栗子-海洋表面温度-SST-逐月计算空间自相关变化情况">栗子----海洋表面温度(SST)逐月计算空间自相关变化情况</h3><p><strong>数据</strong></p><img src="/2022/10/06/%E3%80%90%E7%A9%BA%E9%97%B4%E5%88%86%E6%9E%90%E3%80%91%E7%A9%BA%E9%97%B4%E8%87%AA%E7%9B%B8%E5%85%B3/image-20221017153246439.png" alt="image-20221017153246439" style="zoom:50%;"><p><code>dim0</code>表示时间维度，<code>dim1</code>表示维度，<code>dim2</code>表示经度</p><p>我们需要对数据进行处理，此时并不是excel数据，直接转为DataFrame,并在API中修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wb1 = path.read_excel(path)</span><br></pre></td></tr></table></figure><p>为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wb1=path</span><br></pre></td></tr></table></figure><p><strong>处理</strong></p><p>逐月遍历数据即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(data.shape[<span class="number">0</span>]): </span><br><span class="line">    <span class="type">List</span>.append(getMoranV(pd.DataFrame(data[i]),val=<span class="number">1</span>,t=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p><strong>结果可视化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">6</span>))</span><br><span class="line">plt.plot(<span class="built_in">range</span>((v:=data.shape[<span class="number">0</span>])),<span class="type">List</span>,<span class="string">&#x27;r-&#x27;</span>)</span><br><span class="line">Mean=<span class="built_in">sum</span>(<span class="type">List</span>)/(<span class="built_in">len</span>(<span class="type">List</span>))</span><br><span class="line">plt.plot(<span class="built_in">range</span>(v),[Mean]*v,<span class="string">&#x27;b&#x27;</span>,linestyle=<span class="string">&#x27;--&#x27;</span>,alpha=<span class="number">0.2</span>)</span><br><span class="line">plt.title(<span class="string">&quot;基于Queen邻接的SST空间自相关月变化&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;时间&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;日期&quot;</span>)</span><br><span class="line">T=[]</span><br><span class="line">M,Y=<span class="number">1</span>,<span class="number">1990</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">360</span>):</span><br><span class="line">    T.append(<span class="string">&quot;%s年%s月&quot;</span>%(Y,M))</span><br><span class="line">    <span class="keyword">if</span> M%<span class="number">12</span>==<span class="number">0</span>:</span><br><span class="line">        M=<span class="number">1</span></span><br><span class="line">        Y+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        M+=<span class="number">1</span></span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="number">360</span>)[::<span class="number">20</span>],T[::<span class="number">20</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2022/10/06/%E3%80%90%E7%A9%BA%E9%97%B4%E5%88%86%E6%9E%90%E3%80%91%E7%A9%BA%E9%97%B4%E8%87%AA%E7%9B%B8%E5%85%B3/%E4%B8%8B%E8%BD%BD.png" alt="下载"></p><hr><p><strong>绘制逐月动图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>=[[]]</span><br><span class="line">t=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> t&lt;data.shape[<span class="number">0</span>]:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="type">List</span>[-<span class="number">1</span>])==<span class="number">12</span>:</span><br><span class="line">        <span class="type">List</span>.append([])</span><br><span class="line">    <span class="type">List</span>[-<span class="number">1</span>].append(getMoranV(pd.DataFrame(data[t]),val=<span class="number">1</span>,t=<span class="number">1</span>))</span><br><span class="line">    t+=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>我们通过二维列表的方式对年份加以区分，这也是常见的手段。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逐年绘制</span></span><br><span class="line">path=<span class="string">r&quot;\yourpath&quot;</span></span><br><span class="line">timeList=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="type">List</span>)):</span><br><span class="line">    lis=<span class="type">List</span>[i]</span><br><span class="line">    plt.figure(figsize=(<span class="number">20</span>,<span class="number">6</span>))</span><br><span class="line">    plt.plot(<span class="built_in">range</span>(<span class="number">12</span>),lis,<span class="string">&#x27;r-&#x27;</span>)</span><br><span class="line">    Mean=<span class="built_in">sum</span>(lis)/<span class="number">12</span></span><br><span class="line">    plt.plot(<span class="built_in">range</span>(<span class="number">12</span>),[Mean]*<span class="number">12</span>,<span class="string">&#x27;b&#x27;</span>,linestyle=<span class="string">&#x27;--&#x27;</span>,alpha=<span class="number">0.2</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;%s年&quot;</span>%(i+<span class="number">1990</span>))</span><br><span class="line">    plt.xticks(<span class="built_in">range</span>(<span class="number">12</span>),[<span class="string">&quot;%s月&quot;</span>%(m+<span class="number">1</span>) <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>)])</span><br><span class="line">    plt.savefig((val:=path+<span class="string">&quot;\\&quot;</span>+<span class="string">&quot;%s.png&quot;</span>%i),dpi=<span class="number">200</span>)</span><br><span class="line">    timeList.append(val)</span><br></pre></td></tr></table></figure><p>接着就是正常的绘制，我们需要将图像存储下来，并记录存储位置。</p><p>通过<code>imageio</code>模块制作动图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">IMG=[]</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> imageio</span><br><span class="line">path=<span class="string">r&quot;\yourpath&quot;</span></span><br><span class="line">lis=os.listdir(path)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lis:</span><br><span class="line">    <span class="keyword">if</span> i.endswith(<span class="string">&quot;.png&quot;</span>):</span><br><span class="line">        IMG.append(imageio.imread(path+<span class="string">&quot;\\&quot;</span>+i))</span><br><span class="line">imageio.mimsave(path+<span class="string">&quot;\\&quot;</span>+<span class="string">&quot;GIF1.gif&quot;</span>,IMG,<span class="string">&quot;GIF&quot;</span>,duration=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p><img src="/2022/10/06/%E3%80%90%E7%A9%BA%E9%97%B4%E5%88%86%E6%9E%90%E3%80%91%E7%A9%BA%E9%97%B4%E8%87%AA%E7%9B%B8%E5%85%B3/GIF1.gif" alt="GIF1"></p><p><img src="/2022/10/06/%E3%80%90%E7%A9%BA%E9%97%B4%E5%88%86%E6%9E%90%E3%80%91%E7%A9%BA%E9%97%B4%E8%87%AA%E7%9B%B8%E5%85%B3/GIF2.gif" alt="GIF2"></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;计算莫兰指数和Geary’s C 空间自相关程度&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;卷积核类型&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;/2022/10/06/%E3%80%90%E7%A9%BA%E9%97%B4%E5%88%86%E6%9E%90%E3%</summary>
      
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="空间分析" scheme="http://example.com/tags/%E7%A9%BA%E9%97%B4%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>【算法与数据结构】并查集</title>
    <link href="http://example.com/2022/09/26/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>http://example.com/2022/09/26/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E5%B9%B6%E6%9F%A5%E9%9B%86/</id>
    <published>2022-09-26T14:17:21.350Z</published>
    <updated>2022-10-05T17:25:49.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言-v4">前言</h2><p>这个总结拖了好久hhh，一个月前就想搞了，一直拖到现在。这个总结并不是从【并查集】的<code>Introduction</code>和<code>background</code>开始的，侧重点在于运用方面。</p><p>先放个<code>Python</code>的板子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UnionSet</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n</span>):</span><br><span class="line">        <span class="comment"># 多少个帮派</span></span><br><span class="line">        self.parents=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        <span class="comment"># 每个帮派有多少实力</span></span><br><span class="line">        self.rank[<span class="number">0</span>]*n</span><br><span class="line">        <span class="comment"># 吞并之后的帮派数量</span></span><br><span class="line">        self.count=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="comment"># 摇人规则</span></span><br><span class="line">        <span class="keyword">if</span> self.parents[x]!=x:</span><br><span class="line">            <span class="comment"># 一直找到大老板为止</span></span><br><span class="line">            <span class="comment"># 把沿途遇到的小老板的联系方式替换成大老板</span></span><br><span class="line">            self.parents[x]=self.find(self.parents[x])</span><br><span class="line">        <span class="keyword">return</span> self.parents[x]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">union</span>(<span class="params">self,a,b</span>):</span><br><span class="line">        <span class="comment"># 吞并规则</span></span><br><span class="line">        roota,rootb=self.find(a),self.find(b)</span><br><span class="line">        <span class="comment"># 不是一派</span></span><br><span class="line">        <span class="keyword">if</span> roota!=rootb:</span><br><span class="line">            <span class="comment"># 小帮派并入大帮派</span></span><br><span class="line">            <span class="keyword">if</span> self.rank[roota]&lt;self.rank[rootb]:</span><br><span class="line">                roota,rootb=rootb,roota</span><br><span class="line">            self.parents[rootb]=roota</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> self.rank[roota]==self.rank[rootb]:</span><br><span class="line">                <span class="comment"># 同级别的情况下，能够百尺竿头更进一步</span></span><br><span class="line">                self.rank[roota]+=<span class="number">1</span></span><br><span class="line">            self.count-=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getCount</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.count</span><br></pre></td></tr></table></figure><p>当然这个板子略显复杂，我们也不需要额外开一个类去定义并查集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function</span>(<span class="params">self,data</span>):</span><br><span class="line">        n=<span class="built_in">len</span>(data)</span><br><span class="line">        pa=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="keyword">if</span> pa[x]!=x:</span><br><span class="line">                pa[x]=find(pa[x])</span><br><span class="line">            <span class="keyword">return</span> pa[x]</span><br><span class="line">       </span><br><span class="line">        <span class="comment"># 看情况修改</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">if</span> i&lt;j: <span class="comment"># 是否连通</span></span><br><span class="line">                    ri,rj=find(i),find(j) <span class="comment"># 合并规则</span></span><br><span class="line">                    <span class="keyword">if</span> ri!=rj:</span><br><span class="line">                        pa[rj]=ri <span class="comment"># 合并</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>([<span class="number">1</span> <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(pa) <span class="keyword">if</span> pa[i]==j]) <span class="comment"># 看情况修改 这里是统计连通块数量</span></span><br></pre></td></tr></table></figure><p>再贴一个Python3的精简版本，<code>:=</code>赋值符号只能在<code>py3.8</code>及以上的版本用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n</span>):</span><br><span class="line">self.pa=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">self,x</span>):</span><br><span class="line"><span class="keyword">if</span> self.pa[x]!=x:</span><br><span class="line">            self.pa[x]=self.find(self.pa[x])</span><br><span class="line">         <span class="keyword">return</span> pa[x]</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">union</span>(<span class="params">self,a,b</span>):</span><br><span class="line">        <span class="keyword">if</span> (roota:=self.find(a))!=(rootb:=self.find(b)):</span><br><span class="line">            self.pa[rootb]=roota</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isConnect</span>(<span class="params">self,a,b</span>):</span><br><span class="line">        <span class="keyword">return</span> self.find(a)==self.find(b)</span><br></pre></td></tr></table></figure><hr><h2 id="并查集">并查集</h2><h3 id="一、概念介绍">一、概念介绍</h3><blockquote><p>所谓并查集(Union-find Data Structure),是一种用于快速处理不交集合并及查询问题的树形结构</p></blockquote><hr><p><strong>为什么需要提出并查集呢？</strong>❓</p><p>在图结构中，除却节点、边本身的性质，我们注意到还有不少性质尤为重要，其中就包括了拓扑结构。而最简单的一种拓扑结构，就是<code>连通关系</code>。</p><p>如何处理这种连通关系呢？如果通过新开一个数组的方式存储，那么每次查询都需要遍历每个元素，时间复杂度会比较高，且空间开销也比较大。</p><p>我们注意到，许多连通的元素可以单独构成一个整体，能不能选择其中有<code>代表性的一个</code>，作为代言人呢？这样，我们检查连通性的时候，只需要找到这个代言人，看看<code>两个连通块之间的代言人是否相同</code>，就能处理连通关系啦。</p><p><strong>举个栗子</strong></p><p>现在有五个城市<code>A,B,C,D,E</code>，他们之间有的开通了高铁，有的并没有。比如<code>A,B,C</code>之间开通了高铁，那么假如<code>D</code>要跟其中之一也开通高铁，此时，<code>D</code>和其他三个都能连通，形成了连通块。我们就不需要一一去存储三个城市啦，只需要将<code>D</code>保存到<code>A,B,C</code>连通块中，将连通块变成<code>A,B,C,D</code>就阔以啦。</p><hr><p><strong>并查集的结构是怎么样的呢？🏛️</strong></p><p>通过前文的论述，我们发现，并查集本质上就是一个存储连通关系的结构！这个结构为每个元素维护了一个<code>代表数据</code>，这个<code>代表数据</code>也就是每个连通块的区分数据。在实际中，这个代表数据可以是节点，可以是最大值，可以是统计量等。为了找到这个<code>代表数据</code>,我们还需要一个<code>寻址方法</code>。进一步的，可以通过<code>路径压缩</code>对<code>寻址方法进行优化</code>。</p><p>除却上述两个最重要的元素，并查集还可以维护一个<code>rank</code>数组，用来评估块的信息量。</p><table><thead><tr><th style="text-align:center">元素</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">parents</td><td style="text-align:center">连通块的代表元素，或者说，节点的<code>boss</code></td></tr><tr><td style="text-align:center">rank</td><td style="text-align:center">连通块的信息量</td></tr><tr><td style="text-align:center">find(x)</td><td style="text-align:center">寻址方法</td></tr><tr><td style="text-align:center">merge(a,b)</td><td style="text-align:center">合并方法</td></tr></tbody></table><hr><p><strong>特殊变化–带权并查集</strong></p><p>我们说对于无权图的连通性，并查集能够很好的进行适配与处理，那么对于有权图呢？是否也可以通过并查集进行处理？</p><p>答案是肯定的，并查集可以起到统一度量衡的作用，但是必须在结构上做一定的修改。</p><p>我们假设带权边的权重数组为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">w[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span>表示第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>条边相对于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">root</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">roo</span><span class="mord mathnormal">t</span></span></span></span>节点的权重。</p><p>在寻址(find)过程中，我们需要进行如下操作：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mfrac><mi>i</mi><mrow><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi></mrow></mfrac><mo>=</mo><mfrac><mi>i</mi><mrow><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>n</mi><msub><mi>t</mi><mi>i</mi></msub></mrow></mfrac><mo>×</mo><mfrac><mrow><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>n</mi><msub><mi>t</mi><mi>i</mi></msub></mrow><mrow><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">w[i]=\frac{i}{root}=\frac{i}{parent_i}\times\frac{parent_i}{root}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0225em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">roo</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.217em;vertical-align:-0.8804em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">re</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.9781em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2921em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">roo</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">re</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>这是一条权重链，确保并查集中每个子集都能以根节点为基准进行定标。</p><p>在加入(union)的过程中，我们需要对其进行如下更新：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>假设 </mtext><mi>y</mi><mtext> 加入 </mtext><mi>x</mi><mtext> </mtext><mspace linebreak="newline"></mspace><mi>w</mi><mo stretchy="false">[</mo><mi>r</mi><mi>o</mi><mi>o</mi><msub><mi>t</mi><mi>y</mi></msub><mo stretchy="false">]</mo><mo>=</mo><mfrac><mrow><mi>r</mi><mi>o</mi><mi>o</mi><msub><mi>t</mi><mi>y</mi></msub></mrow><mrow><mi>r</mi><mi>o</mi><mi>o</mi><msub><mi>t</mi><mi>x</mi></msub></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>y</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>w</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><mrow><mi>w</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>x</mi></mrow></mfrac><mspace linebreak="newline"></mspace><mo>=</mo><mfrac><mi>y</mi><mi>x</mi></mfrac><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mfrac><mrow><mi>w</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><mrow><mi>w</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo></mrow></mfrac><mspace linebreak="newline"></mspace><mtext>令</mtext><mi>k</mi><mo>=</mo><mfrac><mi>y</mi><mi>x</mi></mfrac><mtext>，即</mtext><mo>:</mo><mi>w</mi><mo stretchy="false">[</mo><mi>r</mi><mi>o</mi><mi>o</mi><msub><mi>t</mi><mi>y</mi></msub><mo stretchy="false">]</mo><mo>=</mo><mi>k</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mfrac><mrow><mi>w</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><mrow><mi>w</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">假设 \ y\ 加入\ x\ \\w[root_y]=\frac{root_y}{root_x}=\frac{y\ \cdot\ w[x]}{w[y]\ \cdot\ x}\\=\frac{y}{x}\ \cdot\ \frac{w[x]}{w[y]}\\令k=\frac{y}{x}，即:w[root_y]=k\ \cdot\ \frac{w[x]}{w[y]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">假设</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace"> </span><span class="mord cjk_fallback">加入</span><span class="mspace"> </span><span class="mord mathnormal">x</span><span class="mspace"> </span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal">roo</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1281em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2921em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">roo</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">roo</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord cjk_fallback">令</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord cjk_fallback">，即</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal">roo</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>如此，便在查询和合并的过程中实现了权值的链式更新。所有树结构上的值都是以根节点作为基准进行变换得到的，因此，同分支上(同个连通块)实现了可比性。</p><hr><p><strong>板子怎么写？</strong></p><p>这边不图快，正二八经的贴一个并查集板子。</p><p><code>python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UnionSet</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n</span>):</span><br><span class="line">        <span class="comment"># 多少个帮派</span></span><br><span class="line">        self.parents=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        <span class="comment"># 每个帮派有多少实力</span></span><br><span class="line">        self.rank[<span class="number">0</span>]*n</span><br><span class="line">        <span class="comment"># 吞并之后的帮派数量</span></span><br><span class="line">        self.count=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="comment"># 摇人规则</span></span><br><span class="line">        <span class="keyword">if</span> self.parents[x]!=x:</span><br><span class="line">            <span class="comment"># 一直找到大老板为止</span></span><br><span class="line">            <span class="comment"># 把沿途遇到的小老板的联系方式替换成大老板</span></span><br><span class="line">            self.parents[x]=self.find(self.parents[x])</span><br><span class="line">        <span class="keyword">return</span> self.parents[x]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">union</span>(<span class="params">self,a,b</span>):</span><br><span class="line">        <span class="comment"># 吞并规则</span></span><br><span class="line">        roota,rootb=self.find(a),self.find(b)</span><br><span class="line">        <span class="comment"># 不是一派</span></span><br><span class="line">        <span class="keyword">if</span> roota!=rootb:</span><br><span class="line">            <span class="comment"># 小帮派并入大帮派</span></span><br><span class="line">            <span class="keyword">if</span> self.rank[roota]&lt;self.rank[rootb]:</span><br><span class="line">                roota,rootb=rootb,roota</span><br><span class="line">            self.parents[rootb]=roota</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> self.rank[roota]==self.rank[rootb]:</span><br><span class="line">                <span class="comment"># 同级别的情况下，能够百尺竿头更进一步</span></span><br><span class="line">                self.rank[roota]+=<span class="number">1</span></span><br><span class="line">            self.count-=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getCount</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.count</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isConnect</span>(<span class="params">self,a,b</span>):</span><br><span class="line">        <span class="keyword">return</span> find(a)==find(b)</span><br></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">UnionFind</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] parent;</span><br><span class="line">        <span class="type">int</span>[] rank;</span><br><span class="line">        <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">UnionFind</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">            parent=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            rank=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            count=n;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                parent[i]=i;</span><br><span class="line">                rank[i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (parent[i] != i) parent[i] = find(parent[i]);</span><br><span class="line">            <span class="keyword">return</span> parent[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rootx</span> <span class="operator">=</span> find(x);</span><br><span class="line">            <span class="type">int</span> <span class="variable">rooty</span> <span class="operator">=</span> find(y);</span><br><span class="line">            <span class="keyword">if</span> (rootx != rooty) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rank[rootx] &gt; rank[rooty]) &#123;</span><br><span class="line">                    parent[rooty] = rootx;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rank[rootx] &lt; rank[rooty]) &#123;</span><br><span class="line">                    parent[rootx] = rooty;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    parent[rooty] = rootx;</span><br><span class="line">                    rank[rootx] += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="二、题目类型">二、题目类型</h3><p>每种类型的题大概会挑比较经典的两三题讲一讲，并提炼思路与套路。</p><h3 id="常见类型：连通块大小"><strong>常见类型：连通块大小</strong></h3><blockquote><p>此类问题是最常见的问题，例如经典的岛屿问题</p></blockquote><hr><h4 id="1️⃣-LC200-岛屿数量">1️⃣ LC200 岛屿数量</h4><p>来自：<a href="https://leetcode.cn/problems/number-of-islands">https://leetcode.cn/problems/number-of-islands</a></p><p>给你一个由 ‘1’（陆地）和 ‘0’（水）组成的的二维网格，请你计算网格中岛屿的数量。</p><p>岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。</p><p>此外，你可以假设该网格的四条边均被水包围。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [</span><br><span class="line">  [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>]</span><br><span class="line">]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">输入：grid = [</span><br><span class="line">  [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>]</span><br><span class="line">]</span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>思路</strong></p><p>因为是UF的归纳，所以这边我们不用其他方法做了。</p><p>我们只需要将上下左右都是&quot;1&quot;的元素加入并查集即可。</p><p><strong>注意点</strong></p><ul><li>最开始初始化并查集的时候，需要用一个字段<code>c</code>记录元素的数量</li><li>当任意两个集合合并为一个集合时，令字段<code>c</code>减一</li><li>从右上往左下遍历，我们不需要找四个方向，只需要找左下两个方向即可(做个小剪枝)</li><li>即：<code>for x,y in [(i+1,j),(i,j+1)] </code>可以思考为什么能做剪枝、</li></ul><p><strong>实质</strong></p><p>连通块的大小</p><p><strong>实现</strong></p><p>由于这是第一题，我们贴一个低耦合的写法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numIslands</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        m=<span class="built_in">len</span>(grid)</span><br><span class="line">        <span class="keyword">if</span> m==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        n=<span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">        u=UnionSet(grid)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> grid[i][j]==<span class="string">&quot;1&quot;</span>:</span><br><span class="line">                <span class="comment"># 避免重复计数</span></span><br><span class="line">                    <span class="comment"># 往左下找</span></span><br><span class="line">                    <span class="keyword">for</span> a,b <span class="keyword">in</span> [(i+<span class="number">1</span>,j),(i,j+<span class="number">1</span>)]:</span><br><span class="line">                        <span class="keyword">if</span> a&lt;m <span class="keyword">and</span> b&lt;n <span class="keyword">and</span> grid[a][b]==<span class="string">&quot;1&quot;</span>:</span><br><span class="line">                            <span class="comment"># 找到小弟了，吸收进帮派</span></span><br><span class="line">                            u.union(i*n+j,a*n+b)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> u.getCount()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnionSet</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,grid</span>):</span><br><span class="line">        <span class="comment"># 多少个帮派</span></span><br><span class="line">        self.m,self.n=<span class="built_in">len</span>(grid),<span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">        self.parents=[-<span class="number">1</span>]*(self.m*self.n)</span><br><span class="line">        <span class="comment"># 每个帮派有多少实力</span></span><br><span class="line">        self.rank=[<span class="number">0</span>]*(self.m*self.n)</span><br><span class="line">        <span class="comment"># 吞并之后的帮派数量</span></span><br><span class="line">        self.count=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 生成江湖中</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(self.n):</span><br><span class="line">                <span class="comment"># 有能力自成一派</span></span><br><span class="line">                <span class="keyword">if</span> grid[i][j]==<span class="string">&quot;1&quot;</span>:</span><br><span class="line">                    self.parents[i*self.n+j]=i*self.n+j</span><br><span class="line">                    self.count+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="comment"># 摇人规则</span></span><br><span class="line">        <span class="keyword">if</span> self.parents[x]!=x:</span><br><span class="line">            self.parents[x]=self.find(self.parents[x])</span><br><span class="line">        <span class="keyword">return</span> self.parents[x]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">union</span>(<span class="params">self,a,b</span>):</span><br><span class="line">        <span class="comment"># 吞并规则</span></span><br><span class="line">        roota,rootb=self.find(a),self.find(b)</span><br><span class="line">        <span class="comment"># 不是一派</span></span><br><span class="line">        <span class="keyword">if</span> roota!=rootb:</span><br><span class="line">            <span class="comment"># 小帮派并入大帮派</span></span><br><span class="line">            <span class="keyword">if</span> self.rank[roota]&lt;self.rank[rootb]:</span><br><span class="line">                roota,rootb=rootb,roota</span><br><span class="line">            self.parents[rootb]=roota</span><br><span class="line">            <span class="keyword">if</span> self.rank[roota]==self.rank[rootb]:</span><br><span class="line">                <span class="comment"># 同级别的情况下，能够百尺竿头更进一步</span></span><br><span class="line">                self.rank[roota]+=<span class="number">1</span></span><br><span class="line">            self.count-=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getCount</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.count</span><br></pre></td></tr></table></figure><p>上述版本中我们单独维护了<code>UF</code>的结构，方便维护和重复使用。而为了快，也可以将<code>UF</code>直接写到代码块中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numIslands</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        m=<span class="built_in">len</span>(grid)</span><br><span class="line">        <span class="keyword">if</span> m&lt;=<span class="number">0</span>:<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        n=<span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">        cnt=m*n<span class="comment"># 计数</span></span><br><span class="line">        pa=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m*n)] <span class="comment"># 二维展平成一维的父节点</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">x</span>):<span class="comment"># 寻址+路径压缩</span></span><br><span class="line">            <span class="keyword">if</span> pa[x]!=x:</span><br><span class="line">                pa[x]=find(pa[x])</span><br><span class="line">            <span class="keyword">return</span> pa[x]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j]==<span class="string">&quot;1&quot;</span>:<span class="comment"># &quot;1&quot;的时候合并</span></span><br><span class="line">                    <span class="keyword">for</span> x,y <span class="keyword">in</span> [(i+<span class="number">1</span>,j),(i,j+<span class="number">1</span>)]:</span><br><span class="line">                        <span class="keyword">if</span> x&lt;m <span class="keyword">and</span> y&lt;n <span class="keyword">and</span> grid[x][y]==<span class="string">&quot;1&quot;</span>:<span class="comment"># 合并     </span></span><br><span class="line">                            roota,rootb=find(i*n+j),find(x*n+y)</span><br><span class="line">                            <span class="keyword">if</span> roota!=rootb:</span><br><span class="line">                                pa[rootb]=roota</span><br><span class="line">                                cnt-=<span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    cnt-=<span class="number">1</span> <span class="comment"># &quot;0&quot;的时候计数减一</span></span><br><span class="line">        <span class="keyword">return</span> cnt</span><br></pre></td></tr></table></figure><hr><h4 id="2️⃣-LC547省份数量">2️⃣ LC547省份数量</h4><p>来源:<a href="https://leetcode.cn/problems/number-of-provinces/">https://leetcode.cn/problems/number-of-provinces/</a></p><p>有 n 个城市，其中一些彼此相连，另一些没有相连。如果城市 a 与城市 b 直接相连，且城市 b 与城市 c 直接相连，那么城市 a 与城市 c 间接相连。</p><p>省份 是一组直接或间接相连的城市，组内不含其他没有相连的城市。</p><p>给你一个 n x n 的矩阵 isConnected ，其中 isConnected[i][j] = 1 表示第 i 个城市和第 j 个城市直接相连，而 isConnected[i][j] = 0 表示二者不直接相连。</p><p>返回矩阵中 省份 的数量。</p><p><strong>示例</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：isConnected = [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]]</span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>思路</strong></p><p>这题跟200是换汤不换药啊，只不过变成数组了。</p><p>给的是邻接表，这也是图结构中比较重要的一环。通过邻接表，能够快速实现连通关系的构建。</p><p><strong>实质</strong></p><p>连通块的数量</p><p><strong>实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findCircleNum</span>(<span class="params">self, isConnected: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n=<span class="built_in">len</span>(isConnected)</span><br><span class="line">        pa=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        cnt=n</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="keyword">if</span> pa[x]!=x:</span><br><span class="line">                pa[x]=find(pa[x])</span><br><span class="line">            <span class="keyword">return</span> pa[x]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,n): <span class="comment"># 我们只要上三角矩阵就好了</span></span><br><span class="line">                <span class="keyword">if</span> isConnected[i][j]:</span><br><span class="line">                    ri,rj=find(i),find(j)</span><br><span class="line">                    <span class="keyword">if</span> ri!=rj:</span><br><span class="line">                        pa[ri]=rj</span><br><span class="line">                        cnt-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> cnt</span><br></pre></td></tr></table></figure><hr><h4 id="3️⃣-LC695-岛屿的最大面积">3️⃣ LC695 岛屿的最大面积</h4><p><strong>来源</strong>：<a href="https://leetcode.cn/problems/max-area-of-island/">https://leetcode.cn/problems/max-area-of-island/</a></p><p>给你一个大小为 m x n 的二进制矩阵 grid 。</p><p>岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在 水平或者竖直的四个方向上 相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。</p><p>岛屿的面积是岛上值为 1 的单元格的数目。</p><p>计算并返回 grid 中最大的岛屿面积。如果没有岛屿，则返回面积为 0 。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">           [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">           [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">           [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">           [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">           [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">           [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">           [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">输出：<span class="number">6</span></span><br></pre></td></tr></table></figure><p><strong>思想</strong></p><p>遍历整个区域，构建连通块，维护一个最大连通块面积</p><p><strong>实质</strong></p><p>连通块的大小</p><p><strong>实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxAreaOfIsland</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        m,n=<span class="built_in">len</span>(grid),<span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">        pa=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m*n)]</span><br><span class="line">        rank=[<span class="number">1</span>]*(m*n)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="keyword">if</span> pa[x]!=x:</span><br><span class="line">                pa[x]=find(pa[x])</span><br><span class="line">            <span class="keyword">return</span> pa[x]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> grid[i][j]==<span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">for</span> x,y <span class="keyword">in</span> [(i+<span class="number">1</span>,j),(i,j+<span class="number">1</span>)]:</span><br><span class="line">                        <span class="keyword">if</span> x&lt;m <span class="keyword">and</span> y&lt;n <span class="keyword">and</span> grid[x][y]==<span class="number">1</span>:</span><br><span class="line">                            rx,ry=find(i*n+j),find(x*n+y)</span><br><span class="line">                            <span class="keyword">if</span> rx!=ry:</span><br><span class="line">                                <span class="keyword">if</span> rank[rx]&lt;rank[ry]:</span><br><span class="line">                                    rx,ry=ry,rx</span><br><span class="line">                                pa[ry]=rx</span><br><span class="line">                                rank[rx]+=rank[ry]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    rank[i*n+j]=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(rank)</span><br></pre></td></tr></table></figure><p><strong>技巧</strong></p><ul><li>我们将每一个像素点视为一个独立个体，因而整个树的叶子结点有<code>m*n</code>个，<code>pa</code>应该开到这样的空间</li><li>两个连通块合并的时候，可以得到一个新的连通块，这个连通块的大小等于两个连通块之和</li><li>从左上往右下遍历，每次只需要找到右下方向就可以了</li></ul><hr><h4 id="4️⃣-LC952-按公因数计算最大组件大小">4️⃣ LC952 按公因数计算最大组件大小</h4><p>链接：<a href="https://leetcode.cn/problems/largest-component-size-by-common-factor">https://leetcode.cn/problems/largest-component-size-by-common-factor</a></p><p>给定一个由不同正整数的组成的非空数组 nums ，考虑下面的图：</p><p>有 nums.length 个节点，按从 nums[0] 到 nums[nums.length - 1] 标记；<br>只有当 nums[i] 和 nums[j] 共用一个大于 1 的公因数时，nums[i] 和 nums[j]之间才有一条边。<br>返回 图中最大连通组件的大小 。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">4</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">35</span>]</span><br><span class="line">输出：<span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong>思想</strong></p><p>判断公因数，存在公因数时，相当于存在边。因而公因数作为桥梁，可以构建某个点到另一个点的连通块。</p><p><strong>实质</strong></p><p>寻找质因数+并查集</p><p><strong>实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 欧拉筛</span></span><br><span class="line">n=<span class="built_in">int</span>(<span class="number">10e5</span>+<span class="number">1</span>)</span><br><span class="line">isPrime=[<span class="number">1</span>]*n</span><br><span class="line">prime=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n):</span><br><span class="line">    <span class="keyword">if</span> isPrime[i]:</span><br><span class="line">        prime.append(i)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> prime:</span><br><span class="line">        <span class="keyword">if</span> j*i&gt;=n:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        isPrime[j*i]=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> i%j==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">largestComponentSize</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 这题考察点有两个：</span></span><br><span class="line">        <span class="comment"># + 质因数分解</span></span><br><span class="line">        <span class="comment"># + 连通性</span></span><br><span class="line">        <span class="comment"># 质因数分解通过欧拉筛就可以解决</span></span><br><span class="line"></span><br><span class="line">        n=<span class="built_in">max</span>(nums)</span><br><span class="line">        pa=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="keyword">if</span> pa[x]!=x:</span><br><span class="line">                pa[x]=find(pa[x])</span><br><span class="line">            <span class="keyword">return</span> pa[x]</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">union</span>(<span class="params">a,b</span>):</span><br><span class="line">            <span class="keyword">if</span> (ra:=find(a))!=(rb:=find(b)):</span><br><span class="line">                pa[rb]=ra</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> idx,i <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            tem=nums[idx]</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> prime:</span><br><span class="line">                <span class="keyword">if</span> j**<span class="number">2</span>&gt;tem:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="comment"># 公因子连接</span></span><br><span class="line">                <span class="keyword">if</span> tem%j==<span class="number">0</span>:</span><br><span class="line">                    union(i,j)</span><br><span class="line">                <span class="comment"># 去除公因子</span></span><br><span class="line">                <span class="keyword">while</span> tem%j==<span class="number">0</span>:</span><br><span class="line">                    tem//=j</span><br><span class="line">            <span class="keyword">if</span> tem!=<span class="number">1</span>:</span><br><span class="line">                union(tem,i)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(Counter(find(num) <span class="keyword">for</span> num <span class="keyword">in</span> nums).values())</span><br></pre></td></tr></table></figure><hr><h3 id="常见问题：-加入连通块">常见问题： 加入连通块</h3><blockquote><p>此类问题在构建当前连通块后，往往通过加入新的连通块增加难度</p></blockquote><h4 id="1️⃣-LC778-水位上升游泳池">1️⃣ LC778 水位上升游泳池</h4><p><strong>来源:</strong> <a href="https://leetcode.cn/problems/swim-in-rising-water/">https://leetcode.cn/problems/swim-in-rising-water/</a></p><p>在一个 n x n 的整数矩阵 grid 中，每一个方格的值 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mi>r</mi><mi>i</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">grid[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>表示位置 (i, j) 的平台高度。</p><p>当开始下雨时，在时间为 t 时，水池中的水位为 t 。你可以从一个平台游向四周相邻的任意一个平台，但是前提是此时水位必须同时淹没这两个平台。假定你可以瞬间移动无限距离，也就是默认在方格内部游动是不耗时的。当然，在你游泳的时候你必须待在坐标方格里面。</p><p>你从坐标方格的左上平台 (0，0) 出发。返回 你到达坐标方格的右下平台 (n-1, n-1) 所需的最少时间 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: grid = [[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">3</span>]]</span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解释:</span><br><span class="line">时间为<span class="number">0</span>时，你位于坐标方格的位置为 (<span class="number">0</span>, <span class="number">0</span>)。</span><br><span class="line">此时你不能游向任意方向，因为四个相邻方向平台的高度都大于当前时间为 <span class="number">0</span> 时的水位。</span><br><span class="line">等时间到达 <span class="number">3</span> 时，你才可以游向平台 (<span class="number">1</span>, <span class="number">1</span>). 因为此时的水位是 <span class="number">3</span>，坐标方格中的平台没有比水位 <span class="number">3</span> 更高的，所以你可以游向坐标方格中的任意位置</span><br></pre></td></tr></table></figure><p><strong>思路</strong></p><p>因为时间区间给定了，在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>=</mo><mi>n</mi><mo>∗</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">t=n*n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4653em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>的时刻一定能够遍历，所以我们可以通过二分法的方式找到最小可以满足条件的时间。或者呢，我们通过并查集的方式，在每一时刻联通新的节点，判断起点和终点的连通性就可以。当然，为了方便加入联通节点，我们也可以先用<code>hash</code>表记录位置。</p><p><strong>核心</strong></p><p>加入连通块后判断连通性</p><p><strong>实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swimInWater</span>(<span class="params">self, grid</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type grid: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        n=<span class="built_in">len</span>(grid)</span><br><span class="line">        u=UnionFind(n**<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">dir</span>=[[<span class="number">1</span>,<span class="number">0</span>],[-<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,-<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 为了方便遍历</span></span><br><span class="line">        <span class="comment"># 我们可以用贪心思想：每次从最小满足阈值t的点出发，联通周围的点</span></span><br><span class="line">        <span class="comment"># 由于t是唯一的 所以我们只需要注重当下即可</span></span><br><span class="line">        <span class="comment"># 因为到t时刻，所有能够连通的都已经联通了</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 我们可以用hash表记录位置</span></span><br><span class="line">        hashmap=collections.defaultdict(<span class="built_in">list</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                hashmap[grid[i][j]]=[i,j]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># t次循环</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(n**<span class="number">2</span>):</span><br><span class="line">            idx=hashmap[t]</span><br><span class="line">            <span class="keyword">for</span> dx,dy <span class="keyword">in</span> <span class="built_in">dir</span>:</span><br><span class="line">                x=idx[<span class="number">0</span>]+dx</span><br><span class="line">                y=idx[<span class="number">1</span>]+dy</span><br><span class="line">                <span class="keyword">if</span> x&gt;=<span class="number">0</span> <span class="keyword">and</span> x&lt;n <span class="keyword">and</span> y&gt;=<span class="number">0</span> <span class="keyword">and</span> y&lt;n <span class="keyword">and</span> grid[x][y]&lt;=t:</span><br><span class="line">                    u.union(idx[<span class="number">0</span>]*n+idx[<span class="number">1</span>],x*n+y)</span><br><span class="line">            <span class="comment"># 判断此时的连通性</span></span><br><span class="line">            <span class="keyword">if</span> u.isConnect(<span class="number">0</span>,n*n-<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">return</span> t</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n</span>):</span><br><span class="line">        self.pa=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="keyword">if</span> self.pa[x]!=x:</span><br><span class="line">            self.pa[x]=self.find(self.pa[x])</span><br><span class="line">        <span class="keyword">return</span> self.pa[x]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">union</span>(<span class="params">self,a,b</span>):</span><br><span class="line">        roota,rootb=self.find(a),self.find(b)</span><br><span class="line">        <span class="keyword">if</span> roota!=rootb:</span><br><span class="line">            self.pa[rootb]=roota</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isConnect</span>(<span class="params">self,a,b</span>):</span><br><span class="line">        <span class="keyword">return</span> self.find(a)==self.find(b)</span><br></pre></td></tr></table></figure><hr><h4 id="2️⃣-LC827-最大人工岛">2️⃣ LC827 最大人工岛</h4><p><strong>来源</strong>: <a href="https://leetcode.cn/problems/making-a-large-island/">https://leetcode.cn/problems/making-a-large-island/</a></p><p>给你一个大小为 n x n 二进制矩阵 grid 。最多 只能将一格 0 变成 1 。</p><p>返回执行此操作后，grid 中最大的岛屿面积是多少？</p><p>岛屿 由一组上、下、左、右四个方向相连的 1 形成。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: grid = [[<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>]]</span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解释: 将一格<span class="number">0</span>变成<span class="number">1</span>，最终连通两个小岛得到面积为 <span class="number">3</span> 的岛屿。</span><br></pre></td></tr></table></figure><p><strong>思路</strong></p><p>827相当于695的进阶，在695的板子上，加上了可以diy位置的连通块，所以我们可以通过<code>回溯+并查集</code>的方式实现(穷举的本质罢了)</p><p><strong>核心</strong></p><p>连通块大小+可变连通块</p><p><strong>实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">largestIsland</span>(<span class="params">self, grid</span>):</span><br><span class="line">        <span class="comment"># 并查集+回溯</span></span><br><span class="line">        n=<span class="built_in">len</span>(grid)</span><br><span class="line">        pa=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n*n)]</span><br><span class="line">        rank=[<span class="number">1</span>]*(n*n)</span><br><span class="line">        maxVal=<span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="keyword">if</span> pa[x]!=x:</span><br><span class="line">                pa[x]=find(pa[x])</span><br><span class="line">            <span class="keyword">return</span> pa[x]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 初始化并查集</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j]==<span class="number">1</span>:</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">for</span> x,y <span class="keyword">in</span> [(i+<span class="number">1</span>,j),(i,j+<span class="number">1</span>)]:</span><br><span class="line">                        <span class="keyword">if</span> x&lt;n <span class="keyword">and</span> y&lt;n <span class="keyword">and</span> grid[x][y]==<span class="number">1</span>:</span><br><span class="line">                            ra,rb=find(i*n+j),find(x*n+y)</span><br><span class="line">                            <span class="keyword">if</span> ra!=rb:</span><br><span class="line">                                pa[rb]=ra</span><br><span class="line">                                rank[ra]+=rank[rb]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    rank[i*n+j]=<span class="number">0</span></span><br><span class="line">        maxVal=<span class="built_in">max</span>(rank) <span class="comment"># 记录啥也不加的最大值</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#--------------------------------------------------------------------#</span></span><br><span class="line">        <span class="comment">#                           到这里位置完全是695                       #</span></span><br><span class="line">        <span class="comment">#--------------------------------------------------------------------#</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 回溯</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j]==<span class="number">0</span>:</span><br><span class="line">                    <span class="comment"># 合并上下左右不同根节点的连通块</span></span><br><span class="line">                    tem_rank=<span class="number">0</span></span><br><span class="line">                    used=<span class="built_in">set</span>()</span><br><span class="line">                    <span class="keyword">for</span> x,y <span class="keyword">in</span> [(i-<span class="number">1</span>,j),(i+<span class="number">1</span>,j),(i,j-<span class="number">1</span>),(i,j+<span class="number">1</span>)]:</span><br><span class="line">                        <span class="keyword">if</span> x&gt;=<span class="number">0</span> <span class="keyword">and</span> x&lt;n <span class="keyword">and</span> y&gt;=<span class="number">0</span> <span class="keyword">and</span> y&lt;n <span class="keyword">and</span> grid[x][y]==<span class="number">1</span> <span class="keyword">and</span> (val:=find(x*n+y)) <span class="keyword">not</span> <span class="keyword">in</span> used:</span><br><span class="line">                            tem_rank+=rank[val]</span><br><span class="line">                            used.add(val)</span><br><span class="line">                    maxVal=<span class="built_in">max</span>(maxVal,tem_rank+<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(maxv,maxVal)</span><br><span class="line">     </span><br></pre></td></tr></table></figure><hr><h4 id="3️⃣-LC128-最长连续序列">3️⃣ LC128 最长连续序列</h4><p><strong>链接</strong>：<a href="https://leetcode.cn/problems/longest-consecutive-sequence">https://leetcode.cn/problems/longest-consecutive-sequence</a></p><p>给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</p><p>请你设计并实现时间复杂度为 O(n) 的算法解决此问题。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">100</span>,<span class="number">4</span>,<span class="number">200</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：最长数字连续序列是 [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]。它的长度为 <span class="number">4</span>。</span><br></pre></td></tr></table></figure><p><strong>思路</strong></p><p>通过<code>hash</code>表维护元素之间的位置，利用并查集保证多个连通块之间的比较。在加入上，不需要再去考虑位置问题，只需要着眼于当下。</p><p><strong>实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestConsecutive</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        这题是个好题啊</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        hash表、并查集、DP等等都能做(UF会不会TLE？真的是O(n)吗)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 并查集</span></span><br><span class="line">        n=<span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        hashset=&#123;&#125;</span><br><span class="line">        u=UnionSet(n)</span><br><span class="line">        <span class="comment"># 讲道理，最后还是要用hash表辅助啊</span></span><br><span class="line">        <span class="comment"># 要不然之前的结构不太好找</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> j <span class="keyword">in</span> hashset.keys():</span><br><span class="line">                <span class="keyword">continue</span> <span class="comment"># 找过了</span></span><br><span class="line">            <span class="keyword">if</span> j-<span class="number">1</span> <span class="keyword">in</span> hashset.keys():</span><br><span class="line">                u.union(i,hashset[j-<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> j+<span class="number">1</span> <span class="keyword">in</span> hashset.keys():</span><br><span class="line">                u.union(i,hashset[j+<span class="number">1</span>])</span><br><span class="line">            hashset[j]=i</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> u.getV()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnionSet</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,x</span>):</span><br><span class="line">        self.pa=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x)]</span><br><span class="line">        self.rank=[<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x)]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="keyword">if</span> self.pa[x]!=x:</span><br><span class="line">            self.pa[x]=self.find(self.pa[x])</span><br><span class="line">        <span class="keyword">return</span> self.pa[x]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">union</span>(<span class="params">self,a,b</span>):</span><br><span class="line">        roota,rootb=self.find(a),self.find(b)</span><br><span class="line">        <span class="keyword">if</span> roota!=rootb:</span><br><span class="line">            self.pa[rootb]=roota</span><br><span class="line">            self.rank[roota]+=self.rank[rootb]</span><br><span class="line">            <span class="comment"># self.rank[rootb]=0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getV</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(self.rank)</span><br></pre></td></tr></table></figure><p>我们来看看<code>hash</code>表的做法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestConsecutive</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        hashset=<span class="built_in">set</span>(nums)</span><br><span class="line">        ans=<span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            val=i</span><br><span class="line">            <span class="keyword">if</span> val-<span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> hashset:</span><br><span class="line">                start=<span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> val+<span class="number">1</span> <span class="keyword">in</span> hashset:</span><br><span class="line">                    start+=<span class="number">1</span></span><br><span class="line">                    val+=<span class="number">1</span></span><br><span class="line">                ans=<span class="built_in">max</span>(ans,start)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><hr><h3 id="常见问题：-判断重复连接">常见问题： 判断重复连接</h3><blockquote><p>此类问题一般跟环结构有关，判断是否产生了重复的连接</p></blockquote><h4 id="1️⃣-LC684-冗余连接">1️⃣ LC684 冗余连接</h4><p>**链接：**<a href="https://leetcode.cn/problems/redundant-connection">https://leetcode.cn/problems/redundant-connection</a></p><p>树可以看成是一个连通且 无环 的 无向 图。</p><p>给定往一棵 n 个节点 (节点值 1～n) 的树中添加一条边后的图。添加的边的两个顶点包含在 1 到 n 中间，且这条附加的边不属于树中已存在的边。图的信息记录于长度为 n 的二维数组 edges ，edges[i] = [ai, bi] 表示图中在 ai 和 bi 之间存在一条边。</p><p>请找出一条可以删去的边，删除后可使得剩余部分是一个有着 n 个节点的树。如果有多个答案，则返回数组 edges 中最后出现的边。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: edges = [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">1</span>,<span class="number">3</span>], [<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line">输出: [<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p><strong>思路</strong></p><p>这题的本质在于树不可以出现环，且不存在节点间的先后序，所以可以直接采用并查集构建联通节点。当某个节点加入时，若存在环，则合并的两个节点将具有相同的父节点。</p><p><strong>核心</strong></p><p>判断节点连通性</p><p><strong>实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findRedundantConnection</span>(<span class="params">self, edges: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="comment"># 这题我差点想用合并代替删除了</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 实际上不需要</span></span><br><span class="line">        <span class="comment"># 这个只需要判断是否出现环就行了</span></span><br><span class="line">        <span class="comment"># 直接建图的话有点浪费时间</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 用并查集判断连通性就可以了</span></span><br><span class="line"></span><br><span class="line">        pa=&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="keyword">if</span> pa[x]!=x:</span><br><span class="line">                pa[x]=find(pa[x])</span><br><span class="line">            <span class="keyword">return</span> pa[x]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">union</span>(<span class="params">a,b</span>):</span><br><span class="line">            pa[find(b)]=find(a)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i,j <span class="keyword">in</span> edges:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> pa:</span><br><span class="line">                pa[i]=i</span><br><span class="line">            <span class="keyword">if</span> j <span class="keyword">not</span> <span class="keyword">in</span> pa:</span><br><span class="line">                pa[j]=j</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> find(i)!=find(j):</span><br><span class="line">                union(i,j)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> [i,j]</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure><p><strong>技巧</strong></p><ul><li>动态开并查集节点</li></ul><hr><h3 id="常见问题：-堵塞"><strong>常见问题： 堵塞</strong></h3><blockquote><p>这类问题往往在树的构建上，通过增加限制条件，限制路径</p></blockquote><h4 id="1️⃣-LC2368-受限制条件下可达到的节点数目">1️⃣ LC2368 受限制条件下可达到的节点数目</h4><p><strong>链接</strong>：<a href="https://leetcode.cn/problems/reachable-nodes-with-restrictions">https://leetcode.cn/problems/reachable-nodes-with-restrictions</a></p><p>现有一棵由 n 个节点组成的无向树，节点编号从 0 到 n - 1 ，共有 n - 1 条边。</p><p>给你一个二维整数数组 edges ，长度为 n - 1 ，其中 edges[i] = [ai, bi] 表示树中节点 ai 和 bi 之间存在一条边。另给你一个整数数组 restricted 表示 受限 节点。</p><p>在不访问受限节点的前提下，返回你可以从节点 0 到达的 最多 节点数目。</p><p>注意，节点 0 不 会标记为受限节点。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">7</span>, edges = [[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">1</span>],[<span class="number">4</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">5</span>],[<span class="number">5</span>,<span class="number">6</span>]], restricted = [<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：上图所示正是这棵树。</span><br><span class="line">在不访问受限节点的前提下，只有节点 [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] 可以从节点 <span class="number">0</span> 到达。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>思路</strong></p><p>存在阻碍节点视为不可通行，由于需要我们构建树，所以并不能直接通过遍历的方式找到。于是，当我们在构建树的时候，可以通过计算零节点的连通块实现求节点的目的。</p><p>在遇到受限节点的时候，不进行联通，那么如果没有其他支路，该路径后续的节点都不会被加入零节点的连通块，而是独立形成连通块。(一共有三种类型： 零节点连通块，独立连通块，受限制节点)</p><p><strong>实质</strong></p><p>受限制条件下的连通</p><p><strong>实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reachableNodes</span>(<span class="params">self, n: <span class="built_in">int</span>, edges: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], restricted: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 看到无向图 就该考虑并查集了</span></span><br><span class="line">        pa=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        <span class="comment"># set在查询的速度远超于list </span></span><br><span class="line">        <span class="comment"># 而且会有重复的</span></span><br><span class="line">        </span><br><span class="line">        restricted=<span class="built_in">set</span>(restricted)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="keyword">if</span> pa[x]!=x:</span><br><span class="line">                pa[x]=find(pa[x])</span><br><span class="line">            <span class="keyword">return</span> pa[x]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">union</span>(<span class="params">a,b</span>):</span><br><span class="line">            <span class="keyword">if</span> (va:=find(a))!=(vb:=find(b)):</span><br><span class="line">                pa[vb]=va</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i,j <span class="keyword">in</span> edges:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> restricted <span class="keyword">and</span> j <span class="keyword">not</span> <span class="keyword">in</span> restricted:</span><br><span class="line">                union(i,j)</span><br><span class="line">        <span class="comment"># print(pa)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>([<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n) <span class="keyword">if</span> find(i)==find(<span class="number">0</span>)])</span><br></pre></td></tr></table></figure><hr><h3 id="常见问题：带权并查集">常见问题：带权并查集</h3><h4 id="1️⃣-LC399-除法求值">1️⃣ LC399 除法求值</h4><p>链接：<a href="https://leetcode.cn/problems/evaluate-division">https://leetcode.cn/problems/evaluate-division</a></p><p>给你一个变量对数组 equations 和一个实数值数组 values 作为已知条件，其中 equations[i] = [Ai, Bi] 和 values[i] 共同表示等式 Ai / Bi = values[i] 。每个 Ai 或 Bi 是一个表示单个变量的字符串。</p><p>另有一些以数组 queries 表示的问题，其中 queries[j] = [Cj, Dj] 表示第 j 个问题，请你根据已知条件找出 Cj / Dj = ? 的结果作为答案。</p><p>返回 所有问题的答案 。如果存在某个无法确定的答案，则用 -1.0 替代这个答案。如果问题中出现了给定的已知条件中没有出现的字符串，也需要用 -1.0 替代这个答案。</p><p>注意：输入总是有效的。你可以假设除法运算中不会出现除数为 0 的情况，且不存在任何矛盾的结果。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：equations = [[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>],[<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>]], values = [<span class="number">2.0</span>,<span class="number">3.0</span>], queries = [[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;c&quot;</span>],[<span class="string">&quot;b&quot;</span>,<span class="string">&quot;a&quot;</span>],[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;e&quot;</span>],[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>],[<span class="string">&quot;x&quot;</span>,<span class="string">&quot;x&quot;</span>]]</span><br><span class="line">输出：[<span class="number">6.00000</span>,<span class="number">0.50000</span>,-<span class="number">1.00000</span>,<span class="number">1.00000</span>,-<span class="number">1.00000</span>]</span><br><span class="line">解释：</span><br><span class="line">条件：a / b = <span class="number">2.0</span>, b / c = <span class="number">3.0</span></span><br><span class="line">问题：a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?</span><br><span class="line">结果：[<span class="number">6.0</span>, <span class="number">0.5</span>, -<span class="number">1.0</span>, <span class="number">1.0</span>, -<span class="number">1.0</span> ]</span><br></pre></td></tr></table></figure><p><strong>思路</strong></p><p>首先明确，不同类型(可以看做不同量纲)之间是无法进行除法的，这一块跟连通性很类似，因此我们可以想到并查集。</p><p>在面对权值的时候，需要考虑用带权并查集。</p><p>我们假设带权边的权重数组为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">w[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span>表示第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>条边相对于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">root</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">roo</span><span class="mord mathnormal">t</span></span></span></span>节点的权重。</p><p>在寻址(find)过程中，我们需要进行如下操作：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mfrac><mi>i</mi><mrow><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi></mrow></mfrac><mo>=</mo><mfrac><mi>i</mi><mrow><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>n</mi><msub><mi>t</mi><mi>i</mi></msub></mrow></mfrac><mo>×</mo><mfrac><mrow><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>n</mi><msub><mi>t</mi><mi>i</mi></msub></mrow><mrow><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">w[i]=\frac{i}{root}=\frac{i}{parent_i}\times\frac{parent_i}{root}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0225em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">roo</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.217em;vertical-align:-0.8804em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">re</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.9781em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2921em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">roo</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">re</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>这是一条权重链，确保并查集中每个子集都能以根节点为基准进行定标。</p><p>在加入(union)的过程中，我们需要对其进行如下更新：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>假设 </mtext><mi>y</mi><mtext> 加入 </mtext><mi>x</mi><mtext> </mtext><mspace linebreak="newline"></mspace><mi>w</mi><mo stretchy="false">[</mo><mi>r</mi><mi>o</mi><mi>o</mi><msub><mi>t</mi><mi>y</mi></msub><mo stretchy="false">]</mo><mo>=</mo><mfrac><mrow><mi>r</mi><mi>o</mi><mi>o</mi><msub><mi>t</mi><mi>y</mi></msub></mrow><mrow><mi>r</mi><mi>o</mi><mi>o</mi><msub><mi>t</mi><mi>x</mi></msub></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>y</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>w</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><mrow><mi>w</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>x</mi></mrow></mfrac><mspace linebreak="newline"></mspace><mo>=</mo><mfrac><mi>y</mi><mi>x</mi></mfrac><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mfrac><mrow><mi>w</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><mrow><mi>w</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo></mrow></mfrac><mspace linebreak="newline"></mspace><mtext>令</mtext><mi>k</mi><mo>=</mo><mfrac><mi>y</mi><mi>x</mi></mfrac><mtext>，即</mtext><mo>:</mo><mi>w</mi><mo stretchy="false">[</mo><mi>r</mi><mi>o</mi><mi>o</mi><msub><mi>t</mi><mi>y</mi></msub><mo stretchy="false">]</mo><mo>=</mo><mi>k</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mfrac><mrow><mi>w</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><mrow><mi>w</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">假设 \ y\ 加入\ x\ \\w[root_y]=\frac{root_y}{root_x}=\frac{y\ \cdot\ w[x]}{w[y]\ \cdot\ x}\\=\frac{y}{x}\ \cdot\ \frac{w[x]}{w[y]}\\令k=\frac{y}{x}，即:w[root_y]=k\ \cdot\ \frac{w[x]}{w[y]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">假设</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace"> </span><span class="mord cjk_fallback">加入</span><span class="mspace"> </span><span class="mord mathnormal">x</span><span class="mspace"> </span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal">roo</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1281em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2921em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">roo</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">roo</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord cjk_fallback">令</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord cjk_fallback">，即</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal">roo</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>如此，便在查询和合并的过程中实现了权值的链式更新。所有树结构上的值都是以根节点作为基准进行变换得到的，因此，同分支上(同个连通块)实现了可比性。</p><p><strong>实质</strong></p><p>带权边上的变换</p><p><strong>实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calcEquation</span>(<span class="params">self, equations: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]], values: <span class="type">List</span>[<span class="built_in">float</span>], queries: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">float</span>]:</span><br><span class="line">        u=UnionFind()</span><br><span class="line">        <span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">enumerate</span>(equations):</span><br><span class="line">            u.merge(v[<span class="number">0</span>],v[<span class="number">1</span>],values[i])</span><br><span class="line">        </span><br><span class="line">        ans=[]</span><br><span class="line">        <span class="keyword">for</span> i,j <span class="keyword">in</span> queries:</span><br><span class="line">            ans.append(u.divide(i,j))</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.pa=&#123;&#125;</span><br><span class="line">        self.val=&#123;&#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> self.pa:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> self.pa[x]!=x:</span><br><span class="line">            fa=self.find(self.pa[x])</span><br><span class="line">            self.val[x]=self.val[x]*self.val[self.pa[x]]  <span class="comment"># 更新权重</span></span><br><span class="line">            self.pa[x]=fa</span><br><span class="line">        <span class="keyword">return</span> self.pa[x]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">self,a,b,val</span>):</span><br><span class="line">        <span class="keyword">if</span> a <span class="keyword">not</span> <span class="keyword">in</span> self.pa:</span><br><span class="line">            self.pa[a]=a</span><br><span class="line">            self.val[a]=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> b <span class="keyword">not</span> <span class="keyword">in</span> self.pa:</span><br><span class="line">            self.pa[b]=b</span><br><span class="line">            self.val[b]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        roota,rootb=self.find(a),self.find(b)</span><br><span class="line">        <span class="keyword">if</span> roota==rootb <span class="keyword">or</span> (roota==<span class="literal">None</span> <span class="keyword">or</span> rootb==<span class="literal">None</span>):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        self.pa[roota]=rootb</span><br><span class="line">        <span class="comment"># w[b]=b/roob</span></span><br><span class="line">        <span class="comment"># roob/rooa = b/w[b] / a/w[a]</span></span><br><span class="line">        <span class="comment"># = b/a * w[a]/w[b]</span></span><br><span class="line">        self.val[roota]=val*(self.val[b]/self.val[a])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">divide</span>(<span class="params">self,a,b</span>):</span><br><span class="line">        <span class="keyword">if</span> (roota:=self.find(a))!=(rootb:=self.find(b)) <span class="keyword">or</span> (roota==<span class="literal">None</span> <span class="keyword">or</span> rootb==<span class="literal">None</span>):</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.val[a]/self.val[b]</span><br></pre></td></tr></table></figure><hr><h3 id="常见问题：关系型连接">常见问题：关系型连接</h3><blockquote><p>这类题一般是某个小类下有着各种分量，通过分量间的关系进行处理</p></blockquote><h4 id="1️⃣-LC1202-交换字符串中的元素">1️⃣ LC1202 交换字符串中的元素</h4><p><strong>链接</strong>：<a href="https://leetcode.cn/problems/smallest-string-with-swaps">https://leetcode.cn/problems/smallest-string-with-swaps</a></p><p>给你一个字符串 s，以及该字符串中的一些「索引对」数组 pairs，其中 pairs[i] = [a, b] 表示字符串中的两个索引（编号从 0 开始）。</p><p>你可以 任意多次交换 在 pairs 中任意一对索引处的字符。</p><p>返回在经过若干次交换后，s 可以变成的按字典序最小的字符串。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;dcab&quot;</span>, pairs = [[<span class="number">0</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line">输出：<span class="string">&quot;bacd&quot;</span></span><br><span class="line">解释： </span><br><span class="line">交换 s[<span class="number">0</span>] 和 s[<span class="number">3</span>], s = <span class="string">&quot;bcad&quot;</span></span><br><span class="line">交换 s[<span class="number">1</span>] 和 s[<span class="number">2</span>], s = <span class="string">&quot;bacd&quot;</span></span><br></pre></td></tr></table></figure><p><strong>思路</strong></p><p>我们不难发现，索引对自身存在联通关系，且一旦其中的分量作为其他索引对的分量，那么这两个分量就是联通的。</p><p>于是，本题可转化为：</p><p>求解各个连通块所能实现的最小字典序。实现路径为：</p><ul><li>构建联通块，并获取连通块中的元素</li><li>对每个连通块元素进行排序</li><li>根据原始元素的位置，判断所属的连通块</li></ul><p><strong>实质</strong></p><p>抽象思想</p><p><strong>实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">smallestStringWithSwaps</span>(<span class="params">self, s: <span class="built_in">str</span>, pairs: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 这题找规律</span></span><br><span class="line">        <span class="comment"># 我们发现 任意索引对内部可以进行交换</span></span><br><span class="line">        <span class="comment"># 而且，任意两对索引中，如果出现了相同的值，那么这两对索引对应的元素可以两两互换</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 这也意味着 我们需要处理的也就是所有连通块 每个连通块都是最小，那么由局部推得全局最优解</span></span><br><span class="line">        <span class="comment"># 考虑连通量 自然而然想到并查集</span></span><br><span class="line"></span><br><span class="line">        u=uf(<span class="built_in">len</span>(s))</span><br><span class="line">        <span class="keyword">for</span> i,j <span class="keyword">in</span> pairs:</span><br><span class="line">            u.union(i,j)</span><br><span class="line">        <span class="comment"># 对于每一个连通块，我们只需要对其进行排序就可以了</span></span><br><span class="line">        <span class="comment"># 当然，我们也要获取到连通块内的元素</span></span><br><span class="line">        mp=collections.defaultdict(<span class="built_in">list</span>)</span><br><span class="line">        <span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">enumerate</span>(s):</span><br><span class="line">            mp[u.find(i)].append(v) <span class="comment"># 构建连通块</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> vec <span class="keyword">in</span> mp.values():</span><br><span class="line">            vec.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">        ans=[]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="comment"># 每一个占位都用连通块内最小的进行占位</span></span><br><span class="line">            x=u.find(i)</span><br><span class="line">            ans.append(mp[x][-<span class="number">1</span>])</span><br><span class="line">            mp[x].pop()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(ans)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">uf</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n</span>):</span><br><span class="line">        self.pa=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="keyword">if</span> self.pa[x]!=x:</span><br><span class="line">            self.pa[x]=self.find(self.pa[x])</span><br><span class="line">        <span class="keyword">return</span> self.pa[x]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">union</span>(<span class="params">self,a,b</span>):</span><br><span class="line">        <span class="keyword">if</span> (ra:=self.find(a))!=(rb:=self.find(b)):</span><br><span class="line">            self.pa[rb]=ra</span><br></pre></td></tr></table></figure><hr><h4 id="2️⃣-LC765-情侣牵手">2️⃣ LC765 情侣牵手</h4><p>链接：<a href="https://leetcode.cn/problems/couples-holding-hands">https://leetcode.cn/problems/couples-holding-hands</a></p><p>n 对情侣坐在连续排列的 2n 个座位上，想要牵到对方的手。</p><p>人和座位由一个整数数组 row 表示，其中 row[i] 是坐在第 i 个座位上的人的 ID。情侣们按顺序编号，第一对是 (0, 1)，第二对是 (2, 3)，以此类推，最后一对是 (2n-2, 2n-1)。</p><p>返回 最少交换座位的次数，以便每对情侣可以并肩坐在一起。 每次交换可选择任意两人，让他们站起来交换座位。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: row = [<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">输出: <span class="number">1</span></span><br><span class="line">解释: 只需要交换row[<span class="number">1</span>]和row[<span class="number">2</span>]的位置即可。</span><br><span class="line"></span><br><span class="line">输入: row = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">输出: <span class="number">0</span></span><br><span class="line">解释: 无需交换座位，所有的情侣都已经可以手牵手了。</span><br></pre></td></tr></table></figure><p><strong>思路</strong></p><p>情侣能够牵手的充要条件是：</p><p>位置 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mi>i</mi><mo>∈</mo><mtext>奇数</mtext></mrow><annotation encoding="application/x-tex">(i,i+1)i\in奇数</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">奇数</span></span></span></span> 上的情侣同属于一个类，或者说，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mi mathvariant="normal">/</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo>=</mo><mi>r</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mi mathvariant="normal">/</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">row[i]//2=row[i+1]//2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ro</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mord">//2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ro</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mord">//2</span></span></span></span></p><p>而对于不能牵手的情侣而言，他们之间构成了一个<code>环</code>，即通过一对情侣中的两个节点关系，能够实现多对情侣的闭环。</p><p>不难发现，我们应该开<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi mathvariant="normal">/</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">n//2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord">//2</span></span></span></span>个空间，代表有这么多对情侣。接着，对于一个大小为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>(包含了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>对情侣)的闭环，我们最少只需要移动<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>次就行了。</p><p>至此，问题转变为：</p><p>求解<code>row</code>中闭环的数量。</p><p>有如下公式，设闭环数量为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>，则有：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>t</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mo>⋯</mo><mo>+</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t=(x_i-1)+(x_2-1)+\dots+(x_n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span>为交换次数。</p><p>又：我们可以假设牵上手的情侣也是一个环，其交换次数为：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t=(1-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><p>于是，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>=</mo><mi>n</mi><mo>−</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">t=n-x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span></p><p><strong>实质</strong></p><p>考察抽象思想，拓扑关系联通</p><p><strong>实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minSwapsCouples</span>(<span class="params">self, row</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type row: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 本题考察的是抽象能力</span></span><br><span class="line">        <span class="comment"># 什么情况情侣不能牵手？</span></span><br><span class="line">        <span class="comment"># 一对情侣 Aa 一定能牵手</span></span><br><span class="line">        <span class="comment"># 两队情侣 BA BA 不能牵手 而 AB BA 或者 BA AB是有一对可以牵手的</span></span><br><span class="line">        <span class="comment"># 三对情侣只有在情况 AB CB AC 或者 AC BC AB 之类的情况下才算不饿能牵手</span></span><br><span class="line">        <span class="comment"># 而此时我们认为，情侣间的顺序关系并不重要 AB CB AC 等价于 AC BC AB 等价于其他</span></span><br><span class="line">        <span class="comment"># 也就是说，这三对情侣满足一个环关系 Ab cB aC</span></span><br><span class="line">        <span class="comment"># 因为A要联通a 我们令Ab联通，能顺着b联通cB，顺着c联通aC</span></span><br><span class="line">        <span class="comment"># 他们三位之间形成了环(通过情侣关系)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 那么对于一个大小为n的错误环，只需要换位n-1次即可</span></span><br><span class="line">        <span class="comment"># 考虑连通关系，可以选用并查集</span></span><br><span class="line">        n=<span class="built_in">len</span>(row)</span><br><span class="line">        u=UnionFind(n//<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        i=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;=n-<span class="number">2</span>:</span><br><span class="line">            u.union(row[i]//<span class="number">2</span>,row[i+<span class="number">1</span>]//<span class="number">2</span>)</span><br><span class="line">            i+=<span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> n//<span class="number">2</span>-u.getCount()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n</span>):</span><br><span class="line">        self.pa=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        self.count=n</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="keyword">if</span> self.pa[x]!=x:</span><br><span class="line">            self.pa[x]=self.find(self.pa[x])</span><br><span class="line">        <span class="keyword">return</span> self.pa[x]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">union</span>(<span class="params">self,a,b</span>):</span><br><span class="line">        ra=self.find(a)</span><br><span class="line">        rb=self.find(b)</span><br><span class="line">        <span class="keyword">if</span> ra!=rb:</span><br><span class="line">        <span class="comment"># if (ra:=self.find(a))!=(rb:=self.find(b)):</span></span><br><span class="line">            self.pa[rb]=ra</span><br><span class="line">            self.count-=<span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getCount</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.count</span><br></pre></td></tr></table></figure><hr><h3 id="进阶：倒序并查集🏷️">进阶：倒序并查集🏷️</h3><blockquote><p>此类问题通常用于优化删除问题，既然中间变量可以从删除操作中得到，那也能从构建操作中得到。组件的构成跟并查集的连通本质上是一致的。</p></blockquote><h4 id="1️⃣-LC2421-好路径的数量">1️⃣ LC2421 好路径的数量</h4><p><strong>链接</strong>：<a href="https://leetcode.cn/problems/number-of-good-paths">https://leetcode.cn/problems/number-of-good-paths</a></p><p>给你一棵 n 个节点的树（连通无向无环的图），节点编号从 0 到 n - 1 且恰好有 n - 1 条边。</p><p>给你一个长度为 n 下标从 0 开始的整数数组 vals ，分别表示每个节点的值。同时给你一个二维整数数组 edges ，其中 edges[i] = [ai, bi] 表示节点 ai 和 bi 之间有一条 无向 边。</p><p>一条 好路径 需要满足以下条件：</p><p>开始节点和结束节点的值 相同 。<br>开始节点和结束节点中间的所有节点值都 小于等于 开始节点的值（也就是说开始节点的值应该是路径上所有节点的最大值）。<br>请你返回不同好路径的数目。</p><p>注意，一条路径和它反向的路径算作 同一 路径。比方说， 0 -&gt; 1 与 1 -&gt; 0 视为同一条路径。单个节点也视为一条合法路径。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：vals = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>], edges = [[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">4</span>]]</span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：总共有 <span class="number">5</span> 条单个节点的好路径。</span><br><span class="line">还有 <span class="number">1</span> 条好路径：<span class="number">1</span> -&gt; <span class="number">0</span> -&gt; <span class="number">2</span> -&gt; <span class="number">4</span> 。</span><br><span class="line">（反方向的路径 <span class="number">4</span> -&gt; <span class="number">2</span> -&gt; <span class="number">0</span> -&gt; <span class="number">1</span> 视为跟 <span class="number">1</span> -&gt; <span class="number">0</span> -&gt; <span class="number">2</span> -&gt; <span class="number">4</span> 一样的路径）</span><br><span class="line">注意 <span class="number">0</span> -&gt; <span class="number">2</span> -&gt; <span class="number">3</span> 不是一条好路径，因为 vals[<span class="number">2</span>] &gt; vals[<span class="number">0</span>] 。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>思路</strong></p><p>这题暴力思路：先计算所有最大值节点的路径，然后删除他们，再进行递归往复。</p><p>但是，这样子的时间复杂度也太大了吧！最坏的情况下达到了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，不如反阿克曼常数的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>α</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\alpha)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span></span></span></span>有意思。</p><p><code>删除操作</code>可以转变思路为<code>添加</code>! 这也就是倒序并查集的由来！</p><p>一个结构，删除是添加的反过程，而我们追寻中间信息，那么删除和添加都将会达到这个中间状态！添加，就是一个一个小组件聚集形成一个物体，那就是并查集！</p><p>这题的话，我们考虑从最小值节点开始添加，当然，要先生成邻接图结构才行。</p><p>添加连通块时，如果当前节点遇到了相同的节点，那么将新增<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>C</mi><mi>x</mi><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">C^2_x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0611em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.453em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span>条路径，所以，我们有必要记录连通块中的最大值，以及最大值的数量。</p><p>事实上，并查集本就是记录最大表征而生的，那数量如何去记录呢？</p><p>我们开辟一个空间<code>size</code>，<code>size[x]</code>表示连通块中大小为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">val[x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose">]</span></span></span></span>的节点的数量。</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">val[x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose">]</span></span></span></span>也就是个映射。</p><p><strong>实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numberOfGoodPaths</span>(<span class="params">self, vals: <span class="type">List</span>[<span class="built_in">int</span>], edges: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        </span><br><span class="line">        n=<span class="built_in">len</span>(vals)</span><br><span class="line">        <span class="comment"># 如何创建并查集？</span></span><br><span class="line">        <span class="comment"># 首先有n个节点</span></span><br><span class="line">        pa=<span class="built_in">list</span>(<span class="built_in">range</span>(n))</span><br><span class="line">        <span class="comment"># 然后构建图结构</span></span><br><span class="line">        <span class="comment"># 无向图需要记录两边</span></span><br><span class="line">        g=[[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        <span class="keyword">for</span> x,y <span class="keyword">in</span> edges:</span><br><span class="line">            g[x].append(y)</span><br><span class="line">            g[y].append(x)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 我们利用生成代替删除</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># size[x] 表示 x 所处的连通块中 ，值等于 vals[x] 的节点个数</span></span><br><span class="line">        <span class="comment"># size用来处理同级别的加减</span></span><br><span class="line">        size=[<span class="number">1</span>]*n</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="keyword">if</span> pa[x]!=x:</span><br><span class="line">                pa[x]=find(pa[x])</span><br><span class="line">            <span class="keyword">return</span> pa[x]</span><br><span class="line">        ans=n <span class="comment"># 初始路径(自己)</span></span><br><span class="line">        <span class="comment"># 然后是等长路径C2x=(x*(x-1)/2)</span></span><br><span class="line">        <span class="keyword">for</span> vx,x <span class="keyword">in</span> <span class="built_in">sorted</span>(<span class="built_in">zip</span>(vals,<span class="built_in">range</span>(n))):</span><br><span class="line">            <span class="comment"># 从小到大生成</span></span><br><span class="line">            fx=find(x) <span class="comment"># 第几个节点的父节点</span></span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> g[x]:</span><br><span class="line">                <span class="comment"># 这节点所能到达的所有节点</span></span><br><span class="line">                y=find(y)</span><br><span class="line">                <span class="comment"># 开始遍历邻接边</span></span><br><span class="line">                <span class="keyword">if</span> y==fx <span class="keyword">or</span> vals[y]&gt;vx:<span class="comment"># 大的后面加进去c</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> vals[y]==vx:</span><br><span class="line">                    ans+=size[fx]*size[y]</span><br><span class="line">                    size[fx]+=size[y]</span><br><span class="line">                pa[y]=fx</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><hr><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">【算法与数据结构】并查集</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>基于Cartopy绘制海洋表面温度动态变化图</title>
    <link href="http://example.com/2022/09/25/%E3%80%90%E6%B5%B7%E6%B4%8B%E9%81%A5%E6%84%9F%E3%80%91%E7%BB%98%E5%88%B6%E6%B5%B7%E6%B4%8B%E8%A1%A8%E9%9D%A2%E6%B8%A9%E5%BA%A6%E5%8A%A8%E5%9B%BE/"/>
    <id>http://example.com/2022/09/25/%E3%80%90%E6%B5%B7%E6%B4%8B%E9%81%A5%E6%84%9F%E3%80%91%E7%BB%98%E5%88%B6%E6%B5%B7%E6%B4%8B%E8%A1%A8%E9%9D%A2%E6%B8%A9%E5%BA%A6%E5%8A%A8%E5%9B%BE/</id>
    <published>2022-09-25T14:43:44.471Z</published>
    <updated>2022-09-25T14:44:40.117Z</updated>
    
    <content type="html"><![CDATA[<h1>基于Cartopy绘制海洋表面温度动态变化图</h1><hr><h2 id="一、实验准备">一、实验准备</h2><p>啊我们这次需要用的库有：</p><ul><li>cartopoy</li><li>xarray</li><li>imageio</li><li>numpy</li><li>pandas</li></ul><p>如果发现cartopy安装不了，可以先在<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#cartopy">网站</a>下载依赖库。</p><p>分别是：</p><ul><li>pyproj</li><li>Pillow</li><li>Shapely</li><li>Cartopy</li></ul><p>我们下载好对应Python版本和OS类型的<code>.whl</code>文件后，在<code>anaconda prompt</code>中输入以下命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install path\your_file.whl</span><br></pre></td></tr></table></figure><p>即可。</p><hr><p>关于海洋遥感数据，我们可以在https://podaac.jpl.nasa.gov/上下载数据，当然，NASA的这个网站可能需要科学上网。</p><hr><h2 id="二、数据处理">二、数据处理</h2><p>我们下载下来的文件是<code>.nc</code>文件，这个类型的文件可以用<code>xarray</code>或者<code>netCDF4</code>这两个库进行读取哦。下面我们展示<code>xarray</code>的读取方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> xarray <span class="keyword">as</span> xr</span><br></pre></td></tr></table></figure><p>值得一提的是，<code>xarray</code>有可能跟<code>pytorch</code>或者<code>tensoflow</code>产生冲突，尤其是<code>torchtext</code>库。这种情况下，可能需要对现有的依赖库进行更新。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">data = xr.open_dataset(d)</span><br></pre></td></tr></table></figure><img src="/2022/09/25/%E3%80%90%E6%B5%B7%E6%B4%8B%E9%81%A5%E6%84%9F%E3%80%91%E7%BB%98%E5%88%B6%E6%B5%B7%E6%B4%8B%E8%A1%A8%E9%9D%A2%E6%B8%A9%E5%BA%A6%E5%8A%A8%E5%9B%BE/image-20220925212334604.png" alt="image-20220925212334604" style="zoom:50%;"><p>此时呢，数据就被我们读取进来啦。我们这次需要用到的值为SST(sea surface temperature)，因此，我们需要获取到这个维度的数据。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sst = data.variables[<span class="string">&quot;sea_surface_temperature&quot;</span>][:] <span class="comment"># 通过variables属性 选择对应维度的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取经纬度数据</span></span><br><span class="line">lon = data.variables[<span class="string">&#x27;lon&#x27;</span>][:]</span><br><span class="line">lat = data.variables[<span class="string">&#x27;lat&#x27;</span>][:]</span><br></pre></td></tr></table></figure><p>这些数据符不符合规范，是一个值得注意的问题。我们发现，该文件的SST数据缺失了不少值，需要做一个清洗。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取到DataFrame方便处理</span></span><br><span class="line">sst = np.array(sst)</span><br><span class="line">d = pd.DataFrame(sst[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d.describe())</span><br><span class="line"><span class="comment"># 用平均值填充</span></span><br><span class="line">d.fillna(d.mean(), inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="三、绘制图像">三、绘制图像</h2><p>好啦我们现在要用到<code>cartopy</code>进行绘图啦~</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 之前拿到的数据是xarray类型的，我们需要转换到ndarry类型</span></span><br><span class="line">lon,lat=np.array(lon),np.array(lat)</span><br><span class="line">sst=d.values</span><br></pre></td></tr></table></figure><p>设置我们地图的投影</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">   ax = plt.axes(projection=ccrs.PlateCarree())  <span class="comment"># 设置投影方式</span></span><br><span class="line">   extend=[-<span class="number">30</span>,-<span class="number">16</span>, -<span class="number">60</span>, -<span class="number">46</span>] <span class="comment"># 设置显示范围</span></span><br><span class="line">   </span><br><span class="line">   ax.set_extent(extend)  <span class="comment"># 设置经纬度范围</span></span><br><span class="line">   ax.stock_img()<span class="comment">#添加地球背景</span></span><br><span class="line">   </span><br><span class="line">   ax.add_feature(cfe.OCEAN) <span class="comment"># 添加要素</span></span><br><span class="line">   ax.add_feature(cfe.LAND,edgecolor=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">   ax.add_feature(cfe.LAKES,edgecolor=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">   ax.add_feature(cfe.RIVERS)</span><br><span class="line">   rivers_10m = cfe.NaturalEarthFeature(<span class="string">&#x27;physical&#x27;</span>, <span class="string">&#x27;rivers_lake_centerlines&#x27;</span>, <span class="string">&#x27;10m&#x27;</span>)</span><br><span class="line">   ax.add_feature(rivers_10m,facecolor=<span class="string">&quot;None&quot;</span>,edgecolor=<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">   </span><br><span class="line">    ax.gridlines(crs=ccrs.PlateCarree(), draw_labels=<span class="literal">True</span>, linewidth=<span class="number">0.2</span>, color=<span class="string">&#x27;k&#x27;</span>, alpha=<span class="number">0.5</span>, linestyle=<span class="string">&#x27;--&#x27;</span>) <span class="comment"># 添加经纬网</span></span><br><span class="line">    </span><br><span class="line">   ax.coastlines() <span class="comment"># 设置海岸线</span></span><br><span class="line">   ax.set_title(<span class="string">&quot;我也不知是啥数据&quot;</span>)</span><br><span class="line"></span><br><span class="line">levels = np.arange(sst.<span class="built_in">min</span>(), sst.<span class="built_in">max</span>()+ <span class="number">1</span>, <span class="number">1</span>) <span class="comment"># 设置颜色分辨度</span></span><br><span class="line">cp=ax.contourf(lon,lat,sst,cmap=<span class="string">&#x27;Spectral_r&#x27;</span>,levels=levels) <span class="comment"># 绘制二维格网</span></span><br><span class="line">   plt.colorbar(cp)<span class="comment"># 设置色带</span></span><br><span class="line">   plt.show()</span><br><span class="line">   </span><br></pre></td></tr></table></figure><img src="/2022/09/25/%E3%80%90%E6%B5%B7%E6%B4%8B%E9%81%A5%E6%84%9F%E3%80%91%E7%BB%98%E5%88%B6%E6%B5%B7%E6%B4%8B%E8%A1%A8%E9%9D%A2%E6%B8%A9%E5%BA%A6%E5%8A%A8%E5%9B%BE/image-20220925214125007.png" alt="image-20220925214125007" style="zoom:50%;"><hr><h2 id="四、动图制作">四、动图制作</h2><p>这里我们就需要使用到<code>imageio</code>模块了。</p><p>这里简单说一下如何通过<code>imageio</code>制作<code>gif</code>动图。</p><p>首先，我们需要通过<code>imageio.imread()</code>API读取图片数据，将其存放在容器列表中。再通过<code>imageio.mimsave()</code>进行制作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个创建gif的方法</span></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">create_gif</span>(<span class="params">filelist,name,dur=<span class="number">1.0</span></span>)-&gt;<span class="literal">None</span>:</span><br><span class="line">    IMG=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> filelist:</span><br><span class="line">        IMG.append(imageio.imread(i))</span><br><span class="line">    <span class="keyword">return</span> imageio.mimsave(name,IMG,<span class="string">&quot;GIF&quot;</span>,duration=dur)</span><br></pre></td></tr></table></figure><p>接着获取<code>plt</code>的图像资源</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.savefig((val:=path+<span class="string">&quot;%s.png&quot;</span>%time),dpi=<span class="number">200</span>)</span><br><span class="line">lis.append(val)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 释放资源</span></span><br><span class="line">plt.close()</span><br></pre></td></tr></table></figure><p>最终结果如下图啦，数据是随便拉的，所以对不太上</p><img src="/2022/09/25/%E3%80%90%E6%B5%B7%E6%B4%8B%E9%81%A5%E6%84%9F%E3%80%91%E7%BB%98%E5%88%B6%E6%B5%B7%E6%B4%8B%E8%A1%A8%E9%9D%A2%E6%B8%A9%E5%BA%A6%E5%8A%A8%E5%9B%BE/New.gif" alt="New" style="zoom:50%;"><hr><h2 id="完整代码">完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cartopy.crs <span class="keyword">as</span> ccrs</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> cartopy.feature <span class="keyword">as</span> cfe</span><br><span class="line"><span class="keyword">import</span> xarray <span class="keyword">as</span> xr</span><br><span class="line"><span class="keyword">import</span> imageio</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建gif图像</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_gif</span>(<span class="params">filelist,name,dur=<span class="number">1.0</span></span>)-&gt;<span class="literal">None</span>:</span><br><span class="line">    IMG=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> filelist:</span><br><span class="line">        IMG.append(imageio.imread(i))</span><br><span class="line">    <span class="keyword">return</span> imageio.mimsave(name,IMG,<span class="string">&quot;GIF&quot;</span>,duration=dur)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">working</span>(<span class="params">d,path,time,lis</span>)-&gt;<span class="literal">None</span>:</span><br><span class="line">    <span class="comment"># 数据清洗</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param data: 数据</span></span><br><span class="line"><span class="string">    :param path: 保存路径</span></span><br><span class="line"><span class="string">    :param time: 名字吧</span></span><br><span class="line"><span class="string">    :param lis: GIF文件夹</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    data = xr.open_dataset(d)</span><br><span class="line">    sst = data.variables[<span class="string">&quot;sea_surface_temperature&quot;</span>][:]</span><br><span class="line"></span><br><span class="line">    lon = data.variables[<span class="string">&#x27;lon&#x27;</span>][:]</span><br><span class="line">    lat = data.variables[<span class="string">&#x27;lat&#x27;</span>][:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sst = np.array(sst)</span><br><span class="line">    d = pd.DataFrame(sst[<span class="number">0</span>])</span><br><span class="line">    <span class="comment"># print(d.describe())</span></span><br><span class="line">    d.fillna(d.mean(), inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    lon,lat=np.array(lon),np.array(lat)</span><br><span class="line">    sst=d.values</span><br><span class="line"></span><br><span class="line">    ax = plt.axes(projection=ccrs.PlateCarree())  <span class="comment"># 设置投影方式</span></span><br><span class="line">    extend=[-<span class="number">30</span>,-<span class="number">16</span>, -<span class="number">60</span>, -<span class="number">46</span>]</span><br><span class="line">    ax.set_extent(extend)  <span class="comment"># 设置经纬度范围</span></span><br><span class="line">    ax.stock_img()<span class="comment">#添加地球背景</span></span><br><span class="line">    ax.add_feature(cfe.OCEAN)</span><br><span class="line">    ax.add_feature(cfe.LAND,edgecolor=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">    ax.add_feature(cfe.LAKES,edgecolor=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">    ax.add_feature(cfe.RIVERS)</span><br><span class="line"></span><br><span class="line">    rivers_10m = cfe.NaturalEarthFeature(<span class="string">&#x27;physical&#x27;</span>, <span class="string">&#x27;rivers_lake_centerlines&#x27;</span>, <span class="string">&#x27;10m&#x27;</span>)</span><br><span class="line">    ax.add_feature(rivers_10m,facecolor=<span class="string">&quot;None&quot;</span>,edgecolor=<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    ax.gridlines(crs=ccrs.PlateCarree(), draw_labels=<span class="literal">True</span>, linewidth=<span class="number">0.2</span>, color=<span class="string">&#x27;k&#x27;</span>, alpha=<span class="number">0.5</span>, linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ax.coastlines()</span><br><span class="line">    ax.set_title(<span class="string">&quot;我也不知是啥数据&quot;</span>)</span><br><span class="line"></span><br><span class="line">    levels = np.arange(sst.<span class="built_in">min</span>(), sst.<span class="built_in">max</span>()+ <span class="number">1</span>, <span class="number">1</span>) <span class="comment"># 设置绘画精度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cp=ax.contourf(lon,lat,sst,cmap=<span class="string">&#x27;Spectral_r&#x27;</span>,levels=levels)</span><br><span class="line">    plt.colorbar(cp)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ax.set_xticks(np.arange(extend[0],extend[1],5))</span></span><br><span class="line">    <span class="comment"># ax.set_yticks(np.arange(extend[2],extend[3],5))</span></span><br><span class="line"></span><br><span class="line">    plt.savefig((val:=path+<span class="string">&quot;%s.png&quot;</span>%time),dpi=<span class="number">200</span>)</span><br><span class="line">    lis.append(val)</span><br><span class="line">    <span class="comment"># 释放资源喽</span></span><br><span class="line"></span><br><span class="line">    plt.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;Microsoft YaHei&#x27;</span>]</span><br><span class="line">    <span class="comment"># plt.rcParams[&#x27;axes.unicode_minus&#x27;] = False  # Solve the minus sign problems   # 现在好像不设置也没有问题了？</span></span><br><span class="line"></span><br><span class="line">    path=<span class="string">r&quot;C:\&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    filelist=os.listdir(path)</span></span><br><span class="line"><span class="string">    Time=[]</span></span><br><span class="line"><span class="string">    filedata=[]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    for i,j in enumerate(filelist):</span></span><br><span class="line"><span class="string">        if j.endswith(&quot;</span>.nc<span class="string">&quot;):</span></span><br><span class="line"><span class="string">            Time.append(i)</span></span><br><span class="line"><span class="string">            filedata.append(j)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    IMG=[]</span></span><br><span class="line"><span class="string">    savePath=path+&quot;</span>SavePath\\<span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if not os.path.exists(savePath):</span></span><br><span class="line"><span class="string">        os.makedirs(savePath)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    for i,j in enumerate(filedata):</span></span><br><span class="line"><span class="string">        working(path+j,savePath,Time[i],IMG)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    create_gif(IMG,savePath+&quot;</span>New.gi<span class="string">f&quot;,1.0)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">海洋遥感</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="海洋遥感" scheme="http://example.com/tags/%E6%B5%B7%E6%B4%8B%E9%81%A5%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>随想录</title>
    <link href="http://example.com/2022/09/25/%E3%80%90%E9%9A%8F%E6%83%B3%E5%BD%95%E3%80%91%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    <id>http://example.com/2022/09/25/%E3%80%90%E9%9A%8F%E6%83%B3%E5%BD%95%E3%80%91%E9%9A%8F%E6%83%B3%E5%BD%95/</id>
    <published>2022-09-24T18:13:10.489Z</published>
    <updated>2022-09-24T18:26:19.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="记9月25日夜游">记9月25日夜游</h2><p>监狱的大门早已抹上了自由的痕迹，如锁孔里弥散跃出的幽光般令人神往。</p><p>夜半了，点灯人提着昏黄的烛火，驱赶着只敢在无人空处哀嚎宣泄的野狗。幽夜的舞台只余下此起彼伏的鸣虫。</p><p>我是谁，我为何在此，我又要前往何方？残垣断壁下，尘土随风散去，寄往何处？</p><p>星火点点，清明之梦，你我皆不语。</p><img src="/2022/09/25/%E3%80%90%E9%9A%8F%E6%83%B3%E5%BD%95%E3%80%91%E9%9A%8F%E6%83%B3%E5%BD%95/image-20220925022605938.png" alt="image-20220925022605938" style="zoom:100%;"><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">随想录</summary>
    
    
    
    <category term="梦时风月" scheme="http://example.com/categories/%E6%A2%A6%E6%97%B6%E9%A3%8E%E6%9C%88/"/>
    
    
    <category term="我" scheme="http://example.com/tags/%E6%88%91/"/>
    
  </entry>
  
  <entry>
    <title>Matplotlib教程</title>
    <link href="http://example.com/2022/09/15/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91matplotlib%E6%95%99%E7%A8%8B/"/>
    <id>http://example.com/2022/09/15/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91matplotlib%E6%95%99%E7%A8%8B/</id>
    <published>2022-09-15T02:44:39.744Z</published>
    <updated>2022-10-15T18:54:37.509Z</updated>
    
    <content type="html"><![CDATA[<h1>Matplotlib教程</h1><hr><h2 id="一、结构介绍">一、结构介绍</h2><h3 id="1️⃣容器层">1️⃣容器层</h3><p>容器层主要由<code>Canvas, Figure, Axes</code>组成。</p><p><code>Canvas</code>主要是在最底层的系统层，可以放置画布的工具</p><p><code>Figure</code>是<code>Canvas</code>上的第一层，充当着画布的角色</p><p><code>Axes</code>是第二层，相当于绘图区的角色</p><ul><li>Figure 整个图形</li><li>Axes 绘图区域</li><li>Axis 坐标轴</li></ul><blockquote><p>一个图像可以包含多个绘图区(Axes)，但一个Axes只能属于一个figure.</p><p>一个绘图区(坐标系)可以包含多个坐标轴</p></blockquote><img src="/2022/09/15/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91matplotlib%E6%95%99%E7%A8%8B/image-20220915110310589.png" alt="image-20220915110310589" style="zoom:50%;"><h3 id="2️⃣-辅助显示层">2️⃣ 辅助显示层</h3><p>除却图像外的内容，例如外观、边框线、坐标轴、坐标轴名称等等</p><h3 id="3️⃣-图像层">3️⃣ 图像层</h3><p>图像层指<code>Axes</code>内通过<code>plot、scatter、bar、histogram、pie</code>等函数绘制出的图像</p><img src="/2022/09/15/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91matplotlib%E6%95%99%E7%A8%8B/image-20220915110623165.png" alt="image-20220915110623165" style="zoom:50%;"><hr><h2 id="二、折线图与基本绘图功能">二、折线图与基本绘图功能</h2><p>说起来，<code>matplotlib.pyplot</code>这玩意作用于当前图形(Figure)的当前坐标系(Axes)。</p><p><strong>基本功能</strong></p><p>1️⃣ 设置画布属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(),dpi=)</span><br></pre></td></tr></table></figure><p>2️⃣ 保存画布</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.savefig(path)</span><br></pre></td></tr></table></figure><p>3️⃣ 显示图像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.show() <span class="comment"># 会释放资源，所以一定是在最后 </span></span><br></pre></td></tr></table></figure><p>4️⃣ 添加刻度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plt.xticks(val,<span class="built_in">map</span>)</span><br><span class="line">plt.yticks(val,<span class="built_in">map</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># like</span></span><br><span class="line">plt.xticks(x[::<span class="number">5</span>],x_ticks_label[::<span class="number">5</span>])</span><br><span class="line">plt.yticks(y_ticks[::<span class="number">5</span>])</span><br></pre></td></tr></table></figure><p>5️⃣ 设置字体</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置中文字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>]</span><br></pre></td></tr></table></figure><p>6️⃣ 添加网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.grid(<span class="literal">True</span>,linestyle=<span class="string">&quot;--&quot;</span>,alpha=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p>7️⃣ 添加描述信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.xlabel(<span class="string">&quot;时间&quot;</span>) </span><br><span class="line">plt.ylabel(<span class="string">&quot;温度&quot;</span>) </span><br><span class="line">plt.title(<span class="string">&quot;中午11点0分到12点之间的温度变化图示&quot;</span>)</span><br></pre></td></tr></table></figure><p>8️⃣ 多次<code>plot</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制折线图 </span></span><br><span class="line">plt.plot(x, y_shanghai, label=<span class="string">&quot;上海&quot;</span>) </span><br><span class="line"><span class="comment"># 使⽤多次plot可以画多个折线 </span></span><br><span class="line">plt.plot(x, y_beijing, color=<span class="string">&#x27;r&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, label=<span class="string">&quot;北京&quot;</span>) </span><br></pre></td></tr></table></figure><p>9️⃣ 添加图例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示图例 </span></span><br><span class="line">plt.legend(loc=<span class="string">&quot;best&quot;</span>)</span><br></pre></td></tr></table></figure><p>关于图例：</p><table><thead><tr><th style="text-align:center">Location String</th><th style="text-align:center">Location Code</th></tr></thead><tbody><tr><td style="text-align:center">‘best’</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">‘upper right’</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">‘upper left’</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">‘lower left’</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">‘lower right’</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">‘right’</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">‘center left’</td><td style="text-align:center">6</td></tr><tr><td style="text-align:center">‘center right’</td><td style="text-align:center">7</td></tr><tr><td style="text-align:center">‘lower center’</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">‘upper center’</td><td style="text-align:center">9</td></tr><tr><td style="text-align:center">‘center’</td><td style="text-align:center">10</td></tr></tbody></table><p>关于风格：</p><table><thead><tr><th style="text-align:center">颜色字符</th><th style="text-align:center">风格字符</th></tr></thead><tbody><tr><td style="text-align:center">r 红色</td><td style="text-align:center">- 实线</td></tr><tr><td style="text-align:center">g 绿色</td><td style="text-align:center">– 虚线</td></tr><tr><td style="text-align:center">b 蓝色</td><td style="text-align:center">-. 点划线</td></tr><tr><td style="text-align:center">w 白色</td><td style="text-align:center">：点虚线</td></tr><tr><td style="text-align:center">c 青色</td><td style="text-align:center">‘’ 留空、空格</td></tr><tr><td style="text-align:center">m 洋红</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">y 黄色</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">k 黑色</td><td style="text-align:center"></td></tr></tbody></table><hr><p><strong>来看个栗子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line">x=<span class="built_in">range</span>(<span class="number">60</span>)</span><br><span class="line">y_shanghai=[random.uniform(<span class="number">15</span>,<span class="number">18</span>) <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line">y_beijing=[random.uniform(-<span class="number">5</span>,<span class="number">5</span>) <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建画布</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line">plt.plot(x,y_shanghai,label=<span class="string">&quot;上海&quot;</span>,color=<span class="string">&quot;r&quot;</span>,linestyle=<span class="string">&quot;--&quot;</span>)</span><br><span class="line">plt.plot(x,y_beijing,label=<span class="string">&quot;北京&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加刻度</span></span><br><span class="line">x_lables_ticks=[<span class="string">&quot;11点&#123;&#125;分&quot;</span>.<span class="built_in">format</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line">y_lables_ticks=<span class="built_in">range</span>(-<span class="number">10</span>,<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks(x[::<span class="number">5</span>],x_lables_ticks[::<span class="number">5</span>])</span><br><span class="line">plt.yticks(y_lables_ticks[::<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加网格</span></span><br><span class="line">plt.grid(linestyle=<span class="string">&quot;--&quot;</span>,alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加描述信息</span></span><br><span class="line">plt.xlabel(<span class="string">&quot;时间&quot;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;温度&quot;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.title(<span class="string">&quot;某城市11点-12点温度变化&quot;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加图例</span></span><br><span class="line">plt.legend(loc=<span class="string">&quot;best&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2022/09/15/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91matplotlib%E6%95%99%E7%A8%8B/image-20220915113759811.png" alt="image-20220915113759811" style="zoom:50%;"><p>🔟 在一个Figure上绘制多个Axes</p><p>当当当当，是我们的<code>subplots</code>函数哦</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.subplots(nrows=<span class="number">1</span>,ncols=<span class="number">1</span>,**fig_kw)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">return : fig,axes</span></span><br><span class="line"><span class="string"># axes是一个数组，存储了nrows*ncols个axes的内存地址</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line">x=<span class="built_in">range</span>(<span class="number">60</span>)</span><br><span class="line">y_shanghai=[random.uniform(<span class="number">15</span>,<span class="number">18</span>) <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line">y_beijing=[random.uniform(-<span class="number">5</span>,<span class="number">5</span>) <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建画布</span></span><br><span class="line">fig,axes=plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制</span></span><br><span class="line">axes[<span class="number">0</span>].plot(x,y_shanghai,label=<span class="string">&quot;上海&quot;</span>)</span><br><span class="line">axes[<span class="number">1</span>].plot(x,y_beijing,label=<span class="string">&quot;北京&quot;</span>,linestyle=<span class="string">&quot;--&quot;</span>,color=<span class="string">&quot;r&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加x,y轴刻度</span></span><br><span class="line">x_ticks_label = [<span class="string">&quot;11点&#123;&#125;分&quot;</span>.<span class="built_in">format</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line">y_ticks = <span class="built_in">range</span>(<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意这里用set方法啦</span></span><br><span class="line">axes[<span class="number">0</span>].set_xticks(x[::<span class="number">5</span>])</span><br><span class="line">axes[<span class="number">0</span>].set_yticks(y_ticks[::<span class="number">5</span>])</span><br><span class="line">axes[<span class="number">0</span>].set_xticklabels(x_ticks_label[::<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">axes[<span class="number">1</span>].set_xticks(x[::<span class="number">5</span>])</span><br><span class="line">axes[<span class="number">1</span>].set_yticks(y_ticks[::<span class="number">5</span>])</span><br><span class="line">axes[<span class="number">1</span>].set_xticklabels(x_ticks_label[::<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加网格</span></span><br><span class="line"></span><br><span class="line">axes[<span class="number">0</span>].grid(<span class="literal">True</span>, linestyle=<span class="string">&quot;--&quot;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">axes[<span class="number">1</span>].grid(<span class="literal">True</span>, linestyle=<span class="string">&quot;--&quot;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加描述和标题</span></span><br><span class="line">axes[<span class="number">0</span>].set_xlabel(<span class="string">&quot;时间&quot;</span>)</span><br><span class="line">axes[<span class="number">0</span>].set_ylabel(<span class="string">&quot;温度&quot;</span>)</span><br><span class="line">axes[<span class="number">0</span>].set_title(<span class="string">&quot;上海中午11点--12点温度变化图&quot;</span>, fontsize=<span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">axes[<span class="number">1</span>].set_xlabel(<span class="string">&quot;时间&quot;</span>)</span><br><span class="line">axes[<span class="number">1</span>].set_ylabel(<span class="string">&quot;温度&quot;</span>)</span><br><span class="line">axes[<span class="number">1</span>].set_title(<span class="string">&quot;北京中午11点--12点温度变化图&quot;</span>, fontsize=<span class="number">25</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图例</span></span><br><span class="line">axes[<span class="number">0</span>].legend(loc=<span class="number">0</span>)</span><br><span class="line">axes[<span class="number">1</span>].legend(loc=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2022/09/15/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91matplotlib%E6%95%99%E7%A8%8B/image-20220915123329995.png" alt="image-20220915123329995" style="zoom:50%;"><hr><h2 id="三、常见图形">三、常见图形</h2><p>1️⃣ <strong>折线图</strong></p><p>特点：能够显示数据的变化趋势，反应事物的变化情况。</p><p><code>API</code>：<code>plt.plot()</code></p><p>2️⃣ <strong>散点图</strong></p><p>特点： 探寻事物间是否存在某种关联或者总结坐标点的分布模式，可以用于显示离群点(anomaly)</p><p><code>API</code>：<code>plt.scatter(x,y)</code></p><p>3️⃣ <strong>柱状图</strong></p><p>特点：探寻事物的分布模式，比较数据之间的差异，统计+对比</p><p><code>API</code>：<code>plt.bar(x,width)</code></p><p>4️⃣ <strong>直方图</strong></p><p>特点：绘制连续性的数据展示一组或多组数据的分布状况</p><p><code>API</code>：<code>plt.pyplot.hist(x,bins=None)</code></p><p>4️⃣ <strong>饼图</strong></p><p>特点：直观展现了不同数据的占比情况</p><p><code>API</code>：<code>plt.pie(x,labels=,autopct=,colors)</code></p><p>5️⃣<strong>绘制线条</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> idx,m <span class="keyword">in</span> <span class="built_in">enumerate</span>(x):</span><br><span class="line">    <span class="comment"># 绘制长条</span></span><br><span class="line">    <span class="comment"># 从(m,y[idx])到(m,pre[idx])</span></span><br><span class="line">    plt.plot([m,m],[y[idx],pre[idx]],<span class="string">&#x27;g-&#x27;</span>)</span><br></pre></td></tr></table></figure><hr><p>注意，刻度一定要<strong>先画完图</strong>，<strong>再添加刻度</strong>！！</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">三件套之绘图库</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="数据分析" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Pandas教程</title>
    <link href="http://example.com/2022/09/13/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Pandas%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2022/09/13/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Pandas%E5%85%A5%E9%97%A8/</id>
    <published>2022-09-13T08:12:17.190Z</published>
    <updated>2022-09-15T02:43:23.194Z</updated>
    
    <content type="html"><![CDATA[<h1>Pandas 教程</h1><img src="https://www.runoob.com/wp-content/uploads/2021/04/pandas.png" alt="img" style="zoom:25%;"><p><strong>Pandas 是 Python 语言的一个扩展程序库，用于数据分析。</strong></p><p>Pandas 是一个开放源码、BSD 许可的库，提供高性能、易于使用的数据结构和数据分析工具。</p><p>Pandas 名字衍生自术语 “panel data”（面板数据）和 “Python data analysis”（Python 数据分析）。</p><p>Pandas 一个强大的分析结构化数据的工具集，基础是 <a href="https://www.runoob.com/numpy/numpy-tutorial.html">Numpy</a>（提供高性能的矩阵运算）。</p><p>Pandas 可以从各种文件格式比如 CSV、JSON、SQL、Microsoft Excel 导入数据。</p><p>Pandas 可以对各种数据进行运算操作，比如归并、再成形、选择，还有数据清洗和数据加工特征。</p><p>Pandas 广泛应用在学术、金融、统计学等各个数据分析领域。</p><h2 id="Pandas-应用">Pandas 应用</h2><p>Pandas 的主要数据结构是 Series （一维数据）与 DataFrame（二维数据），这两种数据结构足以处理金融、统计、社会科学、工程等领域里的大多数典型用例。</p><h2 id="数据结构">数据结构</h2><p><strong>Series</strong> 是一种类似于一维数组的对象，它由一组数据（各种Numpy数据类型）以及一组与之相关的数据标签（即索引）组成。</p><p><strong>DataFrame</strong> 是一个表格型的数据结构，它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔型值）。DataFrame 既有行索引也有列索引，它可以被看做由 Series 组成的字典（共同用一个索引）。</p><h2 id="🥀-Why-Pandas">🥀 Why Pandas</h2><ul><li>便捷的数据处理能力</li><li>牛逼的文件读取能力</li><li>高度封装的Matplotlib，Numpy的画图和计算</li></ul><hr><h2 id="一、Series-【一维索引数组】">一、Series 【一维索引数组】</h2><p>Pandas Series类似于表格中的一个列(colume)类似于一维数组，可以保存任何数据类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.Series(data,index,dtype,name,copy)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><strong>data</strong>：一组数据(ndarray 类型)。</li><li><strong>index</strong>：数据索引标签，如果不指定，默认从 0 开始。</li><li><strong>dtype</strong>：数据类型，默认会自己判断。</li><li><strong>name</strong>：设置名称。</li><li><strong>copy</strong>：拷贝数据，默认为 False。</li></ul><p><strong>栗子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">a = [<span class="string">&quot;Google&quot;</span>, <span class="string">&quot;Runoob&quot;</span>, <span class="string">&quot;Wiki&quot;</span>]</span><br><span class="line"></span><br><span class="line">myvar = pd.Series(a, index = [<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myvar)</span><br></pre></td></tr></table></figure><img src="https://www.runoob.com/wp-content/uploads/2021/04/32B49FA4-ED68-446A-9EBF-C52FCB6D0CD6.jpg" style="zoom:25%;"><p>然后，我们就能通过索引值访问元素啦！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(myvar[<span class="string">&quot;y&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Runoob</span></span><br></pre></td></tr></table></figure><p>除却通过数据列表和索引列表外，我们也可以通过<code>字典</code>传入数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">sites = &#123;<span class="number">1</span>: <span class="string">&quot;Google&quot;</span>, <span class="number">2</span>: <span class="string">&quot;Runoob&quot;</span>, <span class="number">3</span>: <span class="string">&quot;Wiki&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">myvar = pd.Series(sites)</span><br></pre></td></tr></table></figure><p>而当我们只需要字典中的一部分时，可以选择性地传入索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sites = &#123;<span class="number">1</span>: <span class="string">&quot;Google&quot;</span>, <span class="number">2</span>: <span class="string">&quot;Runoob&quot;</span>, <span class="number">3</span>: <span class="string">&quot;Wiki&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">myvar = pd.Series(sites,index=[i <span class="keyword">for</span> i <span class="keyword">in</span> sites.keys() <span class="keyword">if</span> i&amp;<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>甚至是为<code>Series</code>设置名称参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">sites = &#123;<span class="number">1</span>: <span class="string">&quot;Google&quot;</span>, <span class="number">2</span>: <span class="string">&quot;Runoob&quot;</span>, <span class="number">3</span>: <span class="string">&quot;Wiki&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">myvar = pd.Series(sites, index = [<span class="number">1</span>, <span class="number">2</span>], name=<span class="string">&quot;RUNOOB-Series-TEST&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myvar)</span><br></pre></td></tr></table></figure><hr><h2 id="二、DataFrame-【二维索引矩阵-表-】">二、DataFrame 【二维索引矩阵(表)】</h2><p>DataFrame 是一个表格型的数据结构，它含有一组有序的列，每列可以是<code>不同的值类型</code>（数值、字符串、布尔型值）。DataFrame 既有<code>行索引也有列索引</code>，它可以被看做由 Series 组成的字典（共同用一个索引）。</p><img src="https://www.runoob.com/wp-content/uploads/2021/04/pandas-DataStructure.png" style="zoom:50%;"><p><img src="https://www.runoob.com/wp-content/uploads/2021/04/df-dp.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.DataFrame( data, index, columns, dtype, copy</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><strong>data</strong>：一组数据(ndarray、series, map, lists, dict 等类型)。</li><li><strong>index</strong>：索引值，或者可以称为行标签。</li><li><strong>columns</strong>：列标签，默认为 RangeIndex (0, 1, 2, …, n) 。</li><li><strong>dtype</strong>：数据类型。</li><li><strong>copy</strong>：拷贝数据，默认为 False。</li></ul><blockquote><p><strong>DF的属性</strong></p></blockquote><ul><li><strong>shape</strong></li><li><strong>index</strong></li><li><strong>columns</strong></li><li><strong>values</strong><ul><li>返回一个<code>ndarray</code>对象</li></ul></li><li><strong>T</strong><ul><li>转置</li></ul></li><li><strong>head()</strong></li><li><strong>tail()</strong></li></ul><blockquote><p><strong>索引修改</strong></p></blockquote><p><strong>1️⃣ 增加行索引值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stock_code = [<span class="string">&quot;股票_&quot;</span> + <span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(stock_day_rise.shape[<span class="number">0</span>])] <span class="comment"># 必须整体全部修改 data.index = stock_code</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意必须全体修改！！！</span></span><br></pre></td></tr></table></figure><p><strong>2️⃣ 增加列索引值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pd.date_range(start=<span class="literal">None</span>,end=<span class="literal">None</span>, periods=<span class="literal">None</span>, freq=<span class="string">&#x27;B&#x27;</span>) </span><br><span class="line"><span class="comment"># 生成时间序列</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">start:开始时间 </span></span><br><span class="line"><span class="string">end:结束时间 </span></span><br><span class="line"><span class="string">periods:时间天数 </span></span><br><span class="line"><span class="string">freq:递进单位，默认1天</span></span><br><span class="line"><span class="string">&#x27;B&#x27;默认略过周末</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ⽣成⼀个时间的序列，略过周末⾮交易⽇ </span></span><br><span class="line">date = pd.date_range(<span class="string">&#x27;2017-01-01&#x27;</span>, periods=stock_day_rise.shape[<span class="number">1</span>], freq=<span class="string">&#x27;B&#x27;</span>)</span><br></pre></td></tr></table></figure><p>3️⃣ <strong>重设索引</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data.reset_index() <span class="comment"># drop=False 不会删除原先的索引</span></span><br><span class="line">data.reset_index(drop=<span class="literal">True</span>) <span class="comment"># 删除原先的索引</span></span><br></pre></td></tr></table></figure><p>4️⃣ <strong>设置新索引</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set_index(keys,drop=<span class="literal">True</span>) </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">keys : 列索引名成或者列索引名称的列表</span></span><br><span class="line"><span class="string">drop : boolean, default True.当做新的索引，删除原来的列</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>Case</strong></p><p><strong>1️⃣create</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;month&#x27;</span>: [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>], </span><br><span class="line">                   <span class="string">&#x27;year&#x27;</span>: [<span class="number">2012</span>, <span class="number">2014</span>, <span class="number">2013</span>, <span class="number">2014</span>], </span><br><span class="line">                   <span class="string">&#x27;sale&#x27;</span>:[<span class="number">55</span>, <span class="number">40</span>, <span class="number">84</span>, <span class="number">31</span>]&#125;) </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   month  year  sale</span></span><br><span class="line"><span class="string">0      1  2012    55</span></span><br><span class="line"><span class="string">1      4  2014    40</span></span><br><span class="line"><span class="string">2      7  2013    84</span></span><br><span class="line"><span class="string">3     10  2014    31</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2️⃣ <strong>set</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df.set_index(<span class="string">&#x27;month&#x27;</span>) </span><br><span class="line"><span class="comment"># or </span></span><br><span class="line"><span class="comment"># 设置多索引</span></span><br><span class="line">df.set_index([<span class="string">&#x27;year&#x27;</span>,<span class="string">&#x27;month&#x27;</span>])</span><br></pre></td></tr></table></figure><hr><blockquote><p><strong>创建DF</strong></p></blockquote><p><strong>1️⃣ 通过列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = [[<span class="string">&#x27;Google&#x27;</span>,<span class="number">10</span>],[<span class="string">&#x27;Runoob&#x27;</span>,<span class="number">12</span>],[<span class="string">&#x27;Wiki&#x27;</span>,<span class="number">13</span>]]</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data,columns=[<span class="string">&#x27;Site&#x27;</span>,<span class="string">&#x27;Age&#x27;</span>],index=[<span class="string">&quot;F&quot;</span>,<span class="string">&quot;S&quot;</span>,<span class="string">&quot;T&quot;</span>],dtype=<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     Site   Age</span></span><br><span class="line"><span class="string">F  Google  10.0</span></span><br><span class="line"><span class="string">S  Runoob  12.0</span></span><br><span class="line"><span class="string">T    Wiki  13.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>2️⃣ 通过ndarray</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;Site&#x27;</span>:[<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Wiki&#x27;</span>], <span class="string">&#x27;Age&#x27;</span>:[<span class="number">10</span>, <span class="number">12</span>, <span class="number">13</span>]&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (df)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     Site  Age</span></span><br><span class="line"><span class="string">0  Google   10</span></span><br><span class="line"><span class="string">1  Runoob   12</span></span><br><span class="line"><span class="string">2    Wiki   13</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>3️⃣ 通过dict</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = [&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;,&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">20</span>&#125;]</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (df)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   a   b     c</span></span><br><span class="line"><span class="string">0  1   2   NaN</span></span><br><span class="line"><span class="string">1  5  10  20.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>如果有数据缺失，那么将返回<code>NaN</code></p><hr><blockquote><p><strong>数据访问</strong></p></blockquote><p>可以通过<code>loc</code>返回指定行的数据！如果没有设置索引，那么默认的索引是[0,1,…,n]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">&quot;calories&quot;</span>: [<span class="number">420</span>, <span class="number">380</span>, <span class="number">390</span>],</span><br><span class="line">  <span class="string">&quot;duration&quot;</span>: [<span class="number">50</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据载入到 DataFrame 对象</span></span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回第一行</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 返回第二行</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">calories    420</span></span><br><span class="line"><span class="string">duration     50</span></span><br><span class="line"><span class="string">Name: 0, dtype: int64</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">calories    380</span></span><br><span class="line"><span class="string">duration     40</span></span><br><span class="line"><span class="string">Name: 1, dtype: int64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>指定索引后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">&quot;calories&quot;</span>: [<span class="number">420</span>, <span class="number">380</span>, <span class="number">390</span>],</span><br><span class="line">  <span class="string">&quot;duration&quot;</span>: [<span class="number">50</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data, index = [<span class="string">&quot;day1&quot;</span>, <span class="string">&quot;day2&quot;</span>, <span class="string">&quot;day3&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定索引</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[[<span class="string">&quot;day2&quot;</span>,<span class="string">&quot;day1&quot;</span>]])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      calories  duration</span></span><br><span class="line"><span class="string">day2       380        40</span></span><br><span class="line"><span class="string">day1       420        50</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>而<code>iloc</code>属性，则是返回相对位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">&quot;calories&quot;</span>: [<span class="number">420</span>, <span class="number">380</span>, <span class="number">390</span>],</span><br><span class="line">  <span class="string">&quot;duration&quot;</span>: [<span class="number">50</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data, index = [<span class="string">&quot;day1&quot;</span>, <span class="string">&quot;day2&quot;</span>, <span class="string">&quot;day3&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定索引</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">50</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定索引</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[[<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>]])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      duration  calories</span></span><br><span class="line"><span class="string">day1        50       420</span></span><br><span class="line"><span class="string">day3        45       390</span></span><br><span class="line"><span class="string">day2        40       380</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>当然，还有<code>ix</code>组合索引。</p><hr><blockquote><p>排序</p></blockquote><p><strong>df.sort_values(by=,ascending=)</strong></p><p>按照指定列的值进行排序。<code>ascending=True</code>升序</p><p>同样，也可以对给定索引重新排序</p><p><strong>data.sort_index(ascending)</strong></p><ul><li>ps. Series也可以用同样的API</li></ul><hr><blockquote><p>运算</p></blockquote><p>1️⃣ <strong>算术运算</strong></p><p>四则运算</p><p><strong>eg.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">&#x27;open&#x27;</span>].add(<span class="number">1</span>) <span class="comment"># 加</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 减</span></span><br><span class="line">close=data[<span class="string">&#x27;close&#x27;</span>]</span><br><span class="line"><span class="built_in">open</span>=data[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">dat[<span class="string">&#x27;m_price_change&#x27;</span>]=close.sub(<span class="built_in">open</span>) <span class="comment"># 添加一列的话，直接加就是了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘</span></span><br><span class="line">close.multiply(<span class="built_in">open</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除</span></span><br><span class="line">close.div(<span class="built_in">open</span>)</span><br></pre></td></tr></table></figure><p>2️⃣ <strong>逻辑运算</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &gt; &lt; | &amp;</span></span><br><span class="line"><span class="comment"># eg.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># data[() &amp; ()] # 逻辑与</span></span><br><span class="line"><span class="comment"># data[() | ()] # 逻辑或</span></span><br><span class="line"></span><br><span class="line">data[(data[<span class="string">&#x27;close&#x27;</span>]&gt;<span class="number">2</span>) &amp; (data[<span class="string">&#x27;open&#x27;</span>]&lt;<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># query(exper)</span></span><br><span class="line"><span class="comment"># eg.</span></span><br><span class="line">data.query(<span class="string">&quot;close &gt; 2 &amp; open &lt; 5&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># isin(val)</span></span><br><span class="line"><span class="comment"># eg.</span></span><br><span class="line">data[data[<span class="string">&#x27;turnover&#x27;</span>].isin([<span class="number">4.19</span>,<span class="number">2.39</span>])]</span><br></pre></td></tr></table></figure><p><strong>3️⃣ 统计运算</strong></p><p>大哥<code>describe()</code></p><table><thead><tr><th style="text-align:center"><strong>count</strong></th><th style="text-align:center"><strong>Number of non-NA observations</strong></th></tr></thead><tbody><tr><td style="text-align:center">sum</td><td style="text-align:center">求和</td></tr><tr><td style="text-align:center">mean</td><td style="text-align:center">平均</td></tr><tr><td style="text-align:center">median</td><td style="text-align:center">中位数</td></tr><tr><td style="text-align:center">mode</td><td style="text-align:center">众数</td></tr><tr><td style="text-align:center">min</td><td style="text-align:center">最小值</td></tr><tr><td style="text-align:center">max</td><td style="text-align:center">最大值</td></tr><tr><td style="text-align:center">abs</td><td style="text-align:center">绝对值</td></tr><tr><td style="text-align:center">prod</td><td style="text-align:center">累乘</td></tr><tr><td style="text-align:center">std</td><td style="text-align:center">标准差</td></tr><tr><td style="text-align:center">var</td><td style="text-align:center">无偏方差</td></tr><tr><td style="text-align:center">idxmax</td><td style="text-align:center">最大索引</td></tr><tr><td style="text-align:center">idxmin</td><td style="text-align:center">最小索引</td></tr></tbody></table><p>注意，坐标值默认为<code>columns</code>，如果想对行进行，需要指定<code>axis=1</code></p><p>5️⃣ <strong>累计统计函数</strong></p><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">作⽤</th></tr></thead><tbody><tr><td style="text-align:center">cumsum</td><td style="text-align:center">计算前<strong>1/2/3/…/n</strong>个数的和</td></tr><tr><td style="text-align:center">cummax</td><td style="text-align:center">计算前1/2/3/…/n个数的最⼤值</td></tr><tr><td style="text-align:center">cummin</td><td style="text-align:center">计算前1/2/3/…/n个数的最⼩值</td></tr><tr><td style="text-align:center">cumprod</td><td style="text-align:center">计算前1/2/3/…/n个数的积</td></tr></tbody></table><p><strong>栗子</strong> 累计求和</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对时间序列进行累计求和</span></span><br><span class="line"></span><br><span class="line">data=data.sort_index()</span><br><span class="line">stock_rise=data[<span class="string">&#x27;p_change&#x27;</span>]</span><br><span class="line">stock_rise.cumsum().plot()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2022/09/13/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Pandas%E5%85%A5%E9%97%A8/image-20220913230312684.png" alt="image-20220913230312684" style="zoom:50%;"><p>6️⃣ <strong>自定义运算</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply(func,axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><strong>栗子</strong> 求最大值-最小值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[[<span class="string">&quot;open&quot;</span>,<span class="string">&quot;close&quot;</span>]].apply(<span class="keyword">lambda</span> x:x.<span class="built_in">max</span>()-x.<span class="built_in">min</span>(),axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><hr><p><strong>实例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">stock=np.random.uniform(-<span class="number">9.0</span>,<span class="number">15.0</span>,(<span class="number">100</span>,<span class="number">8</span>))</span><br><span class="line">data=pd.DataFrame(stock,index=pd.date_range(<span class="string">&quot;20220912&quot;</span>,periods=<span class="number">100</span>,freq=<span class="string">&quot;B&quot;</span>),columns=[<span class="string">&quot;num_&quot;</span>+<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>)])</span><br><span class="line"></span><br><span class="line">data</span><br></pre></td></tr></table></figure><img src="/2022/09/13/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Pandas%E5%85%A5%E9%97%A8/image-20220913231746812.png" alt="image-20220913231746812" style="zoom:50%;"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">data=data.sort_index()</span><br><span class="line">val=data[<span class="string">&#x27;num_1&#x27;</span>]</span><br><span class="line">stock=val.cumsum().plot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2022/09/13/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Pandas%E5%85%A5%E9%97%A8/image-20220913231805917.png" alt="image-20220913231805917" style="zoom:50%;"><blockquote><p>数据离散化</p></blockquote><p><strong>🎴 Why Discretization</strong></p><p>简化数据结构，减少连续的属性值个数。</p><p>Eg. 人类的身高本身应该是一个连续的区间，但我们可以将其分为<code>高、中、矮</code>几个阶段。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pd.qcut(data,q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照q的个数自动进行分组</span></span><br><span class="line"></span><br><span class="line">pd.cut(data,bins)</span><br><span class="line"><span class="comment"># 指定区间分组</span></span><br><span class="line"></span><br><span class="line">bins = [-<span class="number">100</span>, -<span class="number">7</span>, -<span class="number">5</span>, -<span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">100</span>] </span><br><span class="line">p_counts = pd.cut(p_change, bins)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ⾃⾏分组 </span></span><br><span class="line">qcut = pd.qcut(p_change, <span class="number">10</span>) </span><br><span class="line"><span class="comment"># 计算分到每个组数据个数 </span></span><br><span class="line">qcut.value_counts()</span><br></pre></td></tr></table></figure><p><strong>🔥 One hot 编码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pd.get_dummies(data,prefix=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># prefix是分组名字</span></span><br></pre></td></tr></table></figure><hr><blockquote><p>合并</p></blockquote><p><strong>🍨 Why concat</strong></p><p>方便查询(存储时离散更优)，方便关联规则挖掘与数据探查</p><p><strong>1️⃣ pd.concat</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pd.concat([data1,data2],axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># axis=0 列索引</span></span><br><span class="line"><span class="comment"># axis=1 航索引</span></span><br></pre></td></tr></table></figure><p><strong>2️⃣ pd.merge</strong></p><p>merge这个API 提供了更多更复杂的方法，偏向于数据库的合并了</p><p>但是一般就是左右两个表，多表合并还是<code>concat</code>吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pd.merge(left,right,how=<span class="string">&quot;inner&quot;</span>,on=<span class="literal">None</span>,left_on=<span class="literal">None</span>,right_on=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># on 合并的列名</span></span><br><span class="line"><span class="comment"># left_on，right_on 列名在左右两表中的称呼</span></span><br><span class="line"><span class="comment"># how 合并方式 | inner 内连接 | outer 外连接 也就是left+right | left 左连接 以左表为基准，对于左表有的而右表缺失，会填充NaN | right 右连接</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><blockquote><p>交叉表与透视表</p></blockquote><p><strong>🎏 Why Cross and Pivot?</strong></p><p>探究不同数据可能存在的关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.crosstab(val1,val2)</span><br></pre></td></tr></table></figure><p>简单来说，这个API就是将val1的数据作为<code>源</code>，将val2的数据作为<code>规则</code>进行分组，从而探究其中的关系。</p><p><strong>栗子</strong> 探究星期数据和涨幅数据之间的关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 寻找星期⼏跟股票张得的关系 </span></span><br><span class="line"><span class="comment"># 1、先把对应的⽇期找到星期⼏ </span></span><br><span class="line">date = pd.to_datetime(data.index).weekday </span><br><span class="line">data[<span class="string">&#x27;week&#x27;</span>] = date </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、假如把p_change按照⼤⼩去分个类0为界限 </span></span><br><span class="line">data[<span class="string">&#x27;posi_neg&#x27;</span>] = np.where(data[<span class="string">&#x27;p_change&#x27;</span>] &gt; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>) </span><br><span class="line"><span class="comment"># 通过交叉表找寻两列数据的关系 </span></span><br><span class="line">count = pd.crosstab(data[<span class="string">&#x27;week&#x27;</span>], data[<span class="string">&#x27;posi_neg&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 探究之间的比例关系</span></span><br><span class="line"><span class="built_in">sum</span> = count.<span class="built_in">sum</span>(axis=<span class="number">1</span>).astype(np.float32)</span><br><span class="line"><span class="comment"># 进⾏相除操作，得出⽐例 </span></span><br><span class="line">pro = count.div(<span class="built_in">sum</span>, axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line">pro.plot(kind=<span class="string">&#x27;bar&#x27;</span>, stacked=<span class="literal">True</span>) plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 而透视表，可以让上面的过程更加简单</span></span><br><span class="line">data.pivot_table([<span class="string">&#x27;posi_neg&#x27;</span>], index=<span class="string">&#x27;week&#x27;</span>)</span><br></pre></td></tr></table></figure><hr><blockquote><p>分组和聚合</p></blockquote><p><strong>⛵ Why Grouping and Merge</strong></p><p>在不同的组间，数据往往会表现出差异性，这就是我们想看到的。</p><p><strong>1️⃣ The API of Grouping</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd.groupby(key,as_index=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># key是分组的列数组，可以多个</span></span><br></pre></td></tr></table></figure><p><strong>2️⃣ The API of Merge</strong></p><p>前面说的统计函数就是哦！</p><p><strong>栗子</strong> 不同颜色不同类型的笔的价格数据</p><p><strong>Data</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">col =pd.DataFrame(&#123;<span class="string">&#x27;color&#x27;</span>: [<span class="string">&#x27;white&#x27;</span>,<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>], \</span><br><span class="line">                   <span class="string">&#x27;object&#x27;</span>: [<span class="string">&#x27;pen&#x27;</span>,<span class="string">&#x27;pencil&#x27;</span>,<span class="string">&#x27;pencil&#x27;</span>,<span class="string">&#x27;ashtray&#x27;</span>, <span class="string">&#x27;pen&#x27;</span>],\</span><br><span class="line">                   <span class="string">&#x27;price1&#x27;</span>:[<span class="number">5.56</span>,<span class="number">4.20</span>,<span class="number">1.30</span>,<span class="number">0.56</span>,<span class="number">2.75</span>],\</span><br><span class="line">                   <span class="string">&#x27;price2&#x27;</span>:[<span class="number">4.75</span>,<span class="number">4.12</span>,<span class="number">1.60</span>,<span class="number">0.75</span>,<span class="number">3.15</span>]&#125;)</span><br><span class="line"><span class="built_in">print</span>(col)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   color   object  price1  price2</span></span><br><span class="line"><span class="string">0  white      pen    5.56    4.75</span></span><br><span class="line"><span class="string">1    red   pencil    4.20    4.12</span></span><br><span class="line"><span class="string">2  green   pencil    1.30    1.60</span></span><br><span class="line"><span class="string">3    red  ashtray    0.56    0.75</span></span><br><span class="line"><span class="string">4  green      pen    2.75    3.15</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>Process</strong></p><p>对颜色分组，然后对价格求平均</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">col.groupby([<span class="string">&#x27;color&#x27;</span>])[<span class="string">&#x27;price1&#x27;</span>].mean()</span><br><span class="line">col[<span class="string">&#x27;price1&#x27;</span>].groupby(col[<span class="string">&#x27;color&#x27;</span>]).mean()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">color</span></span><br><span class="line"><span class="string">green    2.025</span></span><br><span class="line"><span class="string">red      2.380</span></span><br><span class="line"><span class="string">white    5.560</span></span><br><span class="line"><span class="string">Name: price1, dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>保证索引位置不变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">col.groupby([<span class="string">&#x27;color&#x27;</span>], as_index=<span class="literal">False</span>)[<span class="string">&#x27;price1&#x27;</span>].mean()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   color  price1</span></span><br><span class="line"><span class="string">0  green   2.025</span></span><br><span class="line"><span class="string">1    red   2.380</span></span><br><span class="line"><span class="string">2  white   5.560</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>注意了，<code>GroupBy</code>对象总是要和聚合函数一起使用的，二者是不可割裂的。</p><p><strong>案例</strong>  星巴克零售店铺数据</p><ul><li><strong>target</strong>  了解美国的星巴克和中国的哪个多，以及中国每个省的星巴克数量</li></ul><img src="/2022/09/13/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Pandas%E5%85%A5%E9%97%A8/image-20220915100248664.png" alt="image-20220915100248664" style="zoom:50%;"><img src="/2022/09/13/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Pandas%E5%85%A5%E9%97%A8/image-20220915100305946.png" alt="image-20220915100305946" style="zoom:50%;"><img src="/2022/09/13/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Pandas%E5%85%A5%E9%97%A8/image-20220915100319027.png" alt="image-20220915100319027" style="zoom:50%;"><hr><h2 id="三、读取CSV文件">三、读取CSV文件</h2><p>CSV（Comma-Separated Values，逗号分隔值，有时也称为字符分隔值，因为分隔字符也可以不是逗号），其文件以纯文本形式存储表格数据（数字和文本）。</p><p>CSV 是一种通用的、相对简单的文件格式，被用户、商业和科学广泛应用。</p><hr><p><strong>1️⃣ 读取</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;nba.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br></pre></td></tr></table></figure><p>这个<code>to_string()</code>用于返回DataFrame类型的数据啦，如果不加的话，默认返回<code>head(5)</code>啦</p><p>2️⃣ <strong>存储</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.to_csv(<span class="string">&quot;site.csv&quot;</span>)</span><br></pre></td></tr></table></figure><p>3️⃣ <strong>数据处理</strong></p><p><code>head()</code></p><ul><li>读取前面<code>n</code>行，如果不填参数,返回默认<code>5</code>行</li></ul><p><code>tail()</code></p><ul><li>读取尾部<code>n</code>行，如果不填，默认返回<code>5</code>行</li></ul><p><code>info()</code></p><ul><li>返回基本信息</li></ul><hr><h2 id="四、读取JSON">四、读取JSON</h2><p>JSON（<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation，JavaScript 对象表示法），是存储和交换文本信息的语法，类似 XML。</p><p>JSON 比 XML 更小、更快，更易解析。</p><p>例如我们的<code>JSON</code>数据:<code>sites.json</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="string">&quot;id&quot;</span>: <span class="string">&quot;A001&quot;</span>,</span><br><span class="line">   <span class="string">&quot;name&quot;</span>: <span class="string">&quot;菜鸟教程&quot;</span>,</span><br><span class="line">   <span class="string">&quot;url&quot;</span>: <span class="string">&quot;www.runoob.com&quot;</span>,</span><br><span class="line">   <span class="string">&quot;likes&quot;</span>: <span class="number">61</span></span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="string">&quot;id&quot;</span>: <span class="string">&quot;A002&quot;</span>,</span><br><span class="line">   <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Google&quot;</span>,</span><br><span class="line">   <span class="string">&quot;url&quot;</span>: <span class="string">&quot;www.google.com&quot;</span>,</span><br><span class="line">   <span class="string">&quot;likes&quot;</span>: <span class="number">124</span></span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="string">&quot;id&quot;</span>: <span class="string">&quot;A003&quot;</span>,</span><br><span class="line">   <span class="string">&quot;name&quot;</span>: <span class="string">&quot;淘宝&quot;</span>,</span><br><span class="line">   <span class="string">&quot;url&quot;</span>: <span class="string">&quot;www.taobao.com&quot;</span>,</span><br><span class="line">   <span class="string">&quot;likes&quot;</span>: <span class="number">45</span></span><br><span class="line">   &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件</span></span><br><span class="line">df = pd.read_json(<span class="string">&#x27;sites.json&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接读取</span></span><br><span class="line">data =[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="string">&quot;A001&quot;</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;菜鸟教程&quot;</span>,</span><br><span class="line">      <span class="string">&quot;url&quot;</span>: <span class="string">&quot;www.runoob.com&quot;</span>,</span><br><span class="line">      <span class="string">&quot;likes&quot;</span>: <span class="number">61</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="string">&quot;A002&quot;</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Google&quot;</span>,</span><br><span class="line">      <span class="string">&quot;url&quot;</span>: <span class="string">&quot;www.google.com&quot;</span>,</span><br><span class="line">      <span class="string">&quot;likes&quot;</span>: <span class="number">124</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="string">&quot;A003&quot;</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;淘宝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;url&quot;</span>: <span class="string">&quot;www.taobao.com&quot;</span>,</span><br><span class="line">      <span class="string">&quot;likes&quot;</span>: <span class="number">45</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从url中读取</span></span><br><span class="line">URL = <span class="string">&#x27;https://static.runoob.com/download/sites.json&#x27;</span></span><br><span class="line">df = pd.read_json(URL)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     id    name             url  likes</span></span><br><span class="line"><span class="string">0  A001    菜鸟教程  www.runoob.com     61</span></span><br><span class="line"><span class="string">1  A002  Google  www.google.com    124</span></span><br><span class="line"><span class="string">2  A003      淘宝  www.taobao.com     45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>对于内嵌的<code>JSON</code>数据，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;school_name&quot;</span>: <span class="string">&quot;ABC primary school&quot;</span>,</span><br><span class="line">    <span class="string">&quot;class&quot;</span>: <span class="string">&quot;Year 1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;students&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="string">&quot;A001&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">        <span class="string">&quot;math&quot;</span>: <span class="number">60</span>,</span><br><span class="line">        <span class="string">&quot;physics&quot;</span>: <span class="number">66</span>,</span><br><span class="line">        <span class="string">&quot;chemistry&quot;</span>: <span class="number">61</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="string">&quot;A002&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;James&quot;</span>,</span><br><span class="line">        <span class="string">&quot;math&quot;</span>: <span class="number">89</span>,</span><br><span class="line">        <span class="string">&quot;physics&quot;</span>: <span class="number">76</span>,</span><br><span class="line">        <span class="string">&quot;chemistry&quot;</span>: <span class="number">51</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="string">&quot;A003&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Jenny&quot;</span>,</span><br><span class="line">        <span class="string">&quot;math&quot;</span>: <span class="number">79</span>,</span><br><span class="line">        <span class="string">&quot;physics&quot;</span>: <span class="number">90</span>,</span><br><span class="line">        <span class="string">&quot;chemistry&quot;</span>: <span class="number">78</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要进行展平：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 Python JSON 模块载入数据</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;nested_list.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.loads(f.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展平数据</span></span><br><span class="line"><span class="comment"># students作为展开项</span></span><br><span class="line"></span><br><span class="line">df_nested_list = pd.json_normalize(data, record_path =[<span class="string">&#x27;students&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df_nested_list)</span><br></pre></td></tr></table></figure><hr><h2 id="五、数据清洗">五、数据清洗</h2><p><strong>1️⃣ 删除空字段</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataFrame.dropna(axis=<span class="number">0</span>, how=<span class="string">&#x27;any&#x27;</span>, thresh=<span class="literal">None</span>, subset=<span class="literal">None</span>, inplace=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li>axis：默认为 <strong>0</strong>，表示逢空值剔除整行，如果设置参数 <strong>axis＝1</strong> 表示逢空值去掉整列。</li><li>how：默认为 <strong>‘any’</strong> 如果一行（或一列）里任何一个数据有出现 NA 就去掉整行，如果设置 <strong>how=‘all’</strong> 一行（或列）都是 NA 才去掉这整行。</li><li>thresh：设置需要多少非空值的数据才可以保留下来的。</li><li>subset：设置想要检查的列。如果是多个列，可以使用列名的 list 作为参数。</li><li>inplace：如果设置 True，将计算得到的值直接覆盖之前的值并返回 None，修改的是源数据。</li></ul><p><strong>判断字段是否为空</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;property-data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (df[<span class="string">&#x27;NUM_BEDROOMS&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span> (df[<span class="string">&#x27;NUM_BEDROOMS&#x27;</span>].isnull())</span><br></pre></td></tr></table></figure><p>当然，有时候我们遇到的空数据可能是这样<code>n/a</code>，可能是这样<code>na</code>，也可能是酱紫<code>--</code>，或者是<code>None</code>酱~</p><p>我们在读取数据中，可以设置将哪些值认定为<code>NA</code>值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">missing_values = [<span class="string">&quot;n/a&quot;</span>, <span class="string">&quot;na&quot;</span>, <span class="string">&quot;--&quot;</span>]</span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;property-data.csv&#x27;</span>, na_values = missing_values)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (df[<span class="string">&#x27;NUM_BEDROOMS&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span> (df[<span class="string">&#x27;NUM_BEDROOMS&#x27;</span>].isnull())</span><br><span class="line"><span class="built_in">print</span> (df[<span class="string">&#x27;NUM_BEDROOMS&#x27;</span>].notnull())</span><br></pre></td></tr></table></figure><p><strong>栗子</strong> 移除指定列中的<code>NA</code>行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;property-data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除&#x27;ST_NUM&#x27;列中的空值</span></span><br><span class="line">df.dropna(subset=[<span class="string">&#x27;ST_NUM&#x27;</span>], inplace = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br></pre></td></tr></table></figure><p><strong>2️⃣ 填充空字段</strong></p><p>我们可以用<code>fillna()</code>方法来替换一些空字段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;property-data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整个表查询并替换</span></span><br><span class="line">df.fillna(<span class="number">12345</span>, inplace = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找PID这行进行替换</span></span><br><span class="line">df[<span class="string">&#x27;PID&#x27;</span>].fillna(<span class="number">12345</span>, inplace = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br></pre></td></tr></table></figure><p>或者通过统计值的方法进行处理~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;property-data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line">x = df[<span class="string">&quot;ST_NUM&quot;</span>].mean() <span class="comment"># 均值</span></span><br><span class="line">x = df[<span class="string">&quot;ST_NUM&quot;</span>].median() <span class="comment"># 中位数</span></span><br><span class="line">x = df[<span class="string">&quot;ST_NUM&quot;</span>].mode() <span class="comment"># 众数</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;ST_NUM&quot;</span>].fillna(x, inplace = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br></pre></td></tr></table></figure><p><strong>3️⃣ 格式错误</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三个日期格式错误</span></span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">&quot;Date&quot;</span>: [<span class="string">&#x27;2020/12/01&#x27;</span>, <span class="string">&#x27;2020/12/02&#x27;</span> , <span class="string">&#x27;20201226&#x27;</span>],</span><br><span class="line">  <span class="string">&quot;duration&quot;</span>: [<span class="number">50</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data, index = [<span class="string">&quot;day1&quot;</span>, <span class="string">&quot;day2&quot;</span>, <span class="string">&quot;day3&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在处理时候，我们可以统一将其类型转化</span></span><br><span class="line">df[<span class="string">&#x27;Date&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;Date&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br></pre></td></tr></table></figure><p><strong>4️⃣ 数据错误</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">person = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span> , <span class="string">&#x27;Taobao&#x27;</span>],</span><br><span class="line">  <span class="string">&quot;age&quot;</span>: [<span class="number">50</span>, <span class="number">40</span>, <span class="number">12345</span>]    <span class="comment"># 12345 年龄数据是错误的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(person)</span><br><span class="line"></span><br><span class="line">df.loc[<span class="number">2</span>, <span class="string">&#x27;age&#x27;</span>] = <span class="number">30</span> <span class="comment"># 修改数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br></pre></td></tr></table></figure><p>将<code>age</code>大于<code>120</code>的设置为<code>120</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">person = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span> , <span class="string">&#x27;Taobao&#x27;</span>],</span><br><span class="line">  <span class="string">&quot;age&quot;</span>: [<span class="number">50</span>, <span class="number">200</span>, <span class="number">12345</span>]    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(person)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> df.index:</span><br><span class="line">  <span class="keyword">if</span> df.loc[x, <span class="string">&quot;age&quot;</span>] &gt; <span class="number">120</span>:</span><br><span class="line">    df.loc[x, <span class="string">&quot;age&quot;</span>] = <span class="number">120</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br></pre></td></tr></table></figure><p>将<code>age</code>大于<code>120</code>的删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">person = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span> , <span class="string">&#x27;Taobao&#x27;</span>],</span><br><span class="line">  <span class="string">&quot;age&quot;</span>: [<span class="number">50</span>, <span class="number">40</span>, <span class="number">12345</span>]    <span class="comment"># 12345 年龄数据是错误的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(person)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> df.index:</span><br><span class="line">  <span class="keyword">if</span> df.loc[x, <span class="string">&quot;age&quot;</span>] &gt; <span class="number">120</span>:</span><br><span class="line">    df.drop(x, inplace = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br></pre></td></tr></table></figure><p><strong>5️⃣ 重复数据</strong></p><p>如果要清洗重复数据，可以使用<code>duplicated()</code>和<code>drop_dulicates()</code>方法</p><p>如果数据是重复的，<code>duplicated()</code>会返回<code>True</code>否则会返回<code>False</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">person = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>],</span><br><span class="line">  <span class="string">&quot;age&quot;</span>: [<span class="number">50</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">23</span>]  </span><br><span class="line">&#125;</span><br><span class="line">df = pd.DataFrame(person)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.duplicated())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0    False</span></span><br><span class="line"><span class="string">1    False</span></span><br><span class="line"><span class="string">2     True</span></span><br><span class="line"><span class="string">3    False</span></span><br><span class="line"><span class="string">dtype: bool</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>删除重复数据，可以直接使用<strong>drop_duplicates()</strong> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">persons = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>],</span><br><span class="line">  <span class="string">&quot;age&quot;</span>: [<span class="number">50</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">23</span>]  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(persons)</span><br><span class="line"></span><br><span class="line">df.drop_duplicates(inplace = <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    name  age</span></span><br><span class="line"><span class="string">0  Google   50</span></span><br><span class="line"><span class="string">1  Runoob   40</span></span><br><span class="line"><span class="string">3  Taobao   23</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><hr><h2 id="六、案例">六、案例</h2><p><strong>Case 1🐰</strong></p><img src="/2022/09/13/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Pandas%E5%85%A5%E9%97%A8/image-20220915103634915.png" alt="image-20220915103634915" style="zoom:50%;"><img src="/2022/09/13/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Pandas%E5%85%A5%E9%97%A8/image-20220915103652035.png" alt="image-20220915103652035" style="zoom:50%;"><img src="/2022/09/13/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Pandas%E5%85%A5%E9%97%A8/image-20220915103703523.png" alt="image-20220915103703523" style="zoom:50%;"><img src="/2022/09/13/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Pandas%E5%85%A5%E9%97%A8/image-20220915103711154.png" alt="image-20220915103711154" style="zoom:50%;"><img src="/2022/09/13/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Pandas%E5%85%A5%E9%97%A8/image-20220915103718599.png" alt="image-20220915103718599" style="zoom:50%;"><img src="/2022/09/13/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Pandas%E5%85%A5%E9%97%A8/image-20220915103725102.png" alt="image-20220915103725102" style="zoom:50%;"><p>当然了，问题三有更优的解决方案：</p><img src="/2022/09/13/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Pandas%E5%85%A5%E9%97%A8/image-20220915104256752.png" alt="image-20220915104256752" style="zoom:50%;"><p>在时间复杂度和空间复杂度上都能大量优化。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">None</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="数据分析" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>【数据结构】差分数组</title>
    <link href="http://example.com/2022/09/12/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E6%9F%A5%E5%88%86%E6%95%B0%E7%BB%84/"/>
    <id>http://example.com/2022/09/12/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E6%9F%A5%E5%88%86%E6%95%B0%E7%BB%84/</id>
    <published>2022-09-12T08:37:54.278Z</published>
    <updated>2022-09-26T15:03:09.622Z</updated>
    
    <content type="html"><![CDATA[<h1>差分数组</h1><hr><h2 id="一、数据结构♎">一、数据结构♎</h2><blockquote><p>在讲差分.数组前，我们可以先看一看【前缀和数组】哦</p></blockquote><table><thead><tr><th style="text-align:center">index</th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th></tr></thead><tbody><tr><td style="text-align:center"><strong>nums</strong></td><td style="text-align:center">8</td><td style="text-align:center">2</td><td style="text-align:center">6</td><td style="text-align:center">-2</td><td style="text-align:center">9</td></tr><tr><td style="text-align:center"><strong>diff</strong></td><td style="text-align:center">8</td><td style="text-align:center">-6</td><td style="text-align:center">4</td><td style="text-align:center">-8</td><td style="text-align:center">11</td></tr></tbody></table><p>我们可以将任意一个数组转化为带有元素之间关系的<strong>差分数组</strong>，其关系为：</p>diff[i]=\left\{ \begin{array}\nums[i]-nums[i-1],i\ne 0\\nums[i],i=0\end{array} \right.<h2 id="二、使用场景♐">二、使用场景♐</h2><p>我们想想这样一个场景：</p><p>有一个<code>一百万数据量</code>的数组，每次需要对其中连续的九十万个数据量进行<code>同步修改</code>，我们会发现，这样做的时间复杂度是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>T</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(Tn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，也就是线性级别，在操作次数过多、数组过大时，会耗费大量的时间。这样在某些业务里是不可接受的。</p><p>有没有一种数据结构能够实现对某个区间元素同步进行修改呢？诶，那必须是我们的差分数组啦！！</p><p>对于修改区间<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[i,j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>的值，我们只需要令：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>i</mi><mi>f</mi><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>+</mo><mo>=</mo><mi>v</mi><mi>a</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">diff[i]+=val</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">ff</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mord">+</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>，也就是进入的时候，海水开始涨潮了，涨潮后，水平面相对不变(不用修改)，但实际高度增加了(进入的临界点)。当然，最后需要令<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>i</mi><mi>f</mi><mi>f</mi><mo stretchy="false">[</mo><mi>j</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo>−</mo><mo>=</mo><mi>v</mi><mi>a</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">diff[j+1]-=val</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">ff</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mord">−</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>，也就是退潮啦。</p><p>我们来看两组差分队列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]]</span><br><span class="line"><span class="comment"># [0, 1, 0, 0, 0, 0, 0, 0, 0]</span></span><br><span class="line"></span><br><span class="line">[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">5</span>]]</span><br><span class="line"><span class="comment"># [0, 1, 1, 0, 0, -1]</span></span><br><span class="line"></span><br><span class="line">[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">5</span>],[<span class="number">3</span>,<span class="number">5</span>],[<span class="number">3</span>,<span class="number">6</span>],[<span class="number">1</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">7</span>]]</span><br><span class="line"><span class="comment"># [0, 2, 2, 2, 0, -2, -2, -1]</span></span><br></pre></td></tr></table></figure><h2 id="三、代码实现🕉️">三、代码实现🕉️</h2><p>我们通过一题来看看如何实现吧！</p><p><a href="https://leetcode.cn/problems/divide-intervals-into-minimum-number-of-groups/">LC6178. 将区间分为最少组数</a></p><img src="/2022/09/12/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E6%9F%A5%E5%88%86%E6%95%B0%E7%BB%84/image-20220912170357166.png" alt="image-20220912170357166" style="zoom:50%;"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minGroups</span>(<span class="params">self, intervals: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"><span class="comment"># 核心在于： 寻找同时重叠的波浪</span></span><br><span class="line">        <span class="comment"># 差分队列</span></span><br><span class="line">        maxVal=<span class="built_in">max</span>([i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> intervals])</span><br><span class="line">        diff=[<span class="number">0</span>]*(maxVal+<span class="number">1</span>) <span class="comment"># 0-&gt;maxVal</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算区间变化情况</span></span><br><span class="line">        <span class="keyword">for</span> i,j <span class="keyword">in</span> intervals:</span><br><span class="line">            diff[i]+=<span class="number">1</span> <span class="comment"># 涨潮</span></span><br><span class="line">            <span class="keyword">if</span> j+<span class="number">1</span>&lt;=maxVal:</span><br><span class="line">                diff[j+<span class="number">1</span>]-=<span class="number">1</span> <span class="comment"># 退潮</span></span><br><span class="line">        <span class="comment"># 查看有多少区间上重叠了</span></span><br><span class="line">        <span class="comment"># 最大值就是重叠的区间数目</span></span><br><span class="line">        res,t=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> diff:</span><br><span class="line">            t+=i</span><br><span class="line">            res=<span class="built_in">max</span>(res,t)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>当然并不是所有的区间问题都能用差分求解！差分只是为了简化赋值运算，那么该贪心的时候就贪心，该DP就DP，别老想着别的。</p><p>不过如果你说重叠部分，差分确实能够起到一定的效果~</p><p>下面看看一个经典差分</p><h4 id="LC-2381-字母移位-II"><a href="https://leetcode.cn/problems/shifting-letters-ii/">LC 2381. 字母移位 II</a></h4><img src="/2022/09/12/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E6%9F%A5%E5%88%86%E6%95%B0%E7%BB%84/image-20220912222755301.png" alt="image-20220912222755301" style="zoom:50%;"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全是赋值运算！</span></span><br><span class="line"><span class="comment"># 正常算的话，会超时</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shiftingLetters</span>(<span class="params">self, s: <span class="built_in">str</span>, shifts</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        diff=[<span class="number">0</span>]*(<span class="built_in">len</span>(s)+<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 构建差分</span></span><br><span class="line">        <span class="keyword">for</span> st,e,shift <span class="keyword">in</span> shifts:</span><br><span class="line">            diff[st]+=shift*<span class="number">2</span>-<span class="number">1</span></span><br><span class="line">            diff[e+<span class="number">1</span>]-=shift*<span class="number">2</span>-<span class="number">1</span></span><br><span class="line">        <span class="comment"># 获取移动表</span></span><br><span class="line">        shift=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> diff:</span><br><span class="line">            <span class="keyword">if</span> shift==[]:</span><br><span class="line">                shift.append(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                shift.append(i+shift[-<span class="number">1</span>])</span><br><span class="line">        <span class="comment"># 输出</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>)+(<span class="built_in">ord</span>(i)-<span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>)+dif)%<span class="number">26</span>) <span class="keyword">for</span> i,dif <span class="keyword">in</span> <span class="built_in">zip</span>(s,shift)])</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">数据结构之【差分数组】</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Python 奇怪的知识</title>
    <link href="http://example.com/2022/09/07/%E3%80%90Python%E3%80%91Python%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86/"/>
    <id>http://example.com/2022/09/07/%E3%80%90Python%E3%80%91Python%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86/</id>
    <published>2022-09-07T13:43:14.992Z</published>
    <updated>2022-09-19T09:54:48.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python奇怪的知识">Python奇怪的知识</h2><h3 id="带余除法！"><strong>带余除法！</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C,D=<span class="built_in">divmod</span>(A,B)</span><br><span class="line"></span><br><span class="line"><span class="comment"># eg.</span></span><br><span class="line"><span class="comment"># print(divmod(19,6))</span></span><br><span class="line"><span class="comment"># (3,1)</span></span><br></pre></td></tr></table></figure><h3 id="Join神器！">Join神器！</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">&quot; &quot;</span>*A).join(B)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意啦！</span></span><br><span class="line"><span class="comment"># 以B[0]开头 B[n-1]结尾</span></span><br><span class="line"><span class="comment"># 中间穿插&quot; &quot;*A  </span></span><br></pre></td></tr></table></figure><p><strong>多规则排序!</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">要求对nums数组中的元素先按照数量升序，数量相同的时候按照字典序降序！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先获取数量</span></span><br><span class="line">cnt=Counter(nums)</span><br><span class="line">nums.sort(key=<span class="keyword">lambda</span> x:(cnt[x],-x))</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">Python 奇怪的知识</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>【知乎转载】鼻炎成因及疗法</title>
    <link href="http://example.com/2022/09/07/%E3%80%90%E7%9F%A5%E4%B9%8E%E8%BD%AC%E8%BD%BD%E3%80%91%E9%BC%BB%E7%82%8E/"/>
    <id>http://example.com/2022/09/07/%E3%80%90%E7%9F%A5%E4%B9%8E%E8%BD%AC%E8%BD%BD%E3%80%91%E9%BC%BB%E7%82%8E/</id>
    <published>2022-09-07T12:35:06.647Z</published>
    <updated>2022-09-07T12:37:44.113Z</updated>
    
    <content type="html"><![CDATA[<p>“通鼻喷剂”、“鼻甲切除术”的滥用，只追求迅速，不看长远。</p><p>通鼻喷剂，简直是鼻塞患者的“神药”一喷即灵，立竿见影的效果，殊不知这是在饮鸩止渴，一开始使用确实效果很好，但持续一段时间后，发现原来喷一下就通了，现在得喷两下、三下，并且药效越来越短，之前喷完两三个小时都不堵，现在不到半小时又堵了。于是剂量越用越大，使用次数越来越多，形成药物依赖。</p><p>我曾经有个鼻炎患者，买“通鼻喷剂”是以箱为单位，最后只要不用，鼻子就永远没畅通过。</p><p>这些“通鼻喷剂”从作用原理分类上属于减充血剂，也可以称为血管收缩剂。</p><p>药物性鼻炎就是长期过度使用这类药物而引发的。</p><p>鼻塞产生的原因是：血管通透性增加，使得大量血浆渗入黏膜组织，造成水肿堵塞了气道。</p><p>通过使用减充血剂，就像从源头上把供水的水管给关紧了，没有持续的体液供应，组织水肿就会消退，黏膜肿胀的问题缓解，气道重新恢复通畅。</p><p>但是，长期使用减充血剂后，血管的“阀门”会对药物变得越来越不敏感，更糟糕的是还会出现反跳性充血，因为经常使用减充血剂，血液流量减少了，不仅让黏膜组织得不到充足的营养供应，并且代谢的废物也会堆积在鼻腔，血管不得不代偿性扩张以平衡药物收缩血管的作用。</p><p>结果就是通鼻喷剂越用越多、效果越来越差、不用就不通，最后就成了“药物性鼻炎”</p><p>儿童用减充血剂的危害更大，因为儿童鼻黏膜娇嫩、血管丰富，药物吸收的更快，剂量更难以把控，效果和副作用更加明显，还有通过鼻咽后有被孩子吞食的风险，从胃部进入血液的药物会作用于全身，因此大部分减充血剂都禁止给儿童使用</p><p>除了通鼻喷剂，减充血剂还会藏在各种复方制剂中，最常见的是感冒药，在名称中带有“麻”字的感冒药通常含有减充血剂，所以需要家长们格外注意。</p><p>为了短暂的鼻子通畅，冒着承受严重副作用和药物依赖的风险，实在不值得。</p><p>空鼻综合征：每一次呼吸都是痛苦的折磨<br>“一进入空调车，我每吸一口气，就感觉冷空气直接进入到我的肺里。”</p><p>“鼻子不痛，人难受、头疼、整晚睡不着觉…”</p><p>“晚上睡觉就像‘烙大饼’，左边鼻子堵了翻右边，右边又堵了再翻左边，经常堵醒或嗓子干，半夜起来喝水，一个晚上可以翻100次身。”</p><p>“睡不好、注意力不集中，像我这种原来学习能力很强的人，影响用脑感觉很痛苦，好多事都没精力做…”</p><p>这些人在描述自己的状况时，几乎都用了“生不如死”，每时每刻都要呼吸，而每一次呼吸都是痛苦的折磨。</p><p>都是因为手术切除部分鼻甲黏膜后，鼻黏膜对空气加温、加湿以及过滤的功能作用被破坏，吸入鼻腔的干冷空气直接进入气管肺部，还刺激着鼻腔分布的神经末梢，造成反射性头痛；这些直接吸进去的空气缺乏有效的清洁过滤，携带细菌进入还可能造成呼吸道感染。</p><p>切除肿胀的鼻黏膜后鼻腔本来是变宽大了，通气顺畅才对，为什么还会出现鼻塞？</p><p>是因为鼻黏膜上丰富的的末梢神经能感知气流，一旦被破坏就会感觉不到空气流动，产生鼻塞的感觉，还伴有头痛、嗅觉减退等症状。</p><p>除了鼻甲切除术，还有黏膜外黏膜消除术（如表面烧灼、激光治疗）</p><p>黏膜下消融术（如黏膜内烧灼、射频消融、激光治疗）等破坏黏膜的疗法都有造成空鼻综合征的风险。</p><p>上面所说的两种方法都是为了解决鼻塞的问题<br>为什么会一直鼻塞，鼻塞的常见原因是什么？</p><p>1、过敏引起的鼻塞</p><p>吸入一些过敏原如花粉、尘螨、面粉等，引起过敏反应，鼻腔黏膜充血，影响空气吸入，造成鼻塞。这种需要查过敏原，从源头避免吸入过敏原。</p><p>2、慢性鼻炎</p><p>鼻腔纤毛摆动异常，无法运送垃圾出去，这些炎性物质不断堆积在鼻腔里，堆积的分泌物和炎性物质又不断刺激鼻黏膜，进一步加重纤毛摆动异常，如此形成恶性循环，鼻炎久而不愈。</p><p>这种慢性鼻炎需要抗炎排分泌物，从源头减少分泌物，然后修复鼻黏膜使纤毛恢复正常摆动，加快运送垃圾。</p><p>3、鼻中隔偏曲</p><p>大部分人的鼻中隔其实都会微微偏向鼻腔的某一侧，这并不会导致功能障碍，但如果鼻中隔“拗造型”太过放飞自我，扭成了“C”形或者“S”形时，问题就严重了，会造成经常流鼻血、鼻塞不通气等难受的病症。</p><p>4、外伤、发育不良</p><p>通鼻喷剂不是给孩子缓解鼻塞长期用的，手术切除鼻甲又会有“空鼻综合征”的风险，那么孩子鼻塞，家长该怎么办？试试这些方法<br>鼻塞是症状，是因为鼻腔有炎症才会造成鼻塞，因此对付鼻塞的根本是消除炎症，降低血管通透性。缓解鼻塞的思路绝对不是收缩血管，相反，应该加快局部血液循环，带走潴留在组织中的液体，像大禹治水一样，堵不如疏。</p><p>1、按摩这些穴位</p><p>揉迎香穴、山根穴、风池穴、摩擦鼻梁</p><p>2、中药雾化&amp;水蒸汽</p><p>和之前咳嗽的蒸汽排痰法一样，用水蒸气熏蒸15~20分钟，注意温度距离，避免烫伤。</p><p>配合中药配方雾化，促进分泌物排出的同时修复黏膜、消除炎症。</p><p>3、半导体弱激光照射鼻黏膜</p><p>采用红光或红外光照射鼻腔黏膜，可以促进鼻黏膜局部血液循环，改善黏膜水肿缓解鼻塞。</p><p>这种激光照射知识一种缓解鼻塞症状的辅助治疗手段，和盐水洗鼻的作用类似，真正解决鼻塞，还是需要修鼻腔黏膜、消除炎症。</p><p>4、盐水洗鼻</p><p>盐水洗鼻是需要用药店的生理盐水，不是在家用食盐和水兑成生理盐水。并且盐水冲洗鼻腔需要一定水压和水量，要格外注意，因为有可能把炎性物质冲进更深地方，引发其他部位感染发炎。</p><p>人体有自己的黏液纤毛清除运动，所以要解决鼻塞，还是需要修复黏膜，让纤毛恢复正常摆动，加快运送垃圾，消除炎症刺激。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">转载自https://www.zhihu.com/question/366308089/answer/1329668016</summary>
    
    
    
    <category term="拾枝杂谈" scheme="http://example.com/categories/%E6%8B%BE%E6%9E%9D%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="知乎转载" scheme="http://example.com/tags/%E7%9F%A5%E4%B9%8E%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>【作品集】岁月拾珠</title>
    <link href="http://example.com/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    <id>http://example.com/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/</id>
    <published>2022-09-07T10:36:57.526Z</published>
    <updated>2022-10-06T17:44:07.930Z</updated>
    
    <content type="html"><![CDATA[<h1>岁染の设计集</h1><hr><p>随缘更新哦，主要是记录22年9月-25年6月的设计作品啦，看个乐呵吧！</p><hr><p><strong>Name</strong> 科普征文大赛海报</p><p><strong>Time</strong>  2022年9月1日</p><img src="/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/image-20220908164603107.png" alt="image-20220908164603107" style="zoom:50%;"><hr><p><strong>Name</strong> 新生杯篮球赛</p><p><strong>Time</strong>  2022年9月6日</p><img src="/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/image-20220908164902050.png" alt="image-20220908164902050" style="zoom:50%;"><hr><p><strong>Name</strong> 岁染</p><p><strong>Time</strong> 2022年9月19日</p><img src="/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/QQ截图20220919163717.png" alt="QQ截图20220919163717" style="zoom:50%;"><hr><p><strong>Name</strong> 百川环沧海 资此赴玉台</p><p><strong>Time</strong> 2022年9月19日</p><img src="/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/QQ截图20220919210508.png" alt="QQ截图20220919210508" style="zoom:50%;"><hr><p><strong>Name</strong> 星火聚雁栖 浓情染秋思</p><p><strong>Time</strong> 2022年9月19日</p><img src="/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/image-20220919230445191.png" alt="image-20220919230445191" style="zoom:50%;"><hr><h2 id="第一版">第一版</h2><hr><p><strong>设计思路🏷️</strong></p><ul><li>从地球元素出发，寻找比较切合环保的主题</li><li>选择了叶子、水滴、星环(海洋)作为环保元素</li></ul><p><strong>元素设计💠</strong></p><ul><li><strong>zh</strong> 抽象字  这是球外面那个环 是一个<code>zh</code>的元素</li><li><strong>贝壳</strong> 这个是球的一部分，遮挡剩下的刚好是个贝壳上下口</li><li><strong>星环</strong> 主要起到美观作用 也象征着海洋。四个环汇聚，有循环延伸之意</li><li><strong>叶子</strong>  <code>zh</code>的头和尾 象征着生态与环保</li><li><strong>球</strong> 象征着地球 我们扎根地球，服务地球</li></ul><img src="/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/Screenshot_6.png" alt="Screenshot_6" style="zoom:50%;"><hr><p><strong>展示🌟</strong></p><img src="/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/Screenshot_1.png" alt="Screenshot_1" style="zoom:50%;"><p><img src="/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/Screenshot_4.png" alt="Screenshot_4"></p><img src="/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/Screenshot_3.png" alt="Screenshot_3" style="zoom:50%;"><hr><img src="/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/image-20220924180835677-1664014116001-1.png" alt="image-20220924180835677" style="zoom:50%;"><img src="/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/image-20220924181036512.png" alt="image-20220924181036512" style="zoom:50%;"><img src="/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/image-20220924181224783.png" alt="image-20220924181224783" style="zoom:50%;"><img src="/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/image-20220924181608936.png" alt="image-20220924181608936" style="zoom:50%;"><img src="/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/image-20220924181729244.png" alt="image-20220924181729244" style="zoom:50%;"><img src="/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/image-20220924182018333.png" alt="image-20220924182018333" style="zoom:50%;"><hr><img src="/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/Screenshot_3.jpg" alt="Screenshot_3" style="zoom:50%;"><img src="/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/Screenshot_1.jpg" alt="Screenshot_1" style="zoom:50%;"><img src="/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/Screenshot_2.jpg" alt="Screenshot_2" style="zoom:50%;"><p><img src="/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/%E7%8E%AF%E4%BF%9D_%E5%A4%A9%E7%84%B6%E6%B0%94logo1.png" alt="环保_天然气logo"></p><hr><p><strong>Name</strong> NEXUS LOGO</p><p><strong>Time</strong> 2022年10月7日</p><img src="/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/image-20221007002536420.png" alt="image-20221007002536420" style="zoom: 33%;"><img src="/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/image-20221007002550914.png" alt="image-20221007002550914" style="zoom:50%;"><img src="/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/image-20221007002619778.png" alt="image-20221007002619778" style="zoom:50%;"><img src="/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/Screenshot_7.jpg" alt="Screenshot_7" style="zoom: 33%;"><img src="/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/Screenshot_6.jpg" alt="Screenshot_6" style="zoom:33%;"><img src="/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/Screenshot_5.jpg" alt="Screenshot_5" style="zoom:33%;"><img src="/2022/09/07/%E3%80%90Artist%E3%80%91%E4%BD%9C%E5%93%81%E9%9B%86/Screenshot_3-1665078231699-3.jpg" alt="Screenshot_3" style="zoom:33%;"><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">作品集</summary>
    
    
    
    <category term="梦时风月" scheme="http://example.com/categories/%E6%A2%A6%E6%97%B6%E9%A3%8E%E6%9C%88/"/>
    
    
    <category term="平面设计" scheme="http://example.com/tags/%E5%B9%B3%E9%9D%A2%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Numpy教程</title>
    <link href="http://example.com/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/</id>
    <published>2022-09-07T05:09:27.030Z</published>
    <updated>2022-10-10T09:52:37.800Z</updated>
    
    <content type="html"><![CDATA[<h1>Numpy 教程</h1><p>什么是<code>Numpy</code>？Numpy(Numerical Python)是一个Python扩展库，支持大量的维度数组和矩阵运算，此外也针对数组运算提供大量的数学函数库。</p><p>其主要用于数组计算，特点包括：</p><ul><li>一个强大的N维数组对象ndarray</li><li>广播功能函数</li><li>整合C/C++/Fortran代码的工具</li><li>线性代数、傅里叶变换、随机数生成等功能</li></ul><hr><h2 id="一、Ndarray对象">一、Ndarray对象</h2><p>Ndarray(N-dimension array)是一个<code>N</code>维数组对象，他是一系列同类型数据的集合。</p><p>其内部构成为：</p><ul><li>一个指向数据的指针</li><li>数据类型<code>dtype</code>，描述在数组中的固定大小的格子</li><li>一个表示数组形状<code>shape</code>的元组</li><li>一个跨度元组<code>stride</code>,也就是我们索引切片的时候选择的跨度</li></ul><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907131758920.png" alt="image-20220907131758920" style="zoom:50%;"><p><strong>风格印象🐉</strong></p><ul><li>快！很快！非常快！</li></ul><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220913170301299.png" alt="image-20220913170301299" style="zoom:50%;"><p><code>ndarray</code>中所有元素类型都是相同的，其存储位置是连续的！可以免去寻址步骤节省时间！</p><ul><li>全局解释器锁(Global Interpreter Lock)</li></ul><p>Numpy 底层通过C编写，解除了GIL，其效率远高于Python！</p><hr><p>下面我们来看看具体的生成器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">numpy.array(<span class="built_in">object</span>, dtype = <span class="literal">None</span>, copy = <span class="literal">True</span>, order = <span class="literal">None</span>, subok = <span class="literal">False</span>, ndmin = <span class="number">0</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">object: 数组或嵌套的数列</span></span><br><span class="line"><span class="string">dtype: 数据类型</span></span><br><span class="line"><span class="string">copy: 对象是否需要复制(new的内存空间)</span></span><br><span class="line"><span class="string">order: 创建数组的样式，A为任意方向，C为行方向，F为列方向</span></span><br><span class="line"><span class="string">subok: 返回一个与基类型一致的数组</span></span><br><span class="line"><span class="string">ndmin: 指定生成数组的最小维度</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>生成最小维度</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最小维度  </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], ndmin =  <span class="number">2</span>)  </span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[1 2 3 4 5]]</span></span><br></pre></td></tr></table></figure><blockquote><p>ndarray 对象由计算机内存的连续一维部分组成，并结合索引模式，将每个元素映射到内存块的一个位置。</p></blockquote><hr><h2 id="二、数据类型">二、数据类型</h2><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">bool_</td><td style="text-align:center">布尔型数据类型（True 或者 False）</td></tr><tr><td style="text-align:center">int_</td><td style="text-align:center">默认的整数类型（类似于 C 语言中的 long，int32 或 int64）</td></tr><tr><td style="text-align:center">intc</td><td style="text-align:center">与 C 的 int 类型一样，一般是 int32 或 int 64</td></tr><tr><td style="text-align:center">intp</td><td style="text-align:center">用于索引的整数类型（类似于 C 的 ssize_t，一般情况下仍然是 int32 或 int64）</td></tr><tr><td style="text-align:center">int8</td><td style="text-align:center">字节（-128 to 127）</td></tr><tr><td style="text-align:center">int16</td><td style="text-align:center">整数（-32768 to 32767）</td></tr><tr><td style="text-align:center">int32</td><td style="text-align:center">整数（-2147483648 to 2147483647）</td></tr><tr><td style="text-align:center">int64</td><td style="text-align:center">整数（-9223372036854775808 to 9223372036854775807）</td></tr><tr><td style="text-align:center">uint8</td><td style="text-align:center">无符号整数（0 to 255）</td></tr><tr><td style="text-align:center">uint16</td><td style="text-align:center">无符号整数（0 to 65535）</td></tr><tr><td style="text-align:center">uint32</td><td style="text-align:center">无符号整数（0 to 4294967295）</td></tr><tr><td style="text-align:center">uint64</td><td style="text-align:center">无符号整数（0 to 18446744073709551615）</td></tr><tr><td style="text-align:center">float_</td><td style="text-align:center">float64 类型的简写</td></tr><tr><td style="text-align:center">float16</td><td style="text-align:center">半精度浮点数，包括：1 个符号位，5 个指数位，10 个尾数位</td></tr><tr><td style="text-align:center">float32</td><td style="text-align:center">单精度浮点数，包括：1 个符号位，8 个指数位，23 个尾数位</td></tr><tr><td style="text-align:center">float64</td><td style="text-align:center">双精度浮点数，包括：1 个符号位，11 个指数位，52 个尾数位</td></tr><tr><td style="text-align:center">complex_</td><td style="text-align:center">complex128 类型的简写，即 128 位复数</td></tr><tr><td style="text-align:center">complex64</td><td style="text-align:center">复数，表示双 32 位浮点数（实数部分和虚数部分）</td></tr><tr><td style="text-align:center">complex128</td><td style="text-align:center">复数，表示双 64 位浮点数（实数部分和虚数部分）</td></tr></tbody></table><hr><h2 id="三、数组属性">三、数组属性</h2><p>Numpy的数组维度数量称为秩(rank)，每一个线性的数组是一个轴(axis)，也就是维度。</p><p>例如：二维数组由两个一维数组构成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># [A,B,C]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者是：</span></span><br><span class="line"><span class="comment"># [ A,</span></span><br><span class="line"><span class="comment">#B,</span></span><br><span class="line"><span class="comment">#   C ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A=[1,2,3]</span></span><br></pre></td></tr></table></figure><p>第一个一维数组中的每个元素又是一个一维数组。第一个轴也成为了底层数组，第二个则是底层数组中的数组，以此类推。</p><p>简单说一下，<code>axis=0</code>的情况表示沿着第0轴进行操作，也就是列，<code>axis=1</code>则是沿着第1轴进行操作，也就是行。</p><p><strong>常用属性</strong></p><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">ndarray.ndim</td><td style="text-align:center">秩，即轴的数量或维度的数量</td></tr><tr><td style="text-align:center">ndarray.shape</td><td style="text-align:center">数组的维度，对于矩阵，n 行 m 列</td></tr><tr><td style="text-align:center">ndarray.size</td><td style="text-align:center">数组元素的总个数，相当于 .shape 中 n*m 的值</td></tr><tr><td style="text-align:center">ndarray.dtype</td><td style="text-align:center">ndarray 对象的元素类型</td></tr><tr><td style="text-align:center">ndarray.itemsize</td><td style="text-align:center">ndarray 对象中每个元素的大小，以字节为单位</td></tr><tr><td style="text-align:center">ndarray.flags</td><td style="text-align:center">ndarray 对象的内存信息</td></tr><tr><td style="text-align:center">ndarray.real</td><td style="text-align:center">ndarray元素的实部</td></tr><tr><td style="text-align:center">ndarray.imag</td><td style="text-align:center">ndarray 元素的虚部</td></tr><tr><td style="text-align:center">ndarray.data</td><td style="text-align:center">包含实际数组元素的缓冲区，由于一般通过数组的索引获取元素，所以通常不需要使用这个属性。</td></tr></tbody></table><p><strong>示例</strong></p><p>1️⃣ <strong>ndim</strong></p><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907133648496.png" alt="image-20220907133648496" style="zoom:50%;"><p>2️⃣ <strong>shape</strong></p><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907133713115.png" alt="image-20220907133713115" style="zoom:50%;"><p>3️⃣ <strong>size</strong></p><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907133735406.png" alt="image-20220907133735406" style="zoom:50%;"><p>4️⃣ <strong>dtype</strong></p><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907133818185.png" alt="image-20220907133818185" style="zoom:50%;"><hr><h2 id="四、Numpy-创建数组">四、Numpy 创建数组</h2><p>除却使用<code>ndarray</code>底层构造器外，我们还可以采用以下的方式来创建数组哦。</p><p><strong>1️⃣ numpy.empty</strong></p><p>参数说明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">numpy.empty(shape, dtype = <span class="built_in">float</span>, order = <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">shape: 数组形状</span></span><br><span class="line"><span class="string">dtype: 数据类型</span></span><br><span class="line"><span class="string">order: 行优先还是列优先，表示在计算机内中存储元素的顺序</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>创建一个空数组</strong></p><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907134640835.png" alt="image-20220907134640835" style="zoom:50%;"><p>数组的元素为随机数，因为并未进行初始化。</p><p><strong>2️⃣ numpy.zeros</strong></p><p>参数说明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.zeros(shape, dtype = <span class="built_in">float</span>, order = <span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>创建一个零数组</strong></p><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907134826672.png" alt="image-20220907134826672" style="zoom:50%;"><p><strong>3️⃣ numpy.ones(shape,dtype,order)</strong></p><p>使用方式一样哦，创建全1数组</p><p><strong>4️⃣ numpy.arange(start=0,stop,step,dtype)</strong></p><p>返回一个<code>0~n-1</code>的<code>ndarray</code>数组~</p><p><strong>5️⃣ numpy.full(shape,val)</strong></p><p>生成一个值全为<code>val</code>的数组~</p><p><strong>6️⃣ numpy.eye(n)</strong></p><p>生成单位矩阵~</p><p><strong>7️⃣ numpy.diag(list)</strong></p><p>生成对角线矩阵！</p><hr><p><strong>8️⃣ numpy.asarray(a,dtype,order)</strong></p><p>从给定的参数中生成<code>ndarray</code></p><p><strong>9️⃣ numpy.fromiter(iterable,dtype,count=-1)</strong></p><p>从可迭代对象中创建<code>ndarray</code>对象，返回一维数组，<code>count</code>表示读取的数据量，默认是读取所有数据</p><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907135445064.png" alt="image-20220907135445064" style="zoom:50%;"><p><strong>☀️ numpy.linspace</strong></p><p>用于创建一个等差数列的<strong>一维数组</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">np.linspace(start, stop, num=<span class="number">50</span>, endpoint=<span class="literal">True</span>, retstep=<span class="literal">False</span>, dtype=<span class="literal">None</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">endpoint: 是否包含终止点</span></span><br><span class="line"><span class="string">retstep: 是否输出间距</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907135746065.png" alt="image-20220907135746065" style="zoom:50%;"><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907135755667.png" alt="image-20220907135755667" style="zoom:50%;"><p><strong>🌙 numpy.logspace</strong></p><p>用于创建一个等比数列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">np.logspace(start, stop, num=<span class="number">50</span>, endpoint=<span class="literal">True</span>, base=<span class="number">10.0</span>, dtype=<span class="literal">None</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">base: 默认底数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907135938777.png" alt="image-20220907135938777" style="zoom:50%;"><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907135953686.png" alt="image-20220907135953686" style="zoom:50%;"><hr><h2 id="五、Numpy的切片和索引">五、Numpy的切片和索引</h2><p><code>ndarray</code>中的对象内容可以通过索引或切片来访问和修改。</p><p>有两种比较主流的索引方式：</p><ul><li>内置<code>slice</code>函数</li><li>冒号分隔符</li></ul><p>我们重点说<code>冒号分隔符</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A[star:step:end]</span><br></pre></td></tr></table></figure><p>注意<strong>左闭右开</strong>。</p><p>除却本身<code>list</code>的机制外，我们还可以采用省略号。</p><p>表示取到某一维度上的所有数据，譬如：</p><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907161127678.png" alt="image-20220907161127678" style="zoom:50%;"><p>除此之外，<code>Numpy</code>有一些更高级的索引方式。</p><p><strong>1️⃣整数数组索引</strong></p><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907161408916.png" alt="image-20220907161408916" style="zoom:50%;"><p>根据数组维度，第一个索引数组表示<code>axis=0</code>，第二个索引数组表示<code>axis=1</code>，他们之间的<code>一一映射</code>确保了行列之间的取值。</p><p><strong>维度不对会报错</strong></p><p>当然，当第一个数组或者第二个数组维度为<code>1</code>时，不会报错，表示就要这一个位置。</p><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907161526604.png" alt="image-20220907161526604" style="zoom:50%;"><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907161653950.png" alt="image-20220907161653950" style="zoom:50%;"><p>我们的索引可以与切片<code>:</code>或<code>...</code>进行组合：</p><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907162130989.png" alt="image-20220907162130989" style="zoom:50%;"><p>基本上能满足项目需要的索引组合了。</p><p><strong>2️⃣ 布尔索引</strong></p><p>可以通过布尔运算来过滤指定条件之外的元素！</p><p>下面看个栗子：<br><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907162344660.png" alt="image-20220907162344660" style="zoom:50%;"></p><p>下面的实例采用了逻辑非<code>~</code>对<code>NaN</code>数据进行过滤</p><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907162441545.png" alt="image-20220907162441545" style="zoom:50%;"><p>过滤非复数元素</p><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907162515978.png" alt="image-20220907162515978" style="zoom:50%;"><p>3️⃣ <strong>花式索引</strong></p><p>利用整数数组进行索引。</p><p>花式索引总是将数据复制到新数组中。</p><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907163812907.png" alt="image-20220907163812907" style="zoom:50%;"><hr><h2 id="六、Numpy的广播机制">六、Numpy的广播机制</h2><p>广播(Broadcast)是<code>numpy</code>对不同形状的数组进行数值计算的方式。</p><p>☀️</p><p>若两个数组<code>a</code>和<code>b</code>形状相同，对应的操作应当是每个元素之间的操作。</p><p>这要求维数相同，且各维度的长度相同。</p><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907164450631.png" alt="image-20220907164450631" style="zoom:50%;"><p>🌙</p><p>在两个数组形状不同时，<code>numpy</code>将自动触发广播机制。</p><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907164553770.png" alt="image-20220907164553770" style="zoom:50%;"><p>其内部运算逻辑如下图：</p><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907164617941.png" alt="image-20220907164617941" style="zoom:50%;"><p>这种广播要求的是一定有一个维度长度是匹配的，将较小的数组通过重复扩张到大的维度，以匹配维度为核心进行运算。</p><p><strong>规则</strong></p><ul><li>让所有输入数组都向其中形状最长的数组看齐，形状中不足的部分都通过在前面加 1 补齐。<ul><li>例如：a(2,3) b(3)—&gt;b(1,3)</li></ul></li><li>输出数组的形状是输入数组形状的各个维度上的最大值。</li><li>如果输入数组的某个维度和输出数组的对应维度的长度相同或者其长度为 1 时，这个数组能够用来计算，否则出错。</li><li>当输入数组的某个维度的长度为 1 时，沿着此维度运算时都用此维度上的第一组值。</li></ul><p><strong>简单理解</strong></p><p>对两个数组，分别比较他们的每一个维度（若其中一个数组没有当前维度则忽略），满足：</p><ul><li>数组拥有相同形状✅</li><li>当前维度的值相等✅</li><li>当前维度的值有一个是 1✅</li></ul><p>1️⃣ 同shape</p><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907165638282.png" alt="image-20220907165638282" style="zoom:50%;"><p>2️⃣ 某个维度相等</p><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907165711782.png" alt="image-20220907165711782" style="zoom:50%;"><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907165725149.png" alt="image-20220907165725149" style="zoom:50%;"><p>3️⃣ 某个维度为1</p><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907165745186.png" alt="image-20220907165745186" style="zoom:50%;"><p>4️⃣ 不满足上述条件</p><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907165815935.png" alt="image-20220907165815935" style="zoom:50%;"><p>弹出ValueError错误</p><hr><h2 id="七、Numpy-数组操作与逻辑运算">七、Numpy 数组操作与逻辑运算</h2><p><strong>1️⃣ 逻辑运算</strong></p><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907170115856.png" alt="image-20220907170115856" style="zoom:50%;"><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907170201190.png" alt="image-20220907170201190" style="zoom:50%;"><img src="/2022/09/07/%E3%80%90%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%91Numpy%E5%85%A5%E9%97%A8/image-20220907170312288.png" alt="image-20220907170312288" style="zoom:50%;"><p>2️⃣ <strong>通用判断函数</strong></p><ul><li><p><strong>np.all()</strong></p><ul><li><p>返回某个表达式中的元素是否全是满足条件</p></li><li><pre><code class="language-python">np.all(stock_day_rise[0:2,0:5] &gt; 0)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ **np.unique()**</span><br><span class="line"></span><br><span class="line">  + 返回唯一值</span><br><span class="line"></span><br><span class="line">  + ```python</span><br><span class="line">    np.unique(stock_day_rise[0:2,0:5].astype(int))</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p><strong>np.any()</strong></p><ul><li><p>只要有一个元素满足条件就返回<code>True</code></p></li><li><pre><code class="language-python">np.any(stock_day_rise[0:2,0:5] &gt; 0)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">:three: **三元运算符**</span><br><span class="line"></span><br><span class="line">+ **np.where(ndarray , A , B)**</span><br><span class="line"></span><br><span class="line">  + 如果满足条件，将元素替换为A，否则替换为B</span><br><span class="line"></span><br><span class="line">  + ```python</span><br><span class="line">    np.where(temp &gt; 0, 1, 0)</span><br><span class="line">    ```</span><br><span class="line"></span><br><span class="line">  + 常常结合`np.logical_and`和`np.logical_or`使用</span><br><span class="line"></span><br><span class="line">  + ```python</span><br><span class="line">    np.where(np.logical_and(temp &gt; 0.5, temp &lt; 1), 1, 0)</span><br><span class="line">    np.where(np.logical_or(temp &gt; 0.5, temp &lt; -0.5), 1, 0)</span><br><span class="line">    ```</span><br><span class="line">&gt; 数组操作</span><br><span class="line">Numpy包含了一些函数用于处理数组，大致可分为以下几类：</span><br><span class="line"></span><br><span class="line">+ 修改数组形状</span><br><span class="line">+ 翻转数组</span><br><span class="line">+ 修改数组维度</span><br><span class="line">+ 连接数组</span><br><span class="line">+ 分割数组</span><br><span class="line">+ 数组元素的添加与删除</span><br><span class="line"></span><br><span class="line">**:one: 修改数组形状**</span><br><span class="line"></span><br><span class="line">|   函数    |                        描述                        |</span><br><span class="line">| :-------: | :------------------------------------------------: |</span><br><span class="line">| `reshape` |             不改变数据的条件下修改形状             |</span><br><span class="line">|  `flat`   |                   数组元素迭代器                   |</span><br><span class="line">| `flatten` | 返回一份数组拷贝，对拷贝所做的修改不会影响原始数组 |</span><br><span class="line">|  `ravel`  |                    返回展开数组                    |</span><br><span class="line"></span><br><span class="line">**numpy.reshape()**可以在不改变数据的条件下修改形状。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">numpy.reshape(arr,newshape,order=&quot;C&quot;)</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">**np.ndarray.flat是一个数组元素迭代器**</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">for ele in a.flat:</span><br><span class="line">print(ele)</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">**np.ndarray.flatten(order=&quot;C&quot;)返回一份展开(序列化)的数组拷贝，对其操作并不会改变原始数组**</span><br><span class="line"></span><br><span class="line">```py</span><br><span class="line">print (&#x27;展开的数组：&#x27;)</span><br><span class="line">print (a.flatten())</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;以 F 风格顺序展开的数组：&#x27;)</span><br><span class="line">print (a.flatten(order = &#x27;F&#x27;))</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">展开的数组：</span><br><span class="line">[0 1 2 3 4 5 6 7]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">以 F 风格顺序展开的数组：</span><br><span class="line">[0 4 1 5 2 6 3 7]</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">**numpy.ravel返回展平的元素视图，对其操作会改变原始数组哦**</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">a = np.arange(8).reshape(2,4)</span><br><span class="line"> </span><br><span class="line">print (&#x27;原数组：&#x27;)</span><br><span class="line">print (a)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;调用 ravel 函数之后：&#x27;)</span><br><span class="line">print (a.ravel())</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;以 F 风格顺序调用 ravel 函数之后：&#x27;)</span><br><span class="line">print (a.ravel(order = &#x27;F&#x27;))</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">原数组：</span><br><span class="line">[[0 1 2 3]</span><br><span class="line"> [4 5 6 7]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">调用 ravel 函数之后：</span><br><span class="line">[0 1 2 3 4 5 6 7]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">以 F 风格顺序调用 ravel 函数之后：</span><br><span class="line">[0 4 1 5 2 6 3 7]</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">:two: **翻转数组**</span><br><span class="line"></span><br><span class="line">|    函数     |            描述            |</span><br><span class="line">| :---------: | :------------------------: |</span><br><span class="line">| `transpose` |       对换数组的维度       |</span><br><span class="line">| `ndarray.T` | 和 `self.transpose()` 相同 |</span><br><span class="line">| `rollaxis`  |      向后滚动指定的轴      |</span><br><span class="line">| `swapaxes`  |      对换数组的两个轴      |</span><br><span class="line"></span><br><span class="line">**numpy.transpose**</span><br><span class="line"></span><br><span class="line">numpy.transpose 函数用于对换数组的维度，格式如下：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">numpy.transpose(arr, axes)</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">参数说明:</span><br><span class="line"></span><br><span class="line">- `arr`：要操作的数组</span><br><span class="line">- `axes`：整数列表，对应维度，通常所有维度都会对换。</span><br><span class="line"></span><br><span class="line">**numpy.ndarray.T** 类似 **numpy.transpose**，进行转置。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">**numpy.swapaxes**</span><br><span class="line"></span><br><span class="line">numpy.swapaxes 函数用于交换数组的两个轴，格式如下：</span><br><span class="line"></span><br><span class="line">```py</span><br><span class="line">numpy.swapaxes(arr, axis1, axis2)</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">- `arr`：输入的数组</span><br><span class="line">- `axis1`：对应第一个轴的整数</span><br><span class="line">- `axis2`：对应第二个轴的整数</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"># 创建了三维的 ndarray</span><br><span class="line">a = np.arange(8).reshape(2,2,2)</span><br><span class="line"> </span><br><span class="line">print (&#x27;原数组：&#x27;)</span><br><span class="line">print (a)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"># 现在交换轴 0（深度方向）到轴 2（宽度方向）</span><br><span class="line"> </span><br><span class="line">print (&#x27;调用 swapaxes 函数后的数组：&#x27;)</span><br><span class="line">print (np.swapaxes(a, 2, 0))</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">原数组：</span><br><span class="line">[[[0 1]</span><br><span class="line">  [2 3]]</span><br><span class="line"></span><br><span class="line"> [[4 5]</span><br><span class="line">  [6 7]]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">调用 swapaxes 函数后的数组：</span><br><span class="line">[[[0 4]</span><br><span class="line">  [2 6]]</span><br><span class="line"></span><br><span class="line"> [[1 5]</span><br><span class="line">  [3 7]]]</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;【数据分析】Numpy入门/image-20220910234328333.png&quot; alt=&quot;image-20220910234328333&quot; style=&quot;zoom: 33%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">:three: **修改数组维度**</span><br><span class="line"></span><br><span class="line">|      维度      |            描述            |</span><br><span class="line">| :------------: | :------------------------: |</span><br><span class="line">|  `broadcast`   |     产生模仿广播的对象     |</span><br><span class="line">| `broadcast_to` |     将数组广播到新形状     |</span><br><span class="line">| `expand_dims`  |       扩展数组的形状       |</span><br><span class="line">|   `squeeze`    | 从数组的形状中删除一维条目 |</span><br><span class="line"></span><br><span class="line">**numpy.expand_dims**</span><br><span class="line">numpy.expand_dims 函数通过在指定位置插入新的轴来扩展数组形状，函数格式如下:</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"> numpy.expand_dims(arr, axis)</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line"></span><br><span class="line">+ arr：输入数组</span><br><span class="line"></span><br><span class="line">+ axis：新轴插入的位置</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">x = np.array(([1,2],[3,4]))</span><br><span class="line"> </span><br><span class="line">print (&#x27;数组 x：&#x27;)</span><br><span class="line">print (x)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line">y = np.expand_dims(x, axis = 0)</span><br><span class="line"> </span><br><span class="line">print (&#x27;数组 y：&#x27;)</span><br><span class="line">print (y)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;数组 x 和 y 的形状：&#x27;)</span><br><span class="line">print (x.shape, y.shape)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"># 在位置 1 插入轴</span><br><span class="line">y = np.expand_dims(x, axis = 1)</span><br><span class="line"> </span><br><span class="line">print (&#x27;在位置 1 插入轴之后的数组 y：&#x27;)</span><br><span class="line">print (y)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;x.ndim 和 y.ndim：&#x27;)</span><br><span class="line">print (x.ndim,y.ndim)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;x.shape 和 y.shape：&#x27;)</span><br><span class="line">print (x.shape, y.shape)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">数组 x：</span><br><span class="line">[[1 2]</span><br><span class="line"> [3 4]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数组 y：</span><br><span class="line">[[[1 2]</span><br><span class="line">  [3 4]]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数组 x 和 y 的形状：</span><br><span class="line">(2, 2) (1, 2, 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在位置 1 插入轴之后的数组 y：</span><br><span class="line">[[[1 2]]</span><br><span class="line"></span><br><span class="line"> [[3 4]]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x.ndim 和 y.ndim：</span><br><span class="line">2 3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x.shape 和 y.shape：</span><br><span class="line">(2, 2) (2, 1, 2)</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line"></span><br><span class="line">**numpy.squeeze**</span><br><span class="line"></span><br><span class="line">numpy.squeeze 函数从给定数组的形状中删除一维的条目，函数格式如下：</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">numpy.squeeze(arr, axis)</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line"></span><br><span class="line">- `arr`：输入数组</span><br><span class="line">- `axis`：整数或整数元组，用于选择形状中一维条目的子集</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import numpy as np</span><br><span class="line"> </span><br><span class="line">x = np.arange(9).reshape(1,3,3)</span><br><span class="line"> </span><br><span class="line">print (&#x27;数组 x：&#x27;)</span><br><span class="line">print (x)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line">y = np.squeeze(x)</span><br><span class="line"> </span><br><span class="line">print (&#x27;数组 y：&#x27;)</span><br><span class="line">print (y)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;数组 x 和 y 的形状：&#x27;)</span><br><span class="line">print (x.shape, y.shape)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">数组 x：</span><br><span class="line">[[[0 1 2]</span><br><span class="line">  [3 4 5]</span><br><span class="line">  [6 7 8]]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数组 y：</span><br><span class="line">[[0 1 2]</span><br><span class="line"> [3 4 5]</span><br><span class="line"> [6 7 8]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数组 x 和 y 的形状：</span><br><span class="line">(1, 3, 3) (3, 3)</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&gt; **连接数组**</span><br><span class="line"></span><br><span class="line">|     函数      |              描述              |</span><br><span class="line">| :-----------: | :----------------------------: |</span><br><span class="line">| `concatenate` |     连接沿现有轴的数组序列     |</span><br><span class="line">|    `stack`    |   沿着新的轴加入一系列数组。   |</span><br><span class="line">|   `hstack`    | 水平堆叠序列中的数组（列方向） |</span><br><span class="line">|   `vstack`    | 竖直堆叠序列中的数组（行方向） |</span><br><span class="line"></span><br><span class="line">**numpy.concatenate**</span><br><span class="line"></span><br><span class="line">numpy.concatenate 函数用于沿指定轴连接相同形状的两个或多个数组，格式如下：</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">numpy.concatenate((a1, a2, ...), axis)</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line"></span><br><span class="line">- `a1, a2, ...`：相同类型的数组</span><br><span class="line">- `axis`：沿着它连接数组的轴，默认为 0</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import numpy as np</span><br><span class="line"> </span><br><span class="line">a = np.array([[1,2],[3,4]])</span><br><span class="line"> </span><br><span class="line">print (&#x27;第一个数组：&#x27;)</span><br><span class="line">print (a)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line">b = np.array([[5,6],[7,8]])</span><br><span class="line"> </span><br><span class="line">print (&#x27;第二个数组：&#x27;)</span><br><span class="line">print (b)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"># 两个数组的维度相同</span><br><span class="line"> </span><br><span class="line">print (&#x27;沿轴 0 连接两个数组：&#x27;)</span><br><span class="line">print (np.concatenate((a,b)))</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;沿轴 1 连接两个数组：&#x27;)</span><br><span class="line">print (np.concatenate((a,b),axis = 1))</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">第一个数组：</span><br><span class="line">[[1 2]</span><br><span class="line"> [3 4]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第二个数组：</span><br><span class="line">[[5 6]</span><br><span class="line"> [7 8]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">沿轴 0 连接两个数组：</span><br><span class="line">[[1 2]</span><br><span class="line"> [3 4]</span><br><span class="line"> [5 6]</span><br><span class="line"> [7 8]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">沿轴 1 连接两个数组：</span><br><span class="line">[[1 2 5 6]</span><br><span class="line"> [3 4 7 8]]</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">**numpy.stack**</span><br><span class="line"></span><br><span class="line">numpy.stack 函数用于沿新轴连接数组序列，格式如下：</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">numpy.stack(arrays, axis)</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line"></span><br><span class="line">- `arrays`相同形状的数组序列</span><br><span class="line">- `axis`：返回数组中的轴，输入数组沿着它来堆叠</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import numpy as np</span><br><span class="line"> </span><br><span class="line">a = np.array([[1,2],[3,4]])</span><br><span class="line"> </span><br><span class="line">print (&#x27;第一个数组：&#x27;)</span><br><span class="line">print (a)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line">b = np.array([[5,6],[7,8]])</span><br><span class="line"> </span><br><span class="line">print (&#x27;第二个数组：&#x27;)</span><br><span class="line">print (b)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;沿轴 0 堆叠两个数组：&#x27;)</span><br><span class="line">print (np.stack((a,b),0))</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;沿轴 1 堆叠两个数组：&#x27;)</span><br><span class="line">print (np.stack((a,b),1))</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">第一个数组：</span><br><span class="line">[[1 2]</span><br><span class="line"> [3 4]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第二个数组：</span><br><span class="line">[[5 6]</span><br><span class="line"> [7 8]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">沿轴 0 堆叠两个数组：</span><br><span class="line">[[[1 2]</span><br><span class="line">  [3 4]]</span><br><span class="line"></span><br><span class="line"> [[5 6]</span><br><span class="line">  [7 8]]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">沿轴 1 堆叠两个数组：</span><br><span class="line">[[[1 2]</span><br><span class="line">  [5 6]]</span><br><span class="line"></span><br><span class="line"> [[3 4]</span><br><span class="line">  [7 8]]]</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">**numpy.hstack**</span><br><span class="line"></span><br><span class="line">numpy.hstack 是 numpy.stack 函数的变体，它通过水平堆叠来生成数组。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import numpy as np</span><br><span class="line"> </span><br><span class="line">a = np.array([[1,2],[3,4]])</span><br><span class="line"> </span><br><span class="line">print (&#x27;第一个数组：&#x27;)</span><br><span class="line">print (a)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line">b = np.array([[5,6],[7,8]])</span><br><span class="line"> </span><br><span class="line">print (&#x27;第二个数组：&#x27;)</span><br><span class="line">print (b)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;水平堆叠：&#x27;)</span><br><span class="line">c = np.hstack((a,b))</span><br><span class="line">print (c)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">第一个数组：</span><br><span class="line">[[1 2]</span><br><span class="line"> [3 4]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第二个数组：</span><br><span class="line">[[5 6]</span><br><span class="line"> [7 8]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">水平堆叠：</span><br><span class="line">[[1 2 5 6]</span><br><span class="line"> [3 4 7 8]]</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">**numpy.vstack**</span><br><span class="line"></span><br><span class="line">numpy.vstack 是 numpy.stack 函数的变体，它通过垂直堆叠来生成数组。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import numpy as np</span><br><span class="line"> </span><br><span class="line">a = np.array([[1,2],[3,4]])</span><br><span class="line"> </span><br><span class="line">print (&#x27;第一个数组：&#x27;)</span><br><span class="line">print (a)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line">b = np.array([[5,6],[7,8]])</span><br><span class="line"> </span><br><span class="line">print (&#x27;第二个数组：&#x27;)</span><br><span class="line">print (b)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;竖直堆叠：&#x27;)</span><br><span class="line">c = np.vstack((a,b))</span><br><span class="line">print (c)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">第一个数组：</span><br><span class="line">[[1 2]</span><br><span class="line"> [3 4]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第二个数组：</span><br><span class="line">[[5 6]</span><br><span class="line"> [7 8]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">竖直堆叠：</span><br><span class="line">[[1 2]</span><br><span class="line"> [3 4]</span><br><span class="line"> [5 6]</span><br><span class="line"> [7 8]]</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&gt;  **分割数组**</span><br><span class="line"></span><br><span class="line">|   函数   |               数组及操作               |</span><br><span class="line">| :------: | :------------------------------------: |</span><br><span class="line">| `split`  |       将一个数组分割为多个子数组       |</span><br><span class="line">| `hsplit` | 将一个数组水平分割为多个子数组（按列） |</span><br><span class="line">| `vsplit` | 将一个数组垂直分割为多个子数组（按行） |</span><br><span class="line"></span><br><span class="line">**numpy.split**</span><br><span class="line"></span><br><span class="line">numpy.split 函数沿特定的轴将数组分割为子数组，格式如下：</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">numpy.split(ary, indices_or_sections, axis)</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line"></span><br><span class="line">- `ary`：被分割的数组</span><br><span class="line">- `indices_or_sections`：如果是一个整数，就用该数平均切分，如果是一个数组，为沿轴切分的位置（左开右闭）</span><br><span class="line">- `axis`：设置沿着哪个方向进行切分，默认为 0，横向切分，即水平方向。为 1 时，纵向切分，即竖直方向。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import numpy as np</span><br><span class="line"> </span><br><span class="line">a = np.arange(9)</span><br><span class="line"> </span><br><span class="line">print (&#x27;第一个数组：&#x27;)</span><br><span class="line">print (a)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;将数组分为三个大小相等的子数组：&#x27;)</span><br><span class="line">b = np.split(a,3)</span><br><span class="line">print (b)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;将数组在一维数组中表明的位置分割：&#x27;)</span><br><span class="line">b = np.split(a,[4,7])</span><br><span class="line">print (b)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">第一个数组：</span><br><span class="line">[0 1 2 3 4 5 6 7 8]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">将数组分为三个大小相等的子数组：</span><br><span class="line">[array([0, 1, 2]), array([3, 4, 5]), array([6, 7, 8])]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">将数组在一维数组中表明的位置分割：</span><br><span class="line">[array([0, 1, 2, 3]), array([4, 5, 6]), array([7, 8])]</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">axis 为 0 时在水平方向分割，axis 为 1 时在垂直方向分割：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.arange(16).reshape(4, 4)</span><br><span class="line">print(&#x27;第一个数组：&#x27;)</span><br><span class="line">print(a)</span><br><span class="line">print(&#x27;\n&#x27;)</span><br><span class="line">print(&#x27;默认分割（0轴）：&#x27;)</span><br><span class="line">b = np.split(a,2)</span><br><span class="line">print(b)</span><br><span class="line">print(&#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line">print(&#x27;沿水平方向分割：&#x27;)</span><br><span class="line">c = np.split(a,2,1)</span><br><span class="line">print(c)</span><br><span class="line">print(&#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line">print(&#x27;沿水平方向分割：&#x27;)</span><br><span class="line">d= np.hsplit(a,2)</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">第一个数组：</span><br><span class="line">[[ 0  1  2  3]</span><br><span class="line"> [ 4  5  6  7]</span><br><span class="line"> [ 8  9 10 11]</span><br><span class="line"> [12 13 14 15]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">默认分割（0轴）：</span><br><span class="line">[array([[0, 1, 2, 3],</span><br><span class="line">       [4, 5, 6, 7]]), array([[ 8,  9, 10, 11],</span><br><span class="line">       [12, 13, 14, 15]])]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">沿水平方向分割：</span><br><span class="line">[array([[ 0,  1],</span><br><span class="line">       [ 4,  5],</span><br><span class="line">       [ 8,  9],</span><br><span class="line">       [12, 13]]), array([[ 2,  3],</span><br><span class="line">       [ 6,  7],</span><br><span class="line">       [10, 11],</span><br><span class="line">       [14, 15]])]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">沿水平方向分割：</span><br><span class="line">[array([[ 0,  1],</span><br><span class="line">       [ 4,  5],</span><br><span class="line">       [ 8,  9],</span><br><span class="line">       [12, 13]]), array([[ 2,  3],</span><br><span class="line">       [ 6,  7],</span><br><span class="line">       [10, 11],</span><br><span class="line">       [14, 15]])]</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">**numpy.hsplit**</span><br><span class="line"></span><br><span class="line">numpy.hsplit 函数用于水平分割数组，通过指定要返回的相同形状的数组数量来拆分原数组</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import numpy as np</span><br><span class="line"> </span><br><span class="line">harr = np.floor(10 * np.random.random((2, 6)))</span><br><span class="line">print (&#x27;原array：&#x27;)</span><br><span class="line">print(harr)</span><br><span class="line"> </span><br><span class="line">print (&#x27;拆分后：&#x27;)</span><br><span class="line">print(np.hsplit(harr, 3))</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">原array：</span><br><span class="line">[[4. 7. 6. 3. 2. 6.]</span><br><span class="line"> [6. 3. 6. 7. 9. 7.]]</span><br><span class="line">拆分后：</span><br><span class="line">[array([[4., 7.],</span><br><span class="line">       [6., 3.]]), array([[6., 3.],</span><br><span class="line">       [6., 7.]]), array([[2., 6.],</span><br><span class="line">       [9., 7.]])]</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">**numpy.vsplit**</span><br><span class="line"></span><br><span class="line">numpy.vsplit 沿着垂直轴分割，其分割方式与hsplit用法相同。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import numpy as np</span><br><span class="line"> </span><br><span class="line">a = np.arange(16).reshape(4,4)</span><br><span class="line"> </span><br><span class="line">print (&#x27;第一个数组：&#x27;)</span><br><span class="line">print (a)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;竖直分割：&#x27;)</span><br><span class="line">b = np.vsplit(a,2)</span><br><span class="line">print (b)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">第一个数组：</span><br><span class="line">[[ 0  1  2  3]</span><br><span class="line"> [ 4  5  6  7]</span><br><span class="line"> [ 8  9 10 11]</span><br><span class="line"> [12 13 14 15]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">竖直分割：</span><br><span class="line">[array([[0, 1, 2, 3],</span><br><span class="line">       [4, 5, 6, 7]]), array([[ 8,  9, 10, 11],</span><br><span class="line">       [12, 13, 14, 15]])]</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&gt; **数组元素的添加与删除**</span><br><span class="line"></span><br><span class="line">|   函数   |                元素及描述                |</span><br><span class="line">| :------: | :--------------------------------------: |</span><br><span class="line">| `resize` |           返回指定形状的新数组           |</span><br><span class="line">| `append` |            将值添加到数组末尾            |</span><br><span class="line">| `insert` |      沿指定轴将值插入到指定下标之前      |</span><br><span class="line">| `delete` | 删掉某个轴的子数组，并返回删除后的新数组 |</span><br><span class="line">| `unique` |           查找数组内的唯一元素           |</span><br><span class="line"></span><br><span class="line">**numpy.resize**</span><br><span class="line">numpy.resize 函数返回指定大小的新数组。</span><br><span class="line"></span><br><span class="line">如果新数组大小大于原始大小，则包含原始数组中的元素的副本。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">numpy.resize(arr, shape)</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line"></span><br><span class="line">- `arr`：要修改大小的数组</span><br><span class="line">- `shape`：返回数组的新形状</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import numpy as np</span><br><span class="line"> </span><br><span class="line">a = np.array([[1,2,3],[4,5,6]])</span><br><span class="line"> </span><br><span class="line">print (&#x27;第一个数组：&#x27;)</span><br><span class="line">print (a)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;第一个数组的形状：&#x27;)</span><br><span class="line">print (a.shape)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line">b = np.resize(a, (3,2))</span><br><span class="line"> </span><br><span class="line">print (&#x27;第二个数组：&#x27;)</span><br><span class="line">print (b)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;第二个数组的形状：&#x27;)</span><br><span class="line">print (b.shape)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"># 要注意 a 的第一行在 b 中重复出现，因为尺寸变大了</span><br><span class="line"> </span><br><span class="line">print (&#x27;修改第二个数组的大小：&#x27;)</span><br><span class="line">b = np.resize(a,(3,3))</span><br><span class="line">print (b)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">第一个数组：</span><br><span class="line">[[1 2 3]</span><br><span class="line"> [4 5 6]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第一个数组的形状：</span><br><span class="line">(2, 3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第二个数组：</span><br><span class="line">[[1 2]</span><br><span class="line"> [3 4]</span><br><span class="line"> [5 6]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第二个数组的形状：</span><br><span class="line">(3, 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">修改第二个数组的大小：</span><br><span class="line">[[1 2 3]</span><br><span class="line"> [4 5 6]</span><br><span class="line"> [1 2 3]]</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">**numpy.append**</span><br><span class="line"></span><br><span class="line">numpy.append 函数在数组的末尾添加值。 追加操作会分配整个数组，并把原来的数组复制到新数组中。 此外，输入数组的维度必须匹配否则将生成ValueError。</span><br><span class="line"></span><br><span class="line">append 函数返回的始终是一个一维数组。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">numpy.append(arr, values, axis=None)</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line"></span><br><span class="line">- `arr`：输入数组</span><br><span class="line">- `values`：要向`arr`添加的值，需要和`arr`形状相同（除了要添加的轴）</span><br><span class="line">- `axis`：默认为 None。当axis无定义时，是横向加成，返回总是为一维数组！当axis有定义的时候，分别为0和1的时候。当axis有定义的时候，分别为0和1的时候（列数要相同）。当axis为1时，数组是加在右边（行数要相同）。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import numpy as np</span><br><span class="line"> </span><br><span class="line">a = np.array([[1,2,3],[4,5,6]])</span><br><span class="line"> </span><br><span class="line">print (&#x27;第一个数组：&#x27;)</span><br><span class="line">print (a)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;向数组添加元素：&#x27;)</span><br><span class="line">print (np.append(a, [7,8,9]))</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;沿轴 0 添加元素：&#x27;)</span><br><span class="line">print (np.append(a, [[7,8,9]],axis = 0))</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;沿轴 1 添加元素：&#x27;)</span><br><span class="line">print (np.append(a, [[5,5,5],[7,8,9]],axis = 1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">第一个数组：</span><br><span class="line">[[1 2 3]</span><br><span class="line"> [4 5 6]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">向数组添加元素：</span><br><span class="line">[1 2 3 4 5 6 7 8 9]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">沿轴 0 添加元素：</span><br><span class="line">[[1 2 3]</span><br><span class="line"> [4 5 6]</span><br><span class="line"> [7 8 9]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">沿轴 1 添加元素：</span><br><span class="line">[[1 2 3 5 5 5]</span><br><span class="line"> [4 5 6 7 8 9]]</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">**numpy.insert**</span><br><span class="line"></span><br><span class="line">numpy.insert 函数在给定索引之前，沿给定轴在输入数组中插入值。</span><br><span class="line"></span><br><span class="line">如果值的类型转换为要插入，则它与输入数组不同。 插入没有原地的，函数会返回一个新数组。 此外，如果未提供轴，则输入数组会被展开。</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">numpy.insert(arr, obj, values, axis)</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line"></span><br><span class="line">- `arr`：输入数组</span><br><span class="line">- `obj`：在其之前插入值的索引</span><br><span class="line">- `values`：要插入的值</span><br><span class="line">- `axis`：沿着它插入的轴，如果未提供，则输入数组会被展开</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import numpy as np</span><br><span class="line"> </span><br><span class="line">a = np.array([[1,2],[3,4],[5,6]])</span><br><span class="line"> </span><br><span class="line">print (&#x27;第一个数组：&#x27;)</span><br><span class="line">print (a)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;未传递 Axis 参数。 在删除之前输入数组会被展开。&#x27;)</span><br><span class="line">print (np.insert(a,3,[11,12]))</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line">print (&#x27;传递了 Axis 参数。 会广播值数组来配输入数组。&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;沿轴 0 广播：&#x27;)</span><br><span class="line">print (np.insert(a,1,[11],axis = 0))</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;沿轴 1 广播：&#x27;)</span><br><span class="line">print (np.insert(a,1,11,axis = 1))</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">第一个数组：</span><br><span class="line">[[1 2]</span><br><span class="line"> [3 4]</span><br><span class="line"> [5 6]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">未传递 Axis 参数。 在删除之前输入数组会被展开。</span><br><span class="line">[ 1  2  3 11 12  4  5  6]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">传递了 Axis 参数。 会广播值数组来配输入数组。</span><br><span class="line">沿轴 0 广播：</span><br><span class="line">[[ 1  2]</span><br><span class="line"> [11 11]</span><br><span class="line"> [ 3  4]</span><br><span class="line"> [ 5  6]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">沿轴 1 广播：</span><br><span class="line">[[ 1 11  2]</span><br><span class="line"> [ 3 11  4]</span><br><span class="line"> [ 5 11  6]]</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">**numpy.delete**</span><br><span class="line"></span><br><span class="line">numpy.delete 函数返回从输入数组中删除指定子数组的新数组。 与 insert() 函数的情况一样，如果未提供轴参数，则输入数组将展开。</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">Numpy.delete(arr, obj, axis)</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line"></span><br><span class="line">- `arr`：输入数组</span><br><span class="line">- `obj`：可以被切片，整数或者整数数组，表明要从输入数组删除的子数组</span><br><span class="line">- `axis`：沿着它删除给定子数组的轴，如果未提供，则输入数组会被展开</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import numpy as np</span><br><span class="line"> </span><br><span class="line">a = np.arange(12).reshape(3,4)</span><br><span class="line"> </span><br><span class="line">print (&#x27;第一个数组：&#x27;)</span><br><span class="line">print (a)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;未传递 Axis 参数。 在插入之前输入数组会被展开。&#x27;)</span><br><span class="line">print (np.delete(a,5))</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;删除第二列：&#x27;)</span><br><span class="line">print (np.delete(a,1,axis = 1))</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;包含从数组中删除的替代值的切片：&#x27;)</span><br><span class="line">a = np.array([1,2,3,4,5,6,7,8,9,10])</span><br><span class="line">print (np.delete(a, np.s_[::2]))</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">第一个数组：</span><br><span class="line">[[ 0  1  2  3]</span><br><span class="line"> [ 4  5  6  7]</span><br><span class="line"> [ 8  9 10 11]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">未传递 Axis 参数。 在插入之前输入数组会被展开。</span><br><span class="line">[ 0  1  2  3  4  6  7  8  9 10 11]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">删除第二列：</span><br><span class="line">[[ 0  2  3]</span><br><span class="line"> [ 4  6  7]</span><br><span class="line"> [ 8 10 11]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">包含从数组中删除的替代值的切片：</span><br><span class="line">[ 2  4  6  8 10]</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">**numpy.unique**</span><br><span class="line"></span><br><span class="line">numpy.unique 函数用于去除数组中的重复元素。</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">numpy.unique(arr, return_index, return_inverse, return_counts)</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">- `arr`：输入数组，如果不是一维数组则会展开</span><br><span class="line">- `return_index`：如果为`true`，返回新列表元素在旧列表中的位置（下标），并以列表形式储</span><br><span class="line">- `return_inverse`：如果为`true`，返回旧列表元素在新列表中的位置（下标），并以列表形式储</span><br><span class="line">- `return_counts`：如果为`true`，返回去重数组中的元素在原数组中的出现次数</span><br><span class="line"></span><br><span class="line">````python</span><br><span class="line">import numpy as np</span><br><span class="line"> </span><br><span class="line">a = np.array([5,2,6,2,7,5,6,8,2,9])</span><br><span class="line"> </span><br><span class="line">print (&#x27;第一个数组：&#x27;)</span><br><span class="line">print (a)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;第一个数组的去重值：&#x27;)</span><br><span class="line">u = np.unique(a)</span><br><span class="line">print (u)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;去重数组的索引数组：&#x27;)</span><br><span class="line">u,indices = np.unique(a, return_index = True)</span><br><span class="line">print (indices)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;我们可以看到每个和原数组下标对应的数值：&#x27;)</span><br><span class="line">print (a)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;去重数组的下标：&#x27;)</span><br><span class="line">u,indices = np.unique(a,return_inverse = True)</span><br><span class="line">print (u)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;下标为：&#x27;)</span><br><span class="line">print (indices)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;使用下标重构原数组：&#x27;)</span><br><span class="line">print (u[indices])</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line"> </span><br><span class="line">print (&#x27;返回去重元素的重复数量：&#x27;)</span><br><span class="line">u,indices = np.unique(a,return_counts = True)</span><br><span class="line">print (u)</span><br><span class="line">print (indices)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第一个数组：</span><br><span class="line">[5 2 6 2 7 5 6 8 2 9]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第一个数组的去重值：</span><br><span class="line">[2 5 6 7 8 9]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">去重数组的索引数组：</span><br><span class="line">[1 0 2 4 7 9]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">我们可以看到每个和原数组下标对应的数值：</span><br><span class="line">[5 2 6 2 7 5 6 8 2 9]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">去重数组的下标：</span><br><span class="line">[2 5 6 7 8 9]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">下标为：</span><br><span class="line">[1 0 2 0 3 1 2 4 0 5]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">使用下标重构原数组：</span><br><span class="line">[5 2 6 2 7 5 6 8 2 9]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">返回去重元素的重复数量：</span><br><span class="line">[2 5 6 7 8 9]</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h2 id="八、位运算与字符串函数">八、位运算与字符串函数</h2><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>bitwise_and</code></td><td style="text-align:center">对数组元素执行位与操作</td></tr><tr><td style="text-align:center"><code>bitwise_or</code></td><td style="text-align:center">对数组元素执行位或操作</td></tr><tr><td style="text-align:center"><code>invert</code></td><td style="text-align:center">按位取反</td></tr><tr><td style="text-align:center"><code>left_shift</code></td><td style="text-align:center">向左移动二进制表示的位</td></tr><tr><td style="text-align:center"><code>right_shift</code></td><td style="text-align:center">向右移动二进制表示的位</td></tr></tbody></table><p><strong>举个简单的小栗子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;13 和 17 的二进制形式：&#x27;</span>)</span><br><span class="line">a,b = <span class="number">13</span>,<span class="number">17</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">bin</span>(a), <span class="built_in">bin</span>(b))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;13 和 17 的位与：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.bitwise_and(<span class="number">13</span>, <span class="number">17</span>))</span><br></pre></td></tr></table></figure><hr><p><strong>字符串</strong></p><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>add()</code></td><td style="text-align:center">对两个数组的逐个字符串元素进行连接</td></tr><tr><td style="text-align:center">multiply()</td><td style="text-align:center">返回按元素多重连接后的字符串</td></tr><tr><td style="text-align:center"><code>center()</code></td><td style="text-align:center">居中字符串</td></tr><tr><td style="text-align:center"><code>capitalize()</code></td><td style="text-align:center">将字符串第一个字母转换为大写</td></tr><tr><td style="text-align:center"><code>title()</code></td><td style="text-align:center">将字符串的每个单词的第一个字母转换为大写</td></tr><tr><td style="text-align:center"><code>lower()</code></td><td style="text-align:center">数组元素转换为小写</td></tr><tr><td style="text-align:center"><code>upper()</code></td><td style="text-align:center">数组元素转换为大写</td></tr><tr><td style="text-align:center"><code>split()</code></td><td style="text-align:center">指定分隔符对字符串进行分割，并返回数组列表</td></tr><tr><td style="text-align:center"><code>splitlines()</code></td><td style="text-align:center">返回元素中的行列表，以换行符分割</td></tr><tr><td style="text-align:center"><code>strip()</code></td><td style="text-align:center">移除元素开头或者结尾处的特定字符</td></tr><tr><td style="text-align:center"><code>join()</code></td><td style="text-align:center">通过指定分隔符来连接数组中的元素</td></tr><tr><td style="text-align:center"><code>replace()</code></td><td style="text-align:center">使用新字符串替换字符串中的所有子字符串</td></tr><tr><td style="text-align:center"><code>decode()</code></td><td style="text-align:center">数组元素依次调用<code>str.decode</code></td></tr><tr><td style="text-align:center"><code>encode()</code></td><td style="text-align:center">数组元素依次调用<code>str.encode</code></td></tr></tbody></table><hr><h2 id="九、数学与统计函数">九、数学与统计函数</h2><p><code>Numpy</code>包含了大量的数学运算函数，包括三角函数，算数运算的函数，复数处理函数等。</p><p>我们介绍一些简单的函数。</p><p><strong>三角函数</strong></p><p>NumPy 提供了标准的三角函数：sin()、cos()、tan()。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">a = np.array([<span class="number">0</span>,<span class="number">30</span>,<span class="number">45</span>,<span class="number">60</span>,<span class="number">90</span>])</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;不同角度的正弦值：&#x27;</span>)</span><br><span class="line"><span class="comment"># 通过乘 pi/180 转化为弧度  </span></span><br><span class="line"><span class="built_in">print</span> (np.sin(a*np.pi/<span class="number">180</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;数组中角度的余弦值：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.cos(a*np.pi/<span class="number">180</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;数组中角度的正切值：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.tan(a*np.pi/<span class="number">180</span>))</span><br></pre></td></tr></table></figure><p>arcsin，arccos，和 arctan 函数返回给定角度的 sin，cos 和 tan 的反三角函数。</p><p>这些函数的结果可以通过 numpy.degrees() 函数将弧度转换为角度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">a = np.array([<span class="number">0</span>,<span class="number">30</span>,<span class="number">45</span>,<span class="number">60</span>,<span class="number">90</span>])  </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;含有正弦值的数组：&#x27;</span>)</span><br><span class="line">sin = np.sin(a*np.pi/<span class="number">180</span>)  </span><br><span class="line"><span class="built_in">print</span> (sin)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;计算角度的反正弦，返回值以弧度为单位：&#x27;</span>)</span><br><span class="line">inv = np.arcsin(sin)  </span><br><span class="line"><span class="built_in">print</span> (inv)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;通过转化为角度制来检查结果：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.degrees(inv))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;arccos 和 arctan 函数行为类似：&#x27;</span>)</span><br><span class="line">cos = np.cos(a*np.pi/<span class="number">180</span>)  </span><br><span class="line"><span class="built_in">print</span> (cos)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;反余弦：&#x27;</span>)</span><br><span class="line">inv = np.arccos(cos)  </span><br><span class="line"><span class="built_in">print</span> (inv)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;角度制单位：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.degrees(inv))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;tan 函数：&#x27;</span>)</span><br><span class="line">tan = np.tan(a*np.pi/<span class="number">180</span>)  </span><br><span class="line"><span class="built_in">print</span> (tan)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;反正切：&#x27;</span>)</span><br><span class="line">inv = np.arctan(tan)  </span><br><span class="line"><span class="built_in">print</span> (inv)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;角度制单位：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.degrees(inv))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">含有正弦值的数组：</span></span><br><span class="line"><span class="string">[0.         0.5        0.70710678 0.8660254  1.        ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">计算角度的反正弦，返回值以弧度为单位：</span></span><br><span class="line"><span class="string">[0.         0.52359878 0.78539816 1.04719755 1.57079633]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">通过转化为角度制来检查结果：</span></span><br><span class="line"><span class="string">[ 0. 30. 45. 60. 90.]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">arccos 和 arctan 函数行为类似：</span></span><br><span class="line"><span class="string">[1.00000000e+00 8.66025404e-01 7.07106781e-01 5.00000000e-01</span></span><br><span class="line"><span class="string"> 6.12323400e-17]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">反余弦：</span></span><br><span class="line"><span class="string">[0.         0.52359878 0.78539816 1.04719755 1.57079633]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">角度制单位：</span></span><br><span class="line"><span class="string">[ 0. 30. 45. 60. 90.]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tan 函数：</span></span><br><span class="line"><span class="string">[0.00000000e+00 5.77350269e-01 1.00000000e+00 1.73205081e+00</span></span><br><span class="line"><span class="string"> 1.63312394e+16]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">反正切：</span></span><br><span class="line"><span class="string">[0.         0.52359878 0.78539816 1.04719755 1.57079633]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">角度制单位：</span></span><br><span class="line"><span class="string">[ 0. 30. 45. 60. 90.]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><hr><p><strong>舍入函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numpy.around() <span class="comment"># 函数返回指定数字的四舍五入值。</span></span><br><span class="line">numpy.floor() <span class="comment"># 返回小于或者等于指定表达式的最大整数，即向下取整。</span></span><br><span class="line">numpy.ceil() <span class="comment"># 返回大于或者等于指定表达式的最小整数，即向上取整。</span></span><br></pre></td></tr></table></figure><hr><p><strong>算术函数</strong></p><p>NumPy 算术函数包含简单的加减乘除: <strong>add()</strong>，<strong>subtract()</strong>，<strong>multiply()</strong> 和 <strong>divide()</strong>。</p><p>需要注意的是数组必须具有相同的形状或符合数组广播规则。</p><p><strong>栗子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"> </span><br><span class="line">a = np.arange(<span class="number">9</span>, dtype = np.float_).reshape(<span class="number">3</span>,<span class="number">3</span>)  </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;第一个数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;第二个数组：&#x27;</span>)</span><br><span class="line">b = np.array([<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>])  </span><br><span class="line"><span class="built_in">print</span> (b)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;两个数组相加：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.add(a,b))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;两个数组相减：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.subtract(a,b))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;两个数组相乘：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.multiply(a,b))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;两个数组相除：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.divide(a,b))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第一个数组：</span></span><br><span class="line"><span class="string">[[0. 1. 2.]</span></span><br><span class="line"><span class="string"> [3. 4. 5.]</span></span><br><span class="line"><span class="string"> [6. 7. 8.]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">第二个数组：</span></span><br><span class="line"><span class="string">[10 10 10]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">两个数组相加：</span></span><br><span class="line"><span class="string">[[10. 11. 12.]</span></span><br><span class="line"><span class="string"> [13. 14. 15.]</span></span><br><span class="line"><span class="string"> [16. 17. 18.]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">两个数组相减：</span></span><br><span class="line"><span class="string">[[-10.  -9.  -8.]</span></span><br><span class="line"><span class="string"> [ -7.  -6.  -5.]</span></span><br><span class="line"><span class="string"> [ -4.  -3.  -2.]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">两个数组相乘：</span></span><br><span class="line"><span class="string">[[ 0. 10. 20.]</span></span><br><span class="line"><span class="string"> [30. 40. 50.]</span></span><br><span class="line"><span class="string"> [60. 70. 80.]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">两个数组相除：</span></span><br><span class="line"><span class="string">[[0.  0.1 0.2]</span></span><br><span class="line"><span class="string"> [0.3 0.4 0.5]</span></span><br><span class="line"><span class="string"> [0.6 0.7 0.8]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>除此之外，<code>Numpy</code>也包含了其他重要的算术函数。</p><p><strong>reciprocal()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.reciprocal() <span class="comment"># 函数返回参数逐元素的倒数。如 1/4 倒数为 4/1。</span></span><br></pre></td></tr></table></figure><p><strong>栗子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"> </span><br><span class="line">a = np.array([<span class="number">0.25</span>,  <span class="number">1.33</span>,  <span class="number">1</span>,  <span class="number">100</span>])  </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;我们的数组是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;调用 reciprocal 函数：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.reciprocal(a))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">我们的数组是：</span></span><br><span class="line"><span class="string">[  0.25   1.33   1.   100.  ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">调用 reciprocal 函数：</span></span><br><span class="line"><span class="string">[4.        0.7518797 1.        0.01     ]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><hr><p><strong>power()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.power() <span class="comment"># 函数将第一个输入数组中的元素作为底数，计算它与第二个输入数组中相应元素的幂。</span></span><br></pre></td></tr></table></figure><p><strong>栗子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"> </span><br><span class="line">a = np.array([<span class="number">10</span>,<span class="number">100</span>,<span class="number">1000</span>])  </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;我们的数组是；&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;调用 power 函数：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.power(a,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;第二个数组：&#x27;</span>)</span><br><span class="line">b = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])  </span><br><span class="line"><span class="built_in">print</span> (b)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;再次调用 power 函数：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.power(a,b))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">我们的数组是；</span></span><br><span class="line"><span class="string">[  10  100 1000]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">调用 power 函数：</span></span><br><span class="line"><span class="string">[    100   10000 1000000]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">第二个数组：</span></span><br><span class="line"><span class="string">[1 2 3]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">再次调用 power 函数：</span></span><br><span class="line"><span class="string">[        10      10000 1000000000]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><hr><p><strong>mod()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.mod() <span class="comment"># 计算输入数组中相应元素的相除后的余数。 函数 numpy.remainder() 也产生相同的结果</span></span><br></pre></td></tr></table></figure><p><strong>来看个栗子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">我们的数组是；</span><br><span class="line">[  <span class="number">10</span>  <span class="number">100</span> <span class="number">1000</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">调用 power 函数：</span><br><span class="line">[    <span class="number">100</span>   <span class="number">10000</span> <span class="number">1000000</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第二个数组：</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">再次调用 power 函数：</span><br><span class="line">[        <span class="number">10</span>      <span class="number">10000</span> <span class="number">1000000000</span>]<span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">a = np.array([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]) </span><br><span class="line">b = np.array([<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>])  </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;第一个数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;第二个数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (b)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;调用 mod() 函数：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.mod(a,b))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;调用 remainder() 函数：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.remainder(a,b))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第一个数组：</span></span><br><span class="line"><span class="string">[10 20 30]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">第二个数组：</span></span><br><span class="line"><span class="string">[3 5 7]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">调用 mod() 函数：</span></span><br><span class="line"><span class="string">[1 0 2]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">调用 remainder() 函数：</span></span><br><span class="line"><span class="string">[1 0 2]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><hr><p><strong>统计函数</strong></p><p><strong>numpy.amin() 和 numpy.amax()</strong></p><ul><li>numpy.amin() 用于计算数组中的元素沿指定轴的最小值。</li><li>numpy.amax() 用于计算数组中的元素沿指定轴的最大值。</li></ul><p><strong>栗子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"> </span><br><span class="line">a = np.array([[<span class="number">3</span>,<span class="number">7</span>,<span class="number">5</span>],[<span class="number">8</span>,<span class="number">4</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>]])  </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;我们的数组是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;调用 amin() 函数：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.amin(a,<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;再次调用 amin() 函数：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.amin(a,<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;调用 amax() 函数：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.amax(a))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;再次调用 amax() 函数：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.amax(a, axis =  <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">我们的数组是：</span></span><br><span class="line"><span class="string">[[3 7 5]</span></span><br><span class="line"><span class="string"> [8 4 3]</span></span><br><span class="line"><span class="string"> [2 4 9]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">调用 amin() 函数：</span></span><br><span class="line"><span class="string">[3 3 2]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">再次调用 amin() 函数：</span></span><br><span class="line"><span class="string">[2 4 3]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">调用 amax() 函数：</span></span><br><span class="line"><span class="string">9</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">再次调用 amax() 函数：</span></span><br><span class="line"><span class="string">[8 7 9]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><hr><p><strong>numpy.ptp()</strong></p><p>numpy.ptp()函数计算数组中元素最大值与最小值的差（最大值 - 最小值）</p><p><strong>栗子！</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"> </span><br><span class="line">a = np.array([[<span class="number">3</span>,<span class="number">7</span>,<span class="number">5</span>],[<span class="number">8</span>,<span class="number">4</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>]])  </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;我们的数组是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;调用 ptp() 函数：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.ptp(a))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;沿轴 1 调用 ptp() 函数：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.ptp(a, axis =  <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;沿轴 0 调用 ptp() 函数：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.ptp(a, axis =  <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">我们的数组是：</span></span><br><span class="line"><span class="string">[[3 7 5]</span></span><br><span class="line"><span class="string"> [8 4 3]</span></span><br><span class="line"><span class="string"> [2 4 9]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">调用 ptp() 函数：</span></span><br><span class="line"><span class="string">7</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">沿轴 1 调用 ptp() 函数：</span></span><br><span class="line"><span class="string">[4 5 7]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">沿轴 0 调用 ptp() 函数：</span></span><br><span class="line"><span class="string">[6 3 6]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><hr><p><strong>numpy.percentile()</strong></p><p>百分位数是统计中使用的度量，表示小于这个值的观察值的百分比。 函数numpy.percentile()接受以下参数。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.percentile(a, q, axis)</span><br></pre></td></tr></table></figure><p><strong>看个栗子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"> </span><br><span class="line">a = np.array([[<span class="number">10</span>, <span class="number">7</span>, <span class="number">4</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;我们的数组是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;调用 percentile() 函数：&#x27;</span>)</span><br><span class="line"><span class="comment"># 50% 的分位数，就是 a 里排序之后的中位数</span></span><br><span class="line"><span class="built_in">print</span> (np.percentile(a, <span class="number">50</span>)) </span><br><span class="line"> </span><br><span class="line"><span class="comment"># axis 为 0，在纵列上求</span></span><br><span class="line"><span class="built_in">print</span> (np.percentile(a, <span class="number">50</span>, axis=<span class="number">0</span>)) </span><br><span class="line"> </span><br><span class="line"><span class="comment"># axis 为 1，在横行上求</span></span><br><span class="line"><span class="built_in">print</span> (np.percentile(a, <span class="number">50</span>, axis=<span class="number">1</span>)) </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 保持维度不变</span></span><br><span class="line"><span class="built_in">print</span> (np.percentile(a, <span class="number">50</span>, axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">我们的数组是：</span></span><br><span class="line"><span class="string">[[10  7  4]</span></span><br><span class="line"><span class="string"> [ 3  2  1]]</span></span><br><span class="line"><span class="string">调用 percentile() 函数：</span></span><br><span class="line"><span class="string">3.5</span></span><br><span class="line"><span class="string">[6.5 4.5 2.5]</span></span><br><span class="line"><span class="string">[7. 2.]</span></span><br><span class="line"><span class="string">[[7.]</span></span><br><span class="line"><span class="string"> [2.]]</span></span><br><span class="line"><span class="string"> &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><hr><p><strong>numpy.median()</strong></p><p>numpy.median() 函数用于计算数组 a 中元素的中位数（中值）</p><p><strong>栗子</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"> </span><br><span class="line">a = np.array([[<span class="number">30</span>,<span class="number">65</span>,<span class="number">70</span>],[<span class="number">80</span>,<span class="number">95</span>,<span class="number">10</span>],[<span class="number">50</span>,<span class="number">90</span>,<span class="number">60</span>]])  </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;我们的数组是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;调用 median() 函数：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.median(a))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;沿轴 0 调用 median() 函数：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.median(a, axis =  <span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;沿轴 1 调用 median() 函数：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.median(a, axis =  <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">我们的数组是：</span></span><br><span class="line"><span class="string">[[30 65 70]</span></span><br><span class="line"><span class="string"> [80 95 10]</span></span><br><span class="line"><span class="string"> [50 90 60]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">调用 median() 函数：</span></span><br><span class="line"><span class="string">65.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">沿轴 0 调用 median() 函数：</span></span><br><span class="line"><span class="string">[50. 90. 60.]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">沿轴 1 调用 median() 函数：</span></span><br><span class="line"><span class="string">[65. 80. 60.]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><hr><p><strong>numpy.mean()</strong></p><p>numpy.mean() 函数返回数组中元素的算术平均值。 如果提供了轴，则沿其计算。</p><p>算术平均值是沿轴的元素的总和除以元素的数量。</p><p><strong>看个栗子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"> </span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])  </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;我们的数组是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;调用 mean() 函数：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.mean(a))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;沿轴 0 调用 mean() 函数：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.mean(a, axis =  <span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;沿轴 1 调用 mean() 函数：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.mean(a, axis =  <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">我们的数组是：</span></span><br><span class="line"><span class="string">[[1 2 3]</span></span><br><span class="line"><span class="string"> [3 4 5]</span></span><br><span class="line"><span class="string"> [4 5 6]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">调用 mean() 函数：</span></span><br><span class="line"><span class="string">3.6666666666666665</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">沿轴 0 调用 mean() 函数：</span></span><br><span class="line"><span class="string">[2.66666667 3.66666667 4.66666667]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">沿轴 1 调用 mean() 函数：</span></span><br><span class="line"><span class="string">[2. 4. 5.]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><hr><h3 id="numpy-average">numpy.average()</h3><p>numpy.average() 函数根据在另一个数组中给出的各自的权重计算数组中元素的加权平均值。</p><p>该函数可以接受一个轴参数。 如果没有指定轴，则数组会被展开。</p><p>加权平均值即将各数值乘以相应的权数，然后加总求和得到总体值，再除以总的单位数。</p><p>考虑数组[1,2,3,4]和相应的权重[4,3,2,1]，通过将相应元素的乘积相加，并将和除以权重的和，来计算加权平均值。</p><p><strong>栗子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"> </span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])  </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;我们的数组是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;调用 average() 函数：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.average(a))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># 不指定权重时相当于 mean 函数</span></span><br><span class="line">wts = np.array([<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>])  </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;再次调用 average() 函数：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.average(a,weights = wts))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># 如果 returned 参数设为 true，则返回权重的和  </span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;权重的和：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.average([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,  <span class="number">4</span>],weights =  [<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>], returned =  <span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">我们的数组是：</span></span><br><span class="line"><span class="string">[1 2 3 4]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">调用 average() 函数：</span></span><br><span class="line"><span class="string">2.5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">再次调用 average() 函数：</span></span><br><span class="line"><span class="string">2.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">权重的和：</span></span><br><span class="line"><span class="string">(2.0, 10.0)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>在多维数组中，可以指定用于计算的轴。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"> </span><br><span class="line">a = np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>)  </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;我们的数组是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;修改后的数组：&#x27;</span>)</span><br><span class="line">wt = np.array([<span class="number">3</span>,<span class="number">5</span>])  </span><br><span class="line"><span class="built_in">print</span> (np.average(a, axis =  <span class="number">1</span>, weights = wt))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;修改后的数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.average(a, axis =  <span class="number">1</span>, weights = wt, returned =  <span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">我们的数组是：</span></span><br><span class="line"><span class="string">[[0 1]</span></span><br><span class="line"><span class="string"> [2 3]</span></span><br><span class="line"><span class="string"> [4 5]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">修改后的数组：</span></span><br><span class="line"><span class="string">[0.625 2.625 4.625]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">修改后的数组：</span></span><br><span class="line"><span class="string">(array([0.625, 2.625, 4.625]), array([8., 8., 8.]))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><hr><p><strong>方差与标准差</strong></p><p>标准差是一组数据平均值分散程度的一种度量。</p><p>标准差是方差的算术平方根。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (np.std([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.1180339887498949</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (np.var([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.25</span></span><br></pre></td></tr></table></figure><hr><h2 id="十、矩阵与线性代数">十、矩阵与线性代数</h2><p><code>Numpy</code>中包含了一个矩阵库<code>numpy.matlib</code>，该模块返回的是一个矩阵，而不是<code>ndarray</code>对象。</p><p><strong>转置</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">a = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;原数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;转置数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a.T)</span><br></pre></td></tr></table></figure><p><strong>空矩阵</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.matlib.empty(shape, dtype, order)</span><br></pre></td></tr></table></figure><p><strong>全1矩阵</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.matlib.ones()</span><br></pre></td></tr></table></figure><p><strong>全0矩阵</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.matlib.zeros()</span><br></pre></td></tr></table></figure><p><strong>单位矩阵</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.matlib.eye(n, M,k, dtype)</span><br></pre></td></tr></table></figure><p><strong>主对角线矩阵</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.matlib.identity(5, dtype =  float)</span><br></pre></td></tr></table></figure><p><strong>随机矩阵</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.matlib.rand(<span class="number">3</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>在二维情况下，<code>ndarray</code>和<code>matrix</code>可以进行互换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">np.matrix(<span class="string">&#x27;1,2;3,4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转化为ndarray</span></span><br><span class="line">np.asarray(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转化为矩阵</span></span><br><span class="line">np.asmatrix(j)</span><br></pre></td></tr></table></figure><p><strong>线性代数函数</strong></p><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>dot</code></td><td style="text-align:center">两个数组的点积，即元素对应相乘。</td></tr><tr><td style="text-align:center"><code>vdot</code></td><td style="text-align:center">两个向量的点积</td></tr><tr><td style="text-align:center"><code>inner</code></td><td style="text-align:center">两个数组的内积</td></tr><tr><td style="text-align:center"><code>matmul</code></td><td style="text-align:center">两个数组的矩阵积</td></tr><tr><td style="text-align:center"><code>determinant</code></td><td style="text-align:center">数组的行列式</td></tr><tr><td style="text-align:center"><code>solve</code></td><td style="text-align:center">求解线性矩阵方程</td></tr><tr><td style="text-align:center"><code>inv</code></td><td style="text-align:center">计算矩阵的乘法逆矩阵</td></tr><tr><td style="text-align:center"><code>matrix_power</code></td><td style="text-align:center">升幂</td></tr><tr><td style="text-align:center"><code>qr</code></td><td style="text-align:center"><code>qr</code>分解，<code>q</code>是一个正交矩阵，<code>r</code>是<code>upper-triangular</code></td></tr><tr><td style="text-align:center"><code>matrix_tank</code></td><td style="text-align:center">通过<code>SVD</code>方法返回数组的矩阵秩</td></tr></tbody></table><p><code>numpy.linalg.det()</code></p><p>计算输入矩阵的<strong>行列式</strong></p><p><strong>栗子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">b = np.array([[<span class="number">6</span>,<span class="number">1</span>,<span class="number">1</span>], [<span class="number">4</span>, -<span class="number">2</span>, <span class="number">5</span>], [<span class="number">2</span>,<span class="number">8</span>,<span class="number">7</span>]]) </span><br><span class="line"><span class="built_in">print</span> (b)</span><br><span class="line"><span class="built_in">print</span> (np.linalg.det(b))</span><br><span class="line"><span class="built_in">print</span> (<span class="number">6</span>*(-<span class="number">2</span>*<span class="number">7</span> - <span class="number">5</span>*<span class="number">8</span>) - <span class="number">1</span>*(<span class="number">4</span>*<span class="number">7</span> - <span class="number">5</span>*<span class="number">2</span>) + <span class="number">1</span>*(<span class="number">4</span>*<span class="number">8</span> - -<span class="number">2</span>*<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p><code>numpy.linalg.solve()</code></p><p>求解方程结果</p><p><strong>栗子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 求解方程组x0+2*x1=1</span></span><br><span class="line"><span class="comment"># 3*x0+5*x1=2</span></span><br><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">5</span>]])</span><br><span class="line">b = np.array([<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">x = np.linalg.solve(a, b)</span><br><span class="line"></span><br><span class="line">array([-<span class="number">1</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure><hr><p><code>numpy.linalg.inv()</code></p><p>计算乘法逆矩阵</p><p><strong>栗子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"> </span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>],[<span class="number">2</span>,<span class="number">5</span>,-<span class="number">1</span>]]) </span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;数组 a：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line">ainv = np.linalg.inv(a) </span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;a 的逆：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (ainv)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;矩阵 b：&#x27;</span>)</span><br><span class="line">b = np.array([[<span class="number">6</span>],[-<span class="number">4</span>],[<span class="number">27</span>]]) </span><br><span class="line"><span class="built_in">print</span> (b)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;计算：A^(-1)B：&#x27;</span>)</span><br><span class="line">x = np.linalg.solve(a,b) </span><br><span class="line"><span class="built_in">print</span> (x)</span><br><span class="line"><span class="comment"># 这就是线性方向 x = 5, y = 3, z = -2 的解</span></span><br></pre></td></tr></table></figure><p>更多线性代数操作可以参考[网站](</p><h2 id="十一、排序、条件与选择">十一、排序、条件与选择</h2><hr><h2 id="十二、字节交换、副本与试图">十二、字节交换、副本与试图</h2><hr><h2 id="十三、IO">十三、IO</h2><p><code>Numpy</code>可以读写磁盘上的二进制或者文本文件。</p><p>其文件格式为<code>npy</code>，女朋友文件可以重建<code>ndarray</code>的数据、图像和其他<code>info</code>哦</p><p>常见的<code>IO</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">numpy.save(file,arr,allow_pickle=<span class="literal">True</span>,fix_imports=<span class="literal">True</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">+ file: 要保存的文件，扩展名为.npy</span></span><br><span class="line"><span class="string">+ arr: 要保存的数组</span></span><br><span class="line"><span class="string">+ allow_pickle: 允许Python pickles保存对象数组，这玩意会对对象进行序列化和反序列化</span></span><br><span class="line"><span class="string">+ fix_imports: 主要方便PY3文件向下兼容PY2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>栗子</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">np.save(<span class="string">&#x27;output.npy&#x27;</span>,a)</span><br><span class="line"><span class="comment"># 输出的文件是乱码的，属于加密文件</span></span><br><span class="line"><span class="comment"># 通过load读取就行</span></span><br><span class="line"></span><br><span class="line">b=np.load(<span class="string">&quot;output.npy&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">numpy.savez(file,*args,**kwds)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">+ file: 要保存的文件,后缀是npz</span></span><br><span class="line"><span class="string">+ args: 要保存的数组，可以通过k-v形式可以设定一个名字，否则default arr_0</span></span><br><span class="line"><span class="string">+ kwds: 要保存的数组使用关键字名字</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>栗子</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">b = np.arange(<span class="number">0</span>, <span class="number">1.0</span>, <span class="number">0.1</span>)</span><br><span class="line">c = np.sin(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># C使用了关键字参数</span></span><br><span class="line">np.savez(<span class="string">&quot;runoob.npz&quot;</span>,a,b,sin_array=c)</span><br><span class="line"></span><br><span class="line">r=np.load(<span class="string">&quot;runoob.npz&quot;</span>)</span><br><span class="line">a=r[<span class="string">&quot;arr_0&quot;</span>]</span><br><span class="line">b=r[<span class="string">&quot;arr_1&quot;</span>]</span><br><span class="line">c=r[<span class="string">&quot;sin_array&quot;</span>]</span><br></pre></td></tr></table></figure><hr><p>前面捏是存储二进制文件，那对于文本，也可以通过<code>savetxt()</code>和<code>loadtxt()</code>进行操作哦。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.loadtxt(filename,dtype=<span class="built_in">int</span>,delimiter=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">np.savetxt(filename,a,fmt=<span class="string">&quot;%d&quot;</span>,delimiter=<span class="string">&quot;,&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>栗子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=np.arange(<span class="number">0</span>,<span class="number">10</span>,<span class="number">0.5</span>).reshape(<span class="number">4</span>,-<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 保留整数，用逗号作为分隔符</span></span><br><span class="line">np.savetxt(<span class="string">&quot;out.txt&quot;</span>,a,fmt=<span class="string">&quot;%d&quot;</span>mdelimiter=<span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="comment"># 读取数据，也需要指定逗号分隔符</span></span><br><span class="line">b=np.loadtxt(<span class="string">&quot;out.txt&quot;</span>,delimiter=<span class="string">&quot;,&quot;</span>)</span><br></pre></td></tr></table></figure><p><a href="https://vimsky.com/examples/usage/python-numpy.linalg.matrix_rank.html">https://vimsky.com/examples/usage/python-numpy.linalg.matrix_rank.html</a>)</p><hr><h2 id="十四、随机模块">十四、随机模块</h2><p>1️⃣ <strong>均匀分布</strong></p><ul><li>np.random.rand(dim)<ul><li>返回[0,1)区间内均匀分布的数</li></ul></li><li>np.random.uniform(low=0.0,high=1.0,size=None)<ul><li>在均匀分布区间[low,high)中随机采样</li></ul></li><li>np.random,randint(low,high,size,dtype=“I”)<ul><li>返回随机整数</li></ul></li></ul><p><strong>2️⃣ 正态分布</strong></p><p><strong>公式</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi>σ</mi><msqrt><mrow><mn>2</mn><mi>π</mi></mrow></msqrt></mrow></mfrac><msup><mi>e</mi><mfrac><mrow><mo>−</mo><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mrow><mn>2</mn><msup><mi>σ</mi><mn>2</mn></msup></mrow></mfrac></msup></mrow><annotation encoding="application/x-tex">f(x)=\frac{1}{\sigma\sqrt{2\pi}}e^{\frac{-(x-\mu)^2}{2\sigma^2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2591em;vertical-align:-0.93em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.2028em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9072em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span><span style="top:-2.8672em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1328em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.3291em;"><span style="top:-3.4534em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.251em;"><span style="top:-2.5062em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9384em;"><span style="top:-2.9384em;margin-right:0.1em;"><span class="pstrut" style="height:2.6444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5021em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">μ</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0484em;"><span style="top:-3.0484em;margin-right:0.1em;"><span class="pstrut" style="height:2.6444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4938em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li>np.random.randn(dim)<ul><li>从标准正态分布返回一个或多个样本值</li></ul></li><li>np.random.normal(loc=0.0,scale=1.0,size=None)<ul><li>均值，方差，形状</li></ul></li></ul><p>**案例 ** 随机生成8只股票10天的交易日涨幅数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stock_change=np.random.normal(<span class="number">0</span>,<span class="number">1</span>,(<span class="number">8</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">return : np.ndarray</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><hr><h2 id="np-newaxis">np.newaxis</h2><p>np.newaxis 的功能是增加新的维度，但是要注意 np.newaxis 放的位置不同，产生的矩阵形状也不同。</p><p>通常按照如下规则：</p><p>np.newaxis 放在哪个位置，就会给哪个位置增加维度</p><p>x[:, np.newaxis] ，放在后面，会给列上增加维度<br>x[np.newaxis, :] ，放在前面，会给行上增加维度</p><p>用途： 通常用它将一维的数据转换成一个矩阵，这样就可以与其他矩阵进行相乘。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">None</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="数据分析" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>英语口语常用表述</title>
    <link href="http://example.com/2022/09/06/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91%E8%8B%B1%E8%AF%AD%E5%8F%A3%E8%AF%AD%E5%B8%B8%E7%94%A8%E8%A1%A8%E8%BF%B0/"/>
    <id>http://example.com/2022/09/06/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91%E8%8B%B1%E8%AF%AD%E5%8F%A3%E8%AF%AD%E5%B8%B8%E7%94%A8%E8%A1%A8%E8%BF%B0/</id>
    <published>2022-09-06T04:41:01.000Z</published>
    <updated>2022-09-17T03:37:29.840Z</updated>
    
    <content type="html"><![CDATA[<h2 id="英语口语常用表述">英语口语常用表述</h2><hr><h3 id="cut-it-out">cut it out</h3><ul><li>闭嘴！省省吧！</li></ul><h3 id="easy-peasy">easy-peasy</h3><ul><li>小菜一碟！</li><li>这个peasy是为了押韵将peace将成了peasy</li></ul><h3 id="stay-strong">stay strong</h3><ul><li>坚强起来</li></ul><h3 id="fat-chance">fat chance</h3><ul><li>没戏~</li><li>不可能！希望渺茫~</li></ul><h3 id="you-known-nothing">you known nothing</h3><ul><li>你啥都不知道！</li><li>你懂个锤子</li></ul><hr><h3 id="you-look-stunning">you look stunning</h3><ul><li>你看起来美爆了！</li></ul><h3 id="fancy-meeting-you-here">fancy meeting you here</h3><ul><li>真他娘的意外！这里也能见到你啊？</li></ul><h3 id="every-dog-has-its-day">every dog has its day</h3><ul><li>人人皆有出头日</li></ul><h3 id="No-matter-how-bad-your-current-situation-is">No matter how bad your current situation is</h3><ul><li>无论你的处境多糟</li></ul><h3 id="enjoy-your-stay">enjoy your stay</h3><ul><li>希望你开心咯~</li></ul><hr><blockquote><p><strong>In summary</strong></p></blockquote><p>Juddy: Hey Petter! <strong>Fancy meeting you here</strong>! <strong>You look stunning</strong>!</p><p>Petter: <strong>Cut it out</strong>! <strong>You know nothing</strong>! I am about to lose my job!</p><p>Juddy: <strong>Stay strong</strong>! Just <strong>easy-peasy</strong>！I hope you could get out of this trouble.</p><p>Petter: I hope so. But actually, <strong>fat chance</strong>.</p><p>Juddy: <strong>No matter how bad your current situations is</strong>, <strong>every dog has its day</strong>. <strong>Enjoy your stay</strong>.</p><hr><h3 id="don’t-tell-me-what-to-do">don’t tell me what to do</h3><ul><li>你在教我做事？</li></ul><h3 id="don’t-take-it-out-on-me">don’t take it out on me</h3><ul><li>老子不背锅！</li><li>别烦我</li></ul><h3 id="don’t-tush-me">don’t tush me</h3><ul><li>别催啦！</li><li>tush: 屁股，獠牙</li><li>bush: 灌木</li></ul><h3 id="a-promise-is-a-promise">a promise is a promise</h3><ul><li>君子一言，驷马难追</li></ul><h3 id="are-you-smoking">are you smoking?</h3><ul><li>你是不是傻</li></ul><hr><h3 id="be-a-man">be a man</h3><ul><li>像个男人一样</li><li>成熟点</li></ul><h3 id="boys-will-be-boys">boys will be boys</h3><ul><li>本性难移</li><li>狗改不了吃屎</li></ul><h3 id="don’t-freak-out">don’t freak out</h3><ul><li>淡定点</li><li>freak这个词本事表示怪人，怪异的，不正常的，作动词还能表示震惊，畏惧。</li></ul><h3 id="don’t-have-a-cow">don’t have a cow</h3><ul><li>别大惊小怪</li></ul><h3 id="don’t-give-me-that-look">don’t give me that look</h3><ul><li>别用那种眼神看我</li></ul><hr><blockquote><p><strong>In summary</strong></p></blockquote><p>A: Aha, I will never go to school! <strong>A primise is a primse</strong>!</p><p>B: <strong>Are you smoking</strong>? <strong>Be a man</strong> plz.</p><p>A: <strong>Don’t freak out</strong> and <strong>don’t give me that look</strong>! You know, <strong>boys will be boys</strong>, it’s rule!</p><p>B: <strong>Are you telling me what to do</strong>?c</p><p>A: <strong>Don’t take it out on me</strong>! <strong>Don’t have a cow</strong> and <strong>Don’t tush me</strong>! It’s none of your bissness.</p><hr><h3 id="can-I-ask-you-a-favor">can I ask you a favor?</h3><ul><li>能帮我忙吗~</li></ul><h3 id="I-don’t-follow">I don’t follow</h3><ul><li>我没跟上</li><li>我没听懂</li></ul><h3 id="hear-me-out">hear me out</h3><ul><li>让我听完</li></ul><h3 id="How-is-that-possible">How is that possible?</h3><ul><li>怎么可能</li></ul><h3 id="how-dare-you">how dare you</h3><ul><li>你好大的胆子！</li></ul><hr><h3 id="how-have-you-been">how have you been</h3><ul><li>最近过得怎么样</li></ul><h3 id="I-give-up">I give up</h3><ul><li>我放弃了</li></ul><h3 id="I-kid-you-not">I kid you not</h3><ul><li>我没跟你开玩笑</li></ul><h3 id="I-never-want-to-see-you-again">I never want to see you again</h3><ul><li>我再也不想见到你</li></ul><h3 id="I-take-full-responsibility">I take full responsibility</h3><ul><li>我负全责</li></ul><hr><blockquote><p><strong>In summary</strong></p></blockquote><p>A: Fancy meeting you here! <strong>How have youo been</strong>?</p><p>B: Fine! and … <strong>Could you do me a favor</strong>?</p><p>A: …Ok, so what should I do?</p><p>B: Help me Kill that guys!</p><p>A: …Ha? Sorry <strong>I don’t follow</strong>, could you repeat?</p><p>B: <strong>Hear me out,</strong> you need just to do is stab him!</p><p>A: <strong>How dare you</strong>! I give up!</p><p>B: Hey Hey Hey, <strong>I kid you not</strong> ! I mean, this knife is only a prop!</p><p>A: Oh… You just freak me out!</p><p>A few minutes passed…</p><p>A: What? Holy the shit!!! Why did he die! <strong>How that is possible</strong>!</p><p>B: Surprise! I lied to you~</p><p>A: <strong>I never want to see you again!</strong> Get out from my range!</p><p>B: Take it easy~ <strong>I will take full responsibility</strong>~</p><hr><h3 id="It’s-been-a-long-day">It’s been a long day</h3><ul><li>真是好累的一天~</li></ul><h3 id="I’m-speechless">I’m speechless</h3><ul><li>我服了你</li><li>speechless: 说不出话</li><li>Laura was speechless with rage.</li><li>一整个无语住了</li></ul><h3 id="I-don’t-know-what-to-say">I don’t know what to say</h3><ul><li>我不知道该怎么说才好</li></ul><h3 id="Try-harder">Try harder</h3><ul><li>再努力一点</li></ul><h3 id="What-happened-to-you">What happened to you</h3><ul><li>你怎么了</li></ul><hr><h3 id="You-are-nothing">You are nothing</h3><ul><li>你是个锤子</li></ul><h3 id="I’ve-heard-so-much-about-you">I’ve heard so much about you</h3><ul><li>久仰大名！</li></ul><h3 id="Cet-out-of-my-face">Cet out of my face</h3><ul><li>从我的眼前消失！</li></ul><h3 id="knock-it-off">knock it off</h3><ul><li>住手吧！</li></ul><h3 id="keep-a-low-profile">keep a low profile</h3><ul><li>保持低调</li><li>profile : 形象，轮廓，概述</li><li>profit: 利润</li></ul><hr><blockquote><p><strong>In summary</strong></p></blockquote><p>Boss: <strong>Try harder</strong>! How can you sleep at your age!</p><p>Ally: OK…</p><p>A few hours pass…</p><p>Ally: <strong>It’s been a long day!</strong> Finally, I can have a rest~</p><p>Boss: Ah, Stay and work overtime!</p><p>Ally: oh… <strong>I’m speechless</strong>…</p><p>Ally’s bestie: Ally ! Why do you look bad?</p><p>Ally: <strong>I don’t know what to say</strong>… My boss is a vampire!</p><p>Boss: Oh Ally! How fancy I meet you here !</p><p>Ally: plz <strong>get out of my face</strong> !!!</p><p>Boss: <strong>Knock it off</strong> ! And… you are Ally’s bestie, Mrs. Lily?</p><p>Lily: Yes, <strong>I’ve heard so much about you</strong> from Alliy.</p><p>Boss: Wooow, <strong>keep a low profile</strong>, I know I’m a great Boss~</p><p>Ally &amp; Lily: <strong>You Are Nothing</strong>!</p><hr><h3 id="keep-your-voice-down">keep your voice down</h3><ul><li>小点声</li></ul><h3 id="just-browsing">just browsing</h3><ul><li>随便看看</li></ul><h3 id="lay-low">lay low</h3><ul><li>低调点</li></ul><h3 id="I-don’t-give-a-shit">I don’t give a shit</h3><ul><li>老子不在乎</li></ul><h3 id="what’s-done-is-done">what’s done is done</h3><ul><li>覆水难收</li></ul><hr><h3 id="talk-is-cheap">talk is cheap</h3><ul><li>说着容易做着难</li></ul><h3 id="take-days">take days</h3><ul><li>需要几天的时间</li></ul><h3 id="talk-to-the-hand">talk to the hand</h3><ul><li>懒得理你</li></ul><h3 id="take-care">take care</h3><ul><li>保重</li></ul><h3 id="why-the-long-face">why the long face</h3><ul><li>为什么不高兴</li></ul><hr><blockquote><p><strong>In summary</strong></p></blockquote><p>A: Hello, what do you need?</p><p>B: <strong>I just browsing</strong>.</p><p>A: OKey Sir… Oh, you are Ms. Ye? The most famous star in the earth!</p><p>B: <strong>Lay low</strong> and keep your voice down. I  don’t want too many people to know I’m here.</p><p>A: Yes Sir! (with loudly voice)</p><p>B: … <strong>Talk to the hand</strong>. I need a gun with a Hello Kitty profile.</p><p>A: I’m sorry for that, this commodity is sold out. If you want , <strong>take days</strong> plz.</p><p>B: <strong>I don’t give a shit.</strong> I want to see it right away.</p><p>A: <strong>Talk is cheap</strong> sir! <strong>What’s done is done!</strong> <strong>Why the long face</strong> in you?</p><p>B: …<strong>Take care</strong> and say hello to the god.</p><hr><p><strong>一些套话</strong></p><p><strong>1. I really appreciate your making time in your schedules to attend today.</strong></p><p>我非常感谢你们今天抽空来参加这个会议。</p><p><strong>2. Thank you for…</strong></p><p>感谢您……</p><p><strong>Thank you for giving me this opportunity to speak about myself in this special occasion.</strong></p><p>感谢您给我这个机会在这个特别的场合介绍我自己。</p><p><strong>3. It is my honor…</strong></p><p>我很荣幸……</p><p><strong>It is my honor to introduce the president of our company, Mr. Jones.</strong></p><p>我很荣幸介绍我们公司总裁琼斯先生。</p><p><strong>4. On behalf of…</strong></p><p>代表……</p><p><strong>On behalf of our entire company, I want to thank you for inviting us to such an enjoyable Christmas party.</strong></p><p>我代表全公司，我想感谢您邀请我们参加这样一个令人愉快的圣诞晚会</p><p><strong>5. I’d be happy to…</strong></p><p>我很高兴……</p><p><strong>I’d be happy to tell you about my experiences.</strong></p><p>我很高兴和你们分享我的经验。</p><p><strong>6. What I am going to talk about today is…</strong></p><p>今天我想讲的是……</p><p><strong>What I am going to talk about today is the energy conservation issue.</strong></p><p>今天我想讲的是节能问题。</p><p><strong>7. How can we…?</strong></p><p>我们怎样才能……？</p><p><strong>How can we work more efficiently?</strong></p><p>我们怎样才能工作得更有效率呢？</p><p><strong>8.Thank you from the bottom of my heart for…</strong></p><p>我从心底感谢……</p><p><strong>Thank you from the bottom of my heart for giving me this chance to speak to you today.</strong></p><p>我从心底感谢你们今天给了解这个机会在你们前面讲话。</p><p><strong>9. So long as…</strong></p><p>只要……</p><p><strong>So long as we work together we can achieve great results.</strong></p><p>只要我们一起努力，我们就能取得巨大的成就。</p><p><strong>10. Working together…</strong></p><p>一起努力…</p><p><strong>Working together, we can make the future better.</strong></p><p>一起努力，我们将把未来变得更加美好。</p><p><strong>11. I should like to pay tribute to…</strong></p><p>我想对……表示敬意</p><p><strong>I should like to pay tribute to the dedication of all the professionals who worked on this project.</strong></p><p>我想对参与这个项目的所有专家的奉献表示敬意。</p><p><strong>12. I want to leave you with…</strong></p><p>我想留给你们…</p><p><strong>I want to leave you with one final word to remember, “teamwork”.</strong></p><p>我想让你们记住最后一个词：“团队合作”</p><p><strong>13. We sincerely hope…</strong></p><p>我们衷心希望…</p><p><strong>We sincerely hope that you will have a wonderful time tonight.</strong></p><p>我们衷心希望你们今晚过的开心。</p><p><strong>14. I look forward to…</strong></p><p>我期待……</p><p><strong>I look forward to seeing you again.</strong></p><p>我期待着再次见到你们。</p><p><strong>15. Best wishes for…</strong></p><p>对……致以良好的祝愿</p><p><strong>Best wishes for a very successful exhibition!</strong></p><p>对展会的成功致以美好的祝愿。</p><hr><p><strong>You really look sharp today.</strong></p><ul><li>你今天真漂亮</li></ul><p><strong>I was along but not lonely</strong></p><ul><li>嗯哼</li></ul><p><strong>I haven’t seen you for ages.</strong></p><ul><li>我好久没见过你了</li></ul><p><strong>The stars are too far away.</strong></p><ul><li>星星好远啊</li></ul><p><strong>I have a surprise for you.</strong></p><ul><li>我有个惊喜给你</li></ul><hr><p><strong>I got hold of you at last.</strong></p><ul><li>我终于找到你了</li></ul><p><strong>You’ve got a point there.</strong></p><ul><li>你讲的挺有道理的</li></ul><p><strong>Dinner’s on me</strong></p><ul><li>xxx on me 我请客</li></ul><p><strong>Right as rain</strong></p><ul><li>一切顺利</li><li>一路顺风</li></ul><p><strong>As you wish</strong></p><ul><li>如你所愿</li></ul><p>I‘m flattered.</p><ul><li>过奖了</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;英语口语常用表述&quot;&gt;英语口语常用表述&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&quot;cut-it-out&quot;&gt;cut it out&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;闭嘴！省省吧！&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;easy-peasy&quot;&gt;easy-peasy&lt;/h3&gt;
&lt;ul</summary>
      
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="英语" scheme="http://example.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
    <category term="口语" scheme="http://example.com/tags/%E5%8F%A3%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 309周赛&amp;86双赛</title>
    <link href="http://example.com/2022/09/04/%E3%80%90LeetCode%E3%80%91309%E5%91%A8%E8%B5%9B&amp;86%E5%8F%8C%E8%B5%9B/"/>
    <id>http://example.com/2022/09/04/%E3%80%90LeetCode%E3%80%91309%E5%91%A8%E8%B5%9B&amp;86%E5%8F%8C%E8%B5%9B/</id>
    <published>2022-09-04T15:43:40.565Z</published>
    <updated>2022-09-09T11:01:20.602Z</updated>
    
    <content type="html"><![CDATA[<h1>309周赛&amp;86双赛</h1><hr><h2 id="前言-v3">前言</h2><p>最近对自己太放纵了，属实是有点不太行。</p><p>接下来要上强度了！</p><hr><h2 id="309-是miHoYo冠名周赛">309 是miHoYo冠名周赛</h2><hr><h2 id="T1">T1</h2><img src="/2022/09/04/%E3%80%90LeetCode%E3%80%91309%E5%91%A8%E8%B5%9B&86%E5%8F%8C%E8%B5%9B/image-20220906175248073.png" alt="image-20220906175248073" style="zoom:50%;"><p><strong>思路</strong></p><p>T1又是很简单的数组题，我们只需要判断两个元素出现位置中间隔的元素是否与给定的距离表相等即可。</p><p>而且哦，这种位置的选择，我们可以通过<code>hash</code>表的方式很容易的完成。尤其是前后位次关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">checkDistances</span>(<span class="params">self, s: <span class="built_in">str</span>, distance</span>):</span><br><span class="line">        hashmap=&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(s):</span><br><span class="line">            <span class="comment"># 记录第一次出现的位置</span></span><br><span class="line">            <span class="keyword">if</span> j <span class="keyword">not</span> <span class="keyword">in</span> hashmap.keys():</span><br><span class="line">                hashmap[j]=i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 判断第二次与第一次的差值是否等于距离表</span></span><br><span class="line">                val=i-hashmap[j]</span><br><span class="line">                <span class="keyword">if</span> val-<span class="number">1</span>!=distance[<span class="built_in">ord</span>(j)-<span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>)]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>这题是不是很像两数之和？<br>那我们干脆一起把<code>86双</code>的<code>T1</code>一起讲了吧</p><p><img src="/2022/09/04/%E3%80%90LeetCode%E3%80%91309%E5%91%A8%E8%B5%9B&86%E5%8F%8C%E8%B5%9B/image-20220906175257692.png" alt="image-20220906175257692"></p><p>呐，这鬼题也是，判断连续的，我们只需要看这个值是否被记录过就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findSubarrays</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="comment"># 要tm连续啊</span></span><br><span class="line">        <span class="comment"># 逆天</span></span><br><span class="line">        hashmap=&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)-<span class="number">1</span>):</span><br><span class="line">            val=nums[i]+nums[i+<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> val <span class="keyword">in</span> hashmap.keys():</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            hashmap[val]=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><hr><h2 id="T2">T2</h2><p><img src="/2022/09/04/%E3%80%90LeetCode%E3%80%91309%E5%91%A8%E8%B5%9B&86%E5%8F%8C%E8%B5%9B/image-20220906175309036.png" alt="image-20220906175309036"></p><p><strong>思路</strong></p><p>关键词：方法数！想到了什么？爬楼梯？斐波那契数列？没错，这种方法数，一般都有递推公式。这题也不例外。考虑两个方向，于是每次dp就能从左和从右。由于负数轴需要映射，为了简化操作，我们可以不用数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numberOfWays</span>(<span class="params">self, startPos: <span class="built_in">int</span>, endPos: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        MOD = <span class="number">10</span> ** <span class="number">9</span> + <span class="number">7</span></span><br><span class="line"><span class="meta">        @cache</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x: <span class="built_in">int</span>, left: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(x - endPos) &gt; left: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> left == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">1</span>  <span class="comment"># 成功到达终点，算一种方案</span></span><br><span class="line">            <span class="keyword">return</span> (f(x - <span class="number">1</span>, left - <span class="number">1</span>) + f(x + <span class="number">1</span>, left - <span class="number">1</span>)) % MOD</span><br><span class="line">        <span class="keyword">return</span> f(startPos, k)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>亦或是采用BFS进行广度搜索，得到所有可能的结果(相当于遍历，核心与DP相同)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MOD = <span class="number">10</span>**<span class="number">9</span> + <span class="number">7</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numberOfWays</span>(<span class="params">self, startPos: <span class="built_in">int</span>, endPos: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># BFS模拟全局搜索</span></span><br><span class="line">        pre = defaultdict()</span><br><span class="line">        pre[startPos] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> k:</span><br><span class="line">            nex = defaultdict()</span><br><span class="line">            <span class="keyword">for</span> pos <span class="keyword">in</span> pre:</span><br><span class="line">                <span class="comment"># 每次都会更新下一次的方向</span></span><br><span class="line">                <span class="comment"># 并且都会进行一个累加，表示重新走过</span></span><br><span class="line">                <span class="comment"># 更新往左与往右的方案数</span></span><br><span class="line">                nex[pos + <span class="number">1</span>] += pre[pos]</span><br><span class="line">                nex[pos - <span class="number">1</span>] += pre[pos]</span><br><span class="line">            <span class="keyword">for</span> pos <span class="keyword">in</span> nex:</span><br><span class="line">                nex[pos] %= MOD</span><br><span class="line">            pre = nex</span><br><span class="line">            k -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> pre[endPos] % MOD</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解法二：数学！</p><p>正着走:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>，负着走<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi><mo>−</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">K-X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>，距离<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span></p><p>我们有:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>X</mi><mo>+</mo><mo stretchy="false">(</mo><mo>−</mo><mo stretchy="false">(</mo><mi>K</mi><mo>−</mo><mi>X</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mi>D</mi><mspace linebreak="newline"></mspace><mi>X</mi><mo>=</mo><mfrac><mrow><mi>D</mi><mo>+</mo><mi>K</mi></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">X+(-(K-X))=D\\X=\frac{D+K}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>于是，转换为求解：从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>中取<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>个正数。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mi>C</mi><mi>K</mi><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">(</mo><mi>D</mi><mo>+</mo><mi>K</mi><mo stretchy="false">)</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">C^{1/2(D+K)}_K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3383em;vertical-align:-0.2935em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4065em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1/2</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2935em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>那，关于Python如何求组合数，其实有一个内置函数<code>comb</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numberOfWays</span>(<span class="params">self, startPos: <span class="built_in">int</span>, endPos: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        MOD=<span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span></span><br><span class="line">        d=<span class="built_in">abs</span>(endPos-startPos)</span><br><span class="line">        <span class="keyword">if</span> (k-<span class="built_in">abs</span>(endPos-startPos))&amp;<span class="number">1</span> <span class="keyword">or</span> k&lt;<span class="built_in">abs</span>(endPos-startPos):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> comb(k,(d+k)//<span class="number">2</span>)%MOD</span><br></pre></td></tr></table></figure><p>不用Comb的话，我们可以这样写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">comb</span>(<span class="params">m,n</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> m&gt;n <span class="keyword">or</span> <span class="built_in">type</span>(m)!=<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">type</span>(n)!=<span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 必须是整数且满足大小关系</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rank(n)//(rank(m)*rank(n-m))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rank</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span> <span class="keyword">or</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    ans=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">        ans*=i</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(ans)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numberOfWays</span>(<span class="params">self, startPos: <span class="built_in">int</span>, endPos: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        MOD=<span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span></span><br><span class="line">        d=<span class="built_in">abs</span>(endPos-startPos)</span><br><span class="line">        <span class="keyword">if</span> (k-<span class="built_in">abs</span>(endPos-startPos))&amp;<span class="number">1</span> <span class="keyword">or</span> k&lt;<span class="built_in">abs</span>(endPos-startPos):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> comb(k,(d+k)//<span class="number">2</span>)%MOD</span><br></pre></td></tr></table></figure><hr><h3 id="T3">T3</h3><p><img src="/2022/09/04/%E3%80%90LeetCode%E3%80%91309%E5%91%A8%E8%B5%9B&86%E5%8F%8C%E8%B5%9B/image-20220906175316163.png" alt="image-20220906175316163"></p><p><strong>思路</strong></p><p>位运算+双指针优化</p><p>其实看到这个连续就应该想到用双指针了。</p><p>当然，我的解法会遍历左右指针所有值，导致复杂度为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nm)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">nm</span><span class="mclose">)</span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestNiceSubarray</span>(<span class="params">self, nums</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 滑动窗口</span></span><br><span class="line">        left=right=<span class="number">0</span></span><br><span class="line">        ans=<span class="number">0</span></span><br><span class="line">        n=<span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">while</span> right&lt;n:</span><br><span class="line">            i=breakPoint=left</span><br><span class="line">            change=<span class="literal">False</span></span><br><span class="line">            <span class="keyword">while</span> i&lt;right:</span><br><span class="line">                <span class="keyword">if</span> nums[right]&amp;nums[i]!=<span class="number">0</span>:</span><br><span class="line">                    <span class="comment"># 只要是有一个够不成了</span></span><br><span class="line">                    <span class="comment"># 我们从构不成的位置重新构建子串</span></span><br><span class="line">                    <span class="comment"># 首先的尝试就是跳过</span></span><br><span class="line">                    breakPoint=i</span><br><span class="line">                    change=<span class="literal">True</span></span><br><span class="line">                    <span class="comment"># 子串肯定比原串小</span></span><br><span class="line">                    <span class="comment"># 所以不需要考虑，下次的截断点就是bp+1</span></span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">                <span class="comment"># 加入</span></span><br><span class="line">            left=breakPoint+<span class="number">1</span> <span class="keyword">if</span> change <span class="keyword">or</span> breakPoint!=left <span class="keyword">else</span> left</span><br><span class="line">            ans=<span class="built_in">max</span>(ans,<span class="built_in">len</span>(nums[left:right+<span class="number">1</span>]))</span><br><span class="line">            right+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用位运算的话，复杂度上其实也差不多啦</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestNiceSubarray</span>(<span class="params">self, nums</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 滑动窗口</span></span><br><span class="line">        left=right=<span class="number">0</span></span><br><span class="line">        ans=<span class="number">0</span></span><br><span class="line">        n=<span class="built_in">len</span>(nums)</span><br><span class="line">        or_=<span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> right&lt;n:</span><br><span class="line">            <span class="keyword">while</span> or_&amp;nums[right]:</span><br><span class="line">                or_^=nums[left]</span><br><span class="line">                left+=<span class="number">1</span></span><br><span class="line">                <span class="comment"># 加入</span></span><br><span class="line">            or_|=nums[right]</span><br><span class="line">            ans=<span class="built_in">max</span>(ans,right-left+<span class="number">1</span>)</span><br><span class="line">            right+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>当然，最后写的漂亮点，就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestNiceSubarray</span>(<span class="params">self, nums</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ans=left=or_=<span class="number">0</span></span><br><span class="line">        <span class="comment"># or_用来存放运算结果</span></span><br><span class="line">        <span class="comment"># 加入：or_| x</span></span><br><span class="line">        <span class="comment"># 剔除: or_^ x</span></span><br><span class="line">        <span class="keyword">for</span> right,x <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">while</span> or_&amp;x:</span><br><span class="line">                <span class="comment"># 此时需要剔除了</span></span><br><span class="line">                or_^=nums[left]</span><br><span class="line">                left+=<span class="number">1</span></span><br><span class="line">            or_|=x</span><br><span class="line">            ans=<span class="built_in">max</span>(ans,right-left+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><hr><h3 id="T4">T4</h3><p><img src="/2022/09/04/%E3%80%90LeetCode%E3%80%91309%E5%91%A8%E8%B5%9B&86%E5%8F%8C%E8%B5%9B/image-20220906175321646.png" alt="image-20220906175321646"></p><p><strong>思路</strong></p><p>初见这个题的时候，想到的应该是贪心，谁有空就给谁，谁的时间最短谁就空闲。</p><p>于是我写了个不能AC的解:</p><p>超！！！！我这个解随便改改逻辑就AC了！！！！！！</p><p>超！！！！</p><p>我也做出T4了！！！！</p><p>这是离AK最近的一次！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mostBooked</span>(<span class="params">self, n: <span class="built_in">int</span>, meetings</span>):</span><br><span class="line">        st=[[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        val=[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        n=<span class="built_in">len</span>(meetings)</span><br><span class="line">        i=<span class="number">0</span></span><br><span class="line">        now=<span class="number">0</span></span><br><span class="line">        meetings.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>])</span><br><span class="line">        change=[<span class="literal">None</span>,<span class="literal">None</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i&lt;n:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> change[<span class="number">0</span>]!=<span class="literal">None</span>:</span><br><span class="line">                s,e=change</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                s, e = meetings[i]</span><br><span class="line">                <span class="keyword">if</span> now&lt;=s:</span><br><span class="line">                    <span class="comment"># 提前</span></span><br><span class="line">                    now=s</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    e+=now-s</span><br><span class="line">                    s=now</span><br><span class="line">                    </span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">            <span class="comment"># 时间到了</span></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> st:</span><br><span class="line">                <span class="keyword">if</span> _ <span class="keyword">and</span> _[<span class="number">0</span>]&lt;=now:</span><br><span class="line">                    _.pop()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 有无空闲</span></span><br><span class="line">            <span class="keyword">for</span> l,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(st):</span><br><span class="line">                <span class="keyword">if</span> j==[]:</span><br><span class="line">                    val[l]+=<span class="number">1</span></span><br><span class="line">                    j.append(e)</span><br><span class="line">                    now=s</span><br><span class="line">                    i+=<span class="number">1</span></span><br><span class="line">                    change[<span class="number">0</span>]=<span class="literal">None</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                now=<span class="built_in">min</span>([i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> st])</span><br><span class="line">                now=<span class="built_in">max</span>(now,s)</span><br><span class="line">                change=[now,now+(e-s)]</span><br><span class="line"></span><br><span class="line">        check=val[<span class="number">0</span>]</span><br><span class="line">        idx=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(val):</span><br><span class="line">            <span class="keyword">if</span> j&gt;check:</span><br><span class="line">                check=j</span><br><span class="line">                idx=i</span><br><span class="line">        <span class="keyword">return</span> idx</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>两个堆来回倒实现任务队列！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> heapq <span class="keyword">import</span> heappop</span><br><span class="line"><span class="keyword">from</span> heapq <span class="keyword">import</span> heappush</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mostBooked</span>(<span class="params">self, n: <span class="built_in">int</span>, meetings</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当会议室未占用，会有限提供资源给开始时间早的。</span></span><br><span class="line">        <span class="comment"># 两个堆来模拟，一个表示可用的会议室，另一个表示正在开会的会议室</span></span><br><span class="line"></span><br><span class="line">        cnt=[<span class="number">0</span>]*n</span><br><span class="line">        idle=<span class="built_in">list</span>(<span class="built_in">range</span>(n)) <span class="comment"># 可用的会议室</span></span><br><span class="line">        using=[]<span class="comment"># (结束时间，会议室编号)</span></span><br><span class="line">        meetings.sort() <span class="comment"># 必要的排序</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> st,end <span class="keyword">in</span> meetings:</span><br><span class="line">            <span class="comment"># 在st时刻前正在开会的会议室，把结束的弹出来</span></span><br><span class="line">            <span class="keyword">while</span> using <span class="keyword">and</span> using[<span class="number">0</span>][<span class="number">0</span>]&lt;=st:</span><br><span class="line">                <span class="comment"># 首先将使用栈中的内容弹出来</span></span><br><span class="line">                <span class="comment"># 并且将结束时间放入idle中，表示可用任务队列</span></span><br><span class="line">                heappush(idle,heappop(using)[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(idle)==<span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 如果当前没有可用的</span></span><br><span class="line">                <span class="comment"># 需要等到最近一个结束</span></span><br><span class="line">                e,i=heappop(using)</span><br><span class="line">                <span class="comment"># 补上时间</span></span><br><span class="line">                end+=e-st</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 将当前空闲的弹出去(其实也是索引最小值)</span></span><br><span class="line">                <span class="comment"># 将最短时间的出堆</span></span><br><span class="line">                i=heappop(idle)</span><br><span class="line"></span><br><span class="line">            cnt[i]+=<span class="number">1</span></span><br><span class="line">            <span class="comment"># 将当前结束时间和索引加入最小堆中</span></span><br><span class="line">            <span class="comment"># 每次取都是最小(最近一个结束的)</span></span><br><span class="line">            heappush(using,(end,i))</span><br><span class="line"></span><br><span class="line">        ans=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i,c <span class="keyword">in</span> <span class="built_in">enumerate</span>(cnt):</span><br><span class="line">            <span class="keyword">if</span> c&gt;cnt[ans]:</span><br><span class="line">                ans=i</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>O(n+mlogn+mlogn)</p><p>建堆+排+插入堆</p><hr><h1>86 双赛</h1><blockquote><p>T3和T4很有意思</p></blockquote><h2 id="T2-v2">T2</h2><p><strong>带余除法</strong></p><p>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>&gt;</mo><mn>4</mn><mo separator="true">,</mo><mn>2</mn><mo>&lt;</mo><mi>n</mi><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">n&gt;4,2&lt;n-2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span>，下面的表达式一定成立</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>=</mo><mi>q</mi><mo>∗</mo><mi>b</mi><mo>+</mo><mi>r</mi><mo separator="true">,</mo><mn>0</mn><mo>&lt;</mo><mo>=</mo><mi>r</mi><mo>&lt;</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">n=q*b+r,0&lt;=r&lt;b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6597em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span></span></p><p>这题完全就是脑筋急转弯<br>告诉你了，这玩意在<code>n-2</code>进制上必定为<code>12</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><hr><h2 id="T3-v2">T3</h2><p><img src="/2022/09/04/%E3%80%90LeetCode%E3%80%91309%E5%91%A8%E8%B5%9B&86%E5%8F%8C%E8%B5%9B/image-20220906175340017.png" alt="image-20220906175340017"></p><p>这题不难看出是位运算，难得是如何进行。</p><p>不是没有想过枚举，但是会不会有一种更加高效的手段拿来实现这个算法？很可惜，似乎是没有的。</p><p>所幸的是，位运算枚举还是挺快的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maximumRows</span>(<span class="params">self, mat: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], cols: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        位运算</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        枚举所有选择情况</span></span><br><span class="line"><span class="string">        实际上，二进制数就能表征所有的选择情况</span></span><br><span class="line"><span class="string">        二进制数还能用来表征更高位的数据</span></span><br><span class="line"><span class="string">        譬如之前的毒药和小鼠</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        ans=<span class="number">0</span></span><br><span class="line">        mask=[<span class="built_in">sum</span>(v&lt;&lt;j <span class="keyword">for</span> j,v <span class="keyword">in</span> <span class="built_in">enumerate</span>(row)) <span class="keyword">for</span> row <span class="keyword">in</span> mat]</span><br><span class="line">        <span class="comment"># 刚好就能够表示0-1覆盖情况</span></span><br><span class="line">        <span class="comment"># 例如：5-&gt; 101</span></span><br><span class="line">        <span class="comment"># 6-&gt;110</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">set</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>&lt;&lt;<span class="built_in">len</span>(mat[<span class="number">0</span>])):</span><br><span class="line">            <span class="comment"># 这样就能表征所有的情况</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">set</span>.bit_count()!=cols:</span><br><span class="line">                <span class="comment"># 剪枝</span></span><br><span class="line">                <span class="comment"># 不满足列的情况就丢弃</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 某一行 and 选择列如果还等于他自己</span></span><br><span class="line">            <span class="comment"># 那就说明可以覆盖</span></span><br><span class="line">            <span class="comment"># 1的时候恰好是1 0的时候不用管他</span></span><br><span class="line">            cnt=<span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> mask:</span><br><span class="line">                <span class="keyword">if</span> row &amp;<span class="built_in">set</span>==row:</span><br><span class="line">                    cnt+=<span class="number">1</span></span><br><span class="line">            ans=<span class="built_in">max</span>(ans,cnt)</span><br><span class="line">        <span class="keyword">return</span> ans </span><br><span class="line"></span><br><span class="line">            </span><br></pre></td></tr></table></figure><h2 id="T4-v2">T4</h2><img src="/2022/09/04/%E3%80%90LeetCode%E3%80%91309%E5%91%A8%E8%B5%9B&86%E5%8F%8C%E8%B5%9B/image-20220905204610760.png" alt="image-20220905204610760" style="zoom:50%;"><p>这题的关键字：<strong>连续consecutive</strong></p><p>所以，双指针搭建滑动窗口不失为一种好的选择。</p><p>当然，这类似背包问题，是存在一个限制条件的。</p><p>我们可以用单调队列来处理这种情况，通过维护单调队列，及时清理无用数据，保证队首是最大元素的同时，考虑是否加入和剔除元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maximumRobots</span>(<span class="params">self, chargeTimes: <span class="type">List</span>[<span class="built_in">int</span>], runningCosts: <span class="type">List</span>[<span class="built_in">int</span>], budget: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        ans=s=left=<span class="number">0</span></span><br><span class="line">        q=deque()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> right,(t,c) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(chargeTimes,runningCosts)):</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 处理右端点</span></span><br><span class="line">            <span class="keyword">while</span> q <span class="keyword">and</span> t&gt;=chargeTimes[q[-<span class="number">1</span>]]:</span><br><span class="line">                <span class="comment"># 只要当前的时间大于队列的时间</span></span><br><span class="line">                <span class="comment"># 就要维护队列的单调性</span></span><br><span class="line">                q.pop()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将这个端点加入</span></span><br><span class="line">            q.append(right)</span><br><span class="line">            s+=c <span class="comment"># 总的cost</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 处理左端点</span></span><br><span class="line">            <span class="keyword">while</span> q <span class="keyword">and</span> chargeTimes[q[<span class="number">0</span>]]+(right-left+<span class="number">1</span>)*s&gt;budget:</span><br><span class="line">                <span class="comment"># 太多了！ 最大的滚出去！</span></span><br><span class="line">                <span class="keyword">if</span> q[<span class="number">0</span>]==left:</span><br><span class="line">                    q.popleft()</span><br><span class="line">                s-=runningCosts[left]</span><br><span class="line">                <span class="comment"># 一直找啊找直到找到最大的那个</span></span><br><span class="line">                left+=<span class="number">1</span></span><br><span class="line">            <span class="comment"># 这样 超出区间的一个就是我们的一个连续的子序列了</span></span><br><span class="line">            <span class="comment"># 这样的方式能保证：</span></span><br><span class="line">            <span class="comment"># 如果后面加进来的值比较大</span></span><br><span class="line">            <span class="comment"># 我们可以直接剔除掉串</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 如果后面加进来的值比较小</span></span><br><span class="line">            <span class="comment"># 我们就无须对其进行维护</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 举个栗子</span></span><br><span class="line">            <span class="comment"># tar: 10</span></span><br><span class="line">            <span class="comment"># List: 4 3 1 2</span></span><br><span class="line">            <span class="comment"># q:4 3 1</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 插入2</span></span><br><span class="line">            <span class="comment"># 此时q: 4 3 2</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 发现超了</span></span><br><span class="line">            <span class="comment"># 我们就去掉最大的</span></span><br><span class="line">            <span class="comment"># 剩下的q: 3 2</span></span><br><span class="line">            <span class="comment"># 重新开始一段</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># tar:10</span></span><br><span class="line">            <span class="comment"># List: 1 3 4 2</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 插入2时:</span></span><br><span class="line">            <span class="comment"># q: 4</span></span><br><span class="line">            <span class="comment"># 插入2一定会炸</span></span><br><span class="line">            <span class="comment"># 那么我们就从4的位置开始新的子串</span></span><br><span class="line">            <span class="comment"># 直接定位到了最大的位置</span></span><br><span class="line">            <span class="comment"># 因为当x上溢</span></span><br><span class="line">            <span class="comment"># x+1一定上溢</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 而且，单调队列维护的是坐标索引</span></span><br><span class="line">            <span class="comment"># 方便我们定位</span></span><br><span class="line">            ans=<span class="built_in">max</span>(ans,right-left+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>我们可以反思一下，什么时候可以用单调队列？</p><ul><li>我们每次不符合条件的弹出都是最值</li><li>维护一个最值，使其满足限制条件</li></ul><p>怎么使用单调队列？</p><ul><li>及时弹出无用元素</li></ul><p>在滑动窗口维护最值问题，可以考虑单调队列：</p><ul><li>判断队列单调性，不满足时，队尾出队</li><li>增大窗口，队尾入队，更新统计值</li><li>判断是否满足条件，不满足则缩小窗口，队首出队</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">正常的周赛罢了</summary>
    
    
    
    <category term="不想学辣" scheme="http://example.com/categories/%E4%B8%8D%E6%83%B3%E5%AD%A6%E8%BE%A3/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="总结" scheme="http://example.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>CFOP</title>
    <link href="http://example.com/2022/09/04/%E3%80%90cfop%E3%80%91%E9%AD%94%E6%96%B9/"/>
    <id>http://example.com/2022/09/04/%E3%80%90cfop%E3%80%91%E9%AD%94%E6%96%B9/</id>
    <published>2022-09-04T10:26:46.425Z</published>
    <updated>2022-09-24T07:41:36.773Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CFOP-F2L-F2L1">CFOP-F2L-F2L1</h3><p>(R U’ R’ U) y’ (R’ U2 R U’ U’) (R’ U R)</p><p><img src="/2022/09/04/%E3%80%90cfop%E3%80%91%E9%AD%94%E6%96%B9/image-20220924154134744.png" alt="image-20220924154134744"></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">CFOP公式</summary>
    
    
    
    <category term="拾枝杂谈" scheme="http://example.com/categories/%E6%8B%BE%E6%9E%9D%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="魔方" scheme="http://example.com/tags/%E9%AD%94%E6%96%B9/"/>
    
  </entry>
  
</feed>
